// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (C) 2018 joseluis.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301  USA

using System;
using essence.geometry.core;
using essence.util.math;

namespace essence.geometry.core.doubles
{
/**
 * Basic implementation of a 4 dimension vector.
 */
public struct Vector4d : Vector4
{

    #region fields
    public const double EPSILON = essence.util.math.DoubleUtils.EPSILON;
    /** X component. */
    private readonly double x;
    /** Y component. */
    private readonly double y;
    /** Z component. */
    private readonly double z;
    /** W component. */
    private readonly double w;
    private static String format;
    #endregion

    /**
     * Empty constructor.
     */
    public Vector4d()
    {
        this((double)0, (double)0, (double)0, (double)0);
    }

    /**
     * This constructor sets the components of this tuple.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     * @param w Value of the component W.
     */
    public Vector4d(double x, double y, double z, double w)
    {
        this.x = x;
        this.y = y;
        this.z = z;
        this.w = w;
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector4d(Tuple tuple)
    {
        if (tuple is Tuple4d)
        {
            Tuple4d _tuple = (Tuple4d)tuple;
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
            this.z = _tuple.GetZ();
            this.w = _tuple.GetW();
        }
        else if (tuple is BuffTuple4d)
        {
            BuffTuple4d _tuple = (BuffTuple4d)tuple;
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
            this.z = _tuple.GetZ();
            this.w = _tuple.GetW();
        }
        else
        {
            Tuple4d _tuple = new Tuple4d(tuple);
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
            this.z = _tuple.GetZ();
            this.w = _tuple.GetW();
        }
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector4d(Tuple4d tuple)
    {
        this.x = tuple.GetX();
        this.y = tuple.GetY();
        this.z = tuple.GetZ();
        this.w = tuple.GetW();
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector4d(BuffTuple4d tuple)
    {
        this.x = tuple.GetX();
        this.y = tuple.GetY();
        this.z = tuple.GetZ();
        this.w = tuple.GetW();
    }

    /**
     * Zero vector.
     *
     * @return Vector zero.
     */
    public static Vector4d getZero()
    {
        return new Vector4d((double)0, (double)0, (double)0, (double)0);
    }

    /**
     * One vector.
     *
     * @return Vector one.
     */
    public static Vector4d getOne()
    {
        return new Vector4d((double)1, (double)1, (double)1, (double)1);
    }

    /**
     * Unit vector: X.
     *
     * @return Vector unit.
     */
    public static Vector4d getUX()
    {
        return getUnit(0);
    }

    /**
     * Unit vector: Y.
     *
     * @return Vector unit.
     */
    public static Vector4d getUY()
    {
        return getUnit(1);
    }

    /**
     * Unit vector: Z.
     *
     * @return Vector unit.
     */
    public static Vector4d getUZ()
    {
        return getUnit(2);
    }

    /**
     * Unit vector: W.
     *
     * @return Vector unit.
     */
    public static Vector4d getUW()
    {
        return getUnit(3);
    }

    #region accessors
    public double GetAt(int index)
    {
        switch(index)
        {
        case 0:
            return x;
        case 1:
            return y;
        case 2:
            return z;
        case 3:
            return w;
        }
        throw new IndexOutOfRangeException();
    }

    public double GetX()
    {
        return x;
    }

    public double GetY()
    {
        return y;
    }

    public double GetZ()
    {
        return z;
    }

    public double GetW()
    {
        return w;
    }
    #endregion

    #region Vector4
    public bool IsUnit(double epsilon = EPSILON)
    {
        return DoubleUtils.epsilonEquals(getLength(), 1, epsilon);
    }

    public Vector4d GetUnit()
    {
        double len = getLength();
        if (DoubleUtils.epsilonZero(len))
        {
            throw new ArithmeticException("Divided by 0");
        }
        return div(len);
    }

    public int GetQuadrant()
    {
        int v = 0;
        int p = 1;
        if (getX() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getY() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getZ() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getW() < 0)
        {
            v |= p;
            p <<= 1;
        }
        return v;
    }

    public double GetLength()
    {
        return Math.sqrt(getLengthCuad());
    }

    public double GetLengthCuad()
    {
        return dot(this);
    }

    public double GetLengthL1()
    {
        return Math.abs(getX())
               + Math.abs(getY())
               + Math.abs(getZ())
               + Math.abs(getW());
    }

    public Vector4d add(Vector4 other)
    {
        if (other instanceof Vector4d)
        {
            return add((Vector4d)other);
        }
        else if (other instanceof BuffVector4d)
        {
            return add((BuffVector4d)other);
        }
        else
        {
            return add(new Vector4d(other));
        }
    }

    public Vector4d add(Vector4d other)
    {
        return new Vector4d((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()), (double)(getW() + other.getW()));
    }

    public Vector4d add(BuffVector4d other)
    {
        return new Vector4d((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()), (double)(getW() + other.getW()));
    }

    public Vector4d sub(Vector4 other)
    {
        if (other instanceof Vector4d)
        {
            return sub((Vector4d)other);
        }
        else if (other instanceof BuffVector4d)
        {
            return sub((BuffVector4d)other);
        }
        else
        {
            return sub(new Vector4d(other));
        }
    }

    public Vector4d sub(Vector4d other)
    {
        return new Vector4d((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()), (double)(getW() - other.getW()));
    }

    public Vector4d sub(BuffVector4d other)
    {
        return new Vector4d((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()), (double)(getW() - other.getW()));
    }

    public Vector4d simpleMul(Vector4 other)
    {
        if (other instanceof Vector4d)
        {
            return simpleMul((Vector4d)other);
        }
        else if (other instanceof BuffVector4d)
        {
            return simpleMul((BuffVector4d)other);
        }
        else
        {
            return simpleMul(new Vector4d(other));
        }
    }

    public Vector4d simpleMul(Vector4d other)
    {
        return new Vector4d((double)(getX() * other.getX()), (double)(getY() * other.getY()), (double)(getZ() * other.getZ()), (double)(getW() * other.getW()));
    }

    public Vector4d simpleMul(BuffVector4d other)
    {
        return new Vector4d((double)(getX() * other.getX()), (double)(getY() * other.getY()), (double)(getZ() * other.getZ()), (double)(getW() * other.getW()));
    }

    public Vector4d simpleDiv(Vector4 other)
    {
        if (other instanceof Vector4d)
        {
            return simpleDiv((Vector4d)other);
        }
        else if (other instanceof BuffVector4d)
        {
            return simpleDiv((BuffVector4d)other);
        }
        else
        {
            return simpleDiv(new Vector4d(other));
        }
    }

    public Vector4d simpleDiv(Vector4d other)
    {
        return new Vector4d((double)(getX() / other.getX()), (double)(getY() / other.getY()), (double)(getZ() / other.getZ()), (double)(getW() / other.getW()));
    }

    public Vector4d simpleDiv(BuffVector4d other)
    {
        return new Vector4d((double)(getX() / other.getX()), (double)(getY() / other.getY()), (double)(getZ() / other.getZ()), (double)(getW() / other.getW()));
    }

    public Vector4d mul(double v)
    {
        return new Vector4d((double)(getX() * v), (double)(getY() * v), (double)(getZ() * v), (double)(getW() * v));
    }

    public Vector4d div(double v)
    {
        if (DoubleUtils.epsilonZero(v))
        {
            throw new ArithmeticError("divided by zero");
        }
        return new Vector4d((double)(getX() / v), (double)(getY() / v), (double)(getZ() / v), (double)(getW() / v));
    }

    public Vector4d neg()
    {
        return new Vector4d((double)(- getX()), (double)(- getY()), (double)(- getZ()), (double)(- getW()));
    }

    public Vector4d abs()
    {
        return new Vector4d((double)Math.abs(getX()), (double)Math.abs(getY()), (double)Math.abs(getZ()), (double)Math.abs(getW()));
    }

    public Vector4d lerp(Vector4 other, double alpha)
    {
        if (other instanceof Vector4d)
        {
            return lerp((Vector4d)other, alpha);
        }
        else if (other instanceof BuffVector4d)
        {
            return lerp((BuffVector4d)other, alpha);
        }
        else
        {
            return lerp(new Vector4d(other), alpha);
        }
    }

    public Vector4d lerp(Vector4d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public Vector4d lerp(BuffVector4d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(Vector4 other, Vector4 lerp)
    {
        if (other instanceof Vector4d && lerp instanceof Vector4d)
        {
            return invLerp((Vector4d)other, (Vector4d)lerp);
        }
        else if (other instanceof BuffVector4d && lerp instanceof BuffVector4d)
        {
            return invLerp((BuffVector4d)other, (BuffVector4d)lerp);
        }
        else
        {
            return invLerp(new Vector4d(other), new Vector4d(other));
        }
    }

    public double invLerp(Vector4d other, Vector4d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double w1 = other.getW() - getW();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        double w2 = lerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    public double invLerp(BuffVector4d other, BuffVector4d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double w1 = other.getW() - getW();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        double w2 = lerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    public Vector4d lineal(Vector4 other, double alpha, double beta)
    {
        if (other instanceof Vector4d)
        {
            return lineal((Vector4d)other, alpha, beta);
        }
        else if (other instanceof BuffVector4d)
        {
            return lineal((BuffVector4d)other, alpha, beta);
        }
        else
        {
            return lineal(new Vector4d(other), alpha, beta);
        }
    }

    public Vector4d lineal(Vector4d other, double alpha, double beta)
    {
        return new Vector4d((double)(alpha * getX() + beta * other.getX()),
                            (double)(alpha * getY() + beta * other.getY()),
                            (double)(alpha * getZ() + beta * other.getZ()),
                            (double)(alpha * getW() + beta * other.getW()));
    }

    public Vector4d lineal(BuffVector4d other, double alpha, double beta)
    {
        return new Vector4d((double)(alpha * getX() + beta * other.getX()),
                            (double)(alpha * getY() + beta * other.getY()),
                            (double)(alpha * getZ() + beta * other.getZ()),
                            (double)(alpha * getW() + beta * other.getW()));
    }

    public double Dot(Vector4 other)
    {
        if (other is Vector4d)
        {
            return Dot((Vector4d)other);
        }
        else if (other is BuffVector4d)
        {
            return Dot((BuffVector4d)other);
        }
        else
        {
            return Dot(new Vector4d(other));
        }
    }
    public double Dot(Vector4d other)
    {
        return getX() * other.getX() + getY() * other.getY() + getZ() * other.getZ() + getW() * other.getW();
    }

    public double Dot(BuffVector4d other)
    {
        return getX() * other.getX() + getY() * other.getY() + getZ() * other.getZ() + getW() * other.getW();
    }

    public double scalarProjection(Vector4 where)
    {
        if (where is Vector4d)
        {
            return scalarProjection((Vector4d)where);
        }
        else if (where is BuffVector4d)
        {
            return scalarProjection((BuffVector4d)where);
        }
        else
        {
            return scalarProjection(new Vector4d(where));
        }
    }

    public double scalarProjection(Vector4d where)
    {
        return dot(where) / where.getLength();
    }

    public double scalarProjection(BuffVector4d where)
    {
        return dot(where) / where.getLength();
    }

    public Vector4 vectorProjection(Vector4 where)
    {
        if (where is Vector4d)
        {
            return vectorProjection((Vector4d)where);
        }
        else if (where is BuffVector4d)
        {
            return vectorProjection((BuffVector4d)where);
        }
        else
        {
            return vectorProjection(new Vector4d(where));
        }
    }

    public Vector4d vectorProjection(Vector4d where)
    {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }

    public BuffVector4d vectorProjection(BuffVector4d where)
    {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }
    #endregion

    #region Object
    public override String ToString()
    {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
        return String.Format(GetFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
                             x, y, z, w);
    }

    public override bool Equals(Object other)
    {
        if (other is Tuple4d)
        {
            return Equals((Tuple4d)other);
        }
        else if (other is BuffTuple4d)
        {
            return Equals((BuffTuple4d)other);
        }
        else if (other is Tuple)
        {
            return Equals(new Tuple4d((Tuple)other));
        }
        return false;
    }
    public bool Equals(Tuple4d other)
    {
        if (other == this)
        {
            return true;
        }
        return Equals(other.GetX(),
                      other.GetY(),
                      other.GetZ(),
                      other.GetW());
    }

    public bool Equals(BuffTuple4d other)
    {
        return Equals(other.GetX(),
                      other.GetY(),
                      other.GetZ(),
                      other.GetW());
    }

    public override int GetHashCode()
    {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        const int prime = 31;
        int hash = 1;
        hash = prime * hash + GetX().GetHashCode();
        hash = prime * hash + GetY().GetHashCode();
        hash = prime * hash + GetZ().GetHashCode();
        hash = prime * hash + GetW().GetHashCode();
        return hash;
    }

    public Vector4d Clone()
    {
        Vector4d copy = (Vector4d)base.Clone();
        return copy;
    }
    #endregion

    #region Tuple
    public int Size
    {
        get
        {
            return 4;
        }
    }

    public void GetInto(TupleSet tupleSet)
    {
        tupleSet.SetDouble(0, x);
        tupleSet.SetDouble(1, y);
        tupleSet.SetDouble(2, z);
        tupleSet.SetDouble(3, w);
    }
    #endregion

    #region EpsilonEquatable<Tuple>
    public bool EpsilonEquals(Tuple other, double epsilon = EPSILON)
    {
        if (other is Tuple4d)
        {
            return EpsilonEquals((Tuple4d)other, epsilon);
        }
        else if (other is BuffTuple4d)
        {
            return EpsilonEquals((BuffTuple4d)other, epsilon);
        }
        else if (other is Tuple)
        {
            return EpsilonEquals(new Tuple4d(other), epsilon);
        }
        return false;
    }

    public bool EpsilonEquals(Tuple4d other, double epsilon = EPSILON)
    {
        if (other == this)
        {
            return true;
        }
        return EpsilonEquals(other.GetX(),
                             other.GetY(),
                             other.GetZ(),
                             other.GetW(), epsilon);
    }

    public bool EpsilonEquals(BuffTuple4d other, double epsilon = EPSILON)
    {
        return EpsilonEquals(other.GetX(),
                             other.GetY(),
                             other.GetZ(),
                             other.GetW(), epsilon);
    }
    #endregion

    #region private
    private static Vector4d getUnit(int index)
    {
        return new Vector4d((double)((index == 0) ? 1 : 0),
                            (double)((index == 1) ? 1 : 0),
                            (double)((index == 2) ? 1 : 0),
                            (double)((index == 3) ? 1 : 0));
    }
    #endregion
}
}
