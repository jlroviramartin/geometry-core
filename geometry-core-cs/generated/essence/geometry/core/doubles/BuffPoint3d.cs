// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (C) 2018 joseluis.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301  USA

import essence.geometry.core.Tuple;
import essence.geometry.core.Vector3;
import essence.geometry.core.Point3;
import essence.geometry.core.BuffPoint3;

namespace essence.geometry.core.doubles
{
/**
 * Basic implementation of a 3 dimension vector.
 */
public class BuffPoint3d : BuffTuple3d, BuffPoint3
{

    /**
     * Empty constructor.
     */
    public BuffPoint3d()
    {
    }

    /**
     * This constructor sets the components of this point.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     */
    public BuffPoint3d(double x, double y, double z)
    {
        super(x, y, z);
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public BuffPoint3d(Tuple tuple)
    {
        super(tuple);
    }

    /**
     * Zero point.
     *
     * @return Point zero.
     */
    public static final BuffPoint3d GetZero()
    {
        return new BuffPoint3d((double)0, (double)0, (double)0);
    }

    /**
     * One point.
     *
     * @return Point one.
     */
    public static final BuffPoint3d GetOne()
    {
        return new BuffPoint3d((double)1, (double)1, (double)1);
    }

//<editor-fold defaultstate="collapsed" desc="BuffPoint3">
    public BuffPoint3d addAndSet(Vector3 other)
    {
        if (other instanceof Vector3d)
        {
            return addAndSet((Vector3d)other);
        }
        else if (other instanceof BuffVector3d)
        {
            return addAndSet((BuffVector3d)other);
        }
        else
        {
            return addAndSet(new Vector3d(other));
        }
    }

    public BuffPoint3d addAndSet(Vector3d other)
    {
        set((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
        return this;
    }

    public BuffPoint3d addAndSet(BuffVector3d other)
    {
        set((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
        return this;
    }

    public BuffPoint3d subAndSet(Vector3 other)
    {
        if (other instanceof Vector3d)
        {
            return subAndSet((Vector3d)other);
        }
        else if (other instanceof BuffVector3d)
        {
            return subAndSet((BuffVector3d)other);
        }
        else
        {
            return subAndSet(new Vector3d(other));
        }
    }

    public BuffPoint3d subAndSet(Vector3d other)
    {
        set((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
        return this;
    }

    public BuffPoint3d subAndSet(BuffVector3d other)
    {
        set((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
        return this;
    }

    public BuffPoint3d lerpAndSet(Point3 other, double alpha)
    {
        if (other instanceof Point3d)
        {
            return lerpAndSet((Point3d)other, alpha);
        }
        else if (other instanceof BuffPoint3d)
        {
            return lerpAndSet((BuffPoint3d)other, alpha);
        }
        else
        {
            return lerpAndSet(new Point3d(other), alpha);
        }
    }

    public BuffPoint3d lerpAndSet(Point3d other, double alpha)
    {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    public BuffPoint3d lerpAndSet(BuffPoint3d other, double alpha)
    {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    @Override
    public BuffPoint3d linealAndSet(Point3 other, double alpha, double beta)
    {
        if (other instanceof Point3d)
        {
            return linealAndSet((Point3d)other, alpha, beta);
        }
        else if (other instanceof BuffPoint3d)
        {
            return linealAndSet((BuffPoint3d)other, alpha, beta);
        }
        else
        {
            return linealAndSet(new Point3d(other), alpha, beta);
        }
    }

    public BuffPoint3d linealAndSet(Point3d other, double alpha, double beta)
    {
        set((double)(alpha * getX() + beta * other.getX()),
            (double)(alpha * getY() + beta * other.getY()),
            (double)(alpha * getZ() + beta * other.getZ()));
        return this;
    }

    public BuffPoint3d linealAndSet(BuffPoint3d other, double alpha, double beta)
    {
        set((double)(alpha * getX() + beta * other.getX()),
            (double)(alpha * getY() + beta * other.getY()),
            (double)(alpha * getZ() + beta * other.getZ()));
        return this;
    }

    @Override
    public BuffPoint3d vectorProjectionAndSet(Vector3 where)
    {
        if (where instanceof Vector3d)
        {
            return vectorProjectionAndSet((Vector3d)where);
        }
        else if (where instanceof BuffVector3d)
        {
            return vectorProjectionAndSet((BuffVector3d)where);
        }
        else
        {
            return vectorProjectionAndSet(new Vector3d(where));
        }
    }

    public BuffPoint3d vectorProjectionAndSet(Vector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        double r = dot / where.GetLengthCuad();

        set((double)(getX() * r), (double)(getY() * r), (double)(getZ() * r));
        return this;
    }

    public BuffPoint3d vectorProjectionAndSet(BuffVector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        double r = dot / where.GetLengthCuad();

        set((double)(getX() * r), (double)(getY() * r), (double)(getZ() * r));
        return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Point3">
    @Override
    public int GetQuadrant()
    {
        int v = 0;
        int p = 1;
        if (getX() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getY() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getZ() < 0)
        {
            v |= p;
            p <<= 1;
        }
        return v;
    }

    @Override
    public double getDistance(Point3 other)
    {
        if (other is Point3d)
        {
            return getDistance((Point3d)other);
        }
        else if (other is BuffPoint3d)
        {
            return getDistance((BuffPoint3d)other);
        }
        else
        {
            return getDistance(new Point3d(other));
        }
    }

    public double getDistance(Point3d other)
    {
        return Math.sqrt(getDistanceCuad(other));
    }

    public double getDistance(BuffPoint3d other)
    {
        return Math.sqrt(getDistanceCuad(other));
    }

    @Override
    public double getDistanceCuad(Point3 other)
    {
        if (other is Point3d)
        {
            return getDistanceCuad((Point3d)other);
        }
        else if (other is BuffPoint3d)
        {
            return getDistanceCuad((BuffPoint3d)other);
        }
        else
        {
            return getDistanceCuad(new Point3d(other));
        }
    }

    public double getDistanceCuad(Point3d other)
    {
        return Square(other.getX() - getX())
               + Square(other.getY() - getY())
               + Square(other.getZ() - getZ());
    }

    public double getDistanceCuad(BuffPoint3d other)
    {
        return Square(other.getX() - getX())
               + Square(other.getY() - getY())
               + Square(other.getZ() - getZ());
    }

    @Override
    public double getDistanceL1(Point3 other)
    {
        if (other is Point3d)
        {
            return getDistanceL1((Point3d)other);
        }
        else if (other is BuffPoint3d)
        {
            return getDistanceL1((BuffPoint3d)other);
        }
        else
        {
            return getDistanceL1(new Point3d(other));
        }
    }

    public double getDistanceL1(Point3d other)
    {
        return Math.Abs(other.getX() - getX())
               + Math.Abs(other.getY() - getY())
               + Math.Abs(other.getZ() - getZ());
    }

    public double getDistanceL1(BuffPoint3d other)
    {
        return Math.Abs(other.getX() - getX())
               + Math.Abs(other.getY() - getY())
               + Math.Abs(other.getZ() - getZ());
    }

    public BuffPoint3d add(Vector3 other)
    {
        if (other instanceof Vector3d)
        {
            return add((Vector3d)other);
        }
        else if (other instanceof BuffVector3d)
        {
            return add((BuffVector3d)other);
        }
        else
        {
            return add(new Vector3d(other));
        }
    }

    public BuffPoint3d add(Vector3d other)
    {
        return new BuffPoint3d((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
    }

    public BuffPoint3d add(BuffVector3d other)
    {
        return new BuffPoint3d((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
    }

    public BuffPoint3d sub(Vector3 other)
    {
        if (other instanceof Vector3d)
        {
            return sub((Vector3d)other);
        }
        else if (other instanceof BuffVector3d)
        {
            return sub((BuffVector3d)other);
        }
        else
        {
            return sub(new Vector3d(other));
        }
    }

    public BuffPoint3d sub(Vector3d other)
    {
        return new BuffPoint3d((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
    }

    public BuffPoint3d sub(BuffVector3d other)
    {
        return new BuffPoint3d((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
    }

    @Override
    public BuffVector3d VectorTo(Point3 other)
    {
        if (other is Point3d)
        {
            return VectorTo((Point3d)other);
        }
        else if (other is BuffPoint3d)
        {
            return VectorTo((BuffPoint3d)other);
        }
        else
        {
            return VectorTo(new Point3d(other));
        }
    }

    public BuffVector3d VectorTo(Point3d other)
    {
        return new BuffVector3d((double)(other.getX() - getX()), (double)(other.getY() - getY()), (double)(other.getZ() - getZ()));
    }

    public BuffVector3d VectorTo(BuffPoint3d other)
    {
        return new BuffVector3d((double)(other.getX() - getX()), (double)(other.getY() - getY()), (double)(other.getZ() - getZ()));
    }

    public BuffPoint3d lerp(Point3 other, double alpha)
    {
        if (other instanceof Point3d)
        {
            return lerp((Point3d)other, alpha);
        }
        else if (other instanceof BuffPoint3d)
        {
            return lerp((BuffPoint3d)other, alpha);
        }
        else
        {
            return lerp(new Point3d(other), alpha);
        }
    }

    public BuffPoint3d lerp(Point3d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public BuffPoint3d lerp(BuffPoint3d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(Point3 other, Point3 lerp)
    {
        if (other instanceof Point3d && lerp instanceof Point3d)
        {
            return invLerp((Point3d)other, (Point3d)lerp);
        }
        else if (other instanceof BuffPoint3d && lerp instanceof BuffPoint3d)
        {
            return invLerp((BuffPoint3d)other, (BuffPoint3d)lerp);
        }
        else
        {
            return invLerp(new Point3d(other), new Point3d(other));
        }
    }

    public double invLerp(Point3d other, Point3d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    public double invLerp(BuffPoint3d other, BuffPoint3d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    public BuffPoint3d lineal(Point3 other, double alpha, double beta)
    {
        if (other instanceof Point3d)
        {
            return lineal((Point3d)other, alpha, beta);
        }
        else if (other instanceof BuffPoint3d)
        {
            return lineal((BuffPoint3d)other, alpha, beta);
        }
        else
        {
            return lineal(new Point3d(other), alpha, beta);
        }
    }

    public BuffPoint3d lineal(Point3d other, double alpha, double beta)
    {
        return new BuffPoint3d((double)(alpha * getX() + beta * other.getX()),
                               (double)(alpha * getY() + beta * other.getY()),
                               (double)(alpha * getZ() + beta * other.getZ()));
    }

    public BuffPoint3d lineal(BuffPoint3d other, double alpha, double beta)
    {
        return new BuffPoint3d((double)(alpha * getX() + beta * other.getX()),
                               (double)(alpha * getY() + beta * other.getY()),
                               (double)(alpha * getZ() + beta * other.getZ()));
    }

    @Override
    public double ScalarProjection(Vector3 where)
    {
        if (where is Vector3d)
        {
            return ScalarProjection((Vector3d)where);
        }
        else if (where is BuffVector3d)
        {
            return ScalarProjection((BuffVector3d)where);
        }
        else
        {
            return ScalarProjection(new Vector3d(where));
        }
    }

    public double ScalarProjection(Vector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        return  dot / where.GetLengthCuad();
    }

    public double ScalarProjection(BuffVector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        return  dot / where.GetLengthCuad();
    }

    @Override
    public BuffPoint3d VectorProjection(Vector3 where)
    {
        if (where is Vector3d)
        {
            return VectorProjection((Vector3d)where);
        }
        else if (where is BuffVector3d)
        {
            return VectorProjection((BuffVector3d)where);
        }
        else
        {
            return VectorProjection(new Vector3d(where));
        }
    }

    public BuffPoint3d VectorProjection(Vector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        double r = dot / where.GetLengthCuad();

        return new BuffPoint3d((double)(getX() * r), (double)(getY() * r), (double)(getZ() * r));
    }

    public BuffPoint3d VectorProjection(BuffVector3d where)
    {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ();
        double r = dot / where.GetLengthCuad();

        return new BuffPoint3d((double)(getX() * r), (double)(getY() * r), (double)(getZ() * r));
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public BuffPoint3d Clone()
    {
        return (BuffPoint3d)base.Clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private static double Square(double v)
    {
        return v*v;
    }
//</editor-fold>
}
}
