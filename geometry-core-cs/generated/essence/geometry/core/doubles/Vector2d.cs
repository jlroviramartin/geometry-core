// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (C) 2018 joseluis.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301  USA

using System;
using essence.geometry.core;
using essence.util.math;

namespace essence.geometry.core.doubles
{
/**
 * Basic implementation of a 2 dimension vector.
 */
public struct Vector2d : Vector2
{

    #region fields
    public const double EPSILON = essence.util.math.DoubleUtils.EPSILON;
    /** X component. */
    private readonly double x;
    /** Y component. */
    private readonly double y;
    private static String format;
    #endregion

    /**
     * Empty constructor.
     */
    public Vector2d()
    {
        this((double)0, (double)0);
    }

    /**
     * This constructor sets the components of this tuple.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     */
    public Vector2d(double x, double y)
    {
        this.x = x;
        this.y = y;
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector2d(Tuple tuple)
    {
        if (tuple is Tuple2d)
        {
            Tuple2d _tuple = (Tuple2d)tuple;
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
        }
        else if (tuple is BuffTuple2d)
        {
            BuffTuple2d _tuple = (BuffTuple2d)tuple;
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
        }
        else
        {
            Tuple2d _tuple = new Tuple2d(tuple);
            this.x = _tuple.GetX();
            this.y = _tuple.GetY();
        }
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector2d(Tuple2d tuple)
    {
        this.x = tuple.GetX();
        this.y = tuple.GetY();
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public Vector2d(BuffTuple2d tuple)
    {
        this.x = tuple.GetX();
        this.y = tuple.GetY();
    }

    /**
     * Zero vector.
     *
     * @return Vector zero.
     */
    public static Vector2d getZero()
    {
        return new Vector2d((double)0, (double)0);
    }

    /**
     * One vector.
     *
     * @return Vector one.
     */
    public static Vector2d getOne()
    {
        return new Vector2d((double)1, (double)1);
    }

    /**
     * Unit vector: X.
     *
     * @return Vector unit.
     */
    public static Vector2d getUX()
    {
        return getUnit(0);
    }

    /**
     * Unit vector: Y.
     *
     * @return Vector unit.
     */
    public static Vector2d getUY()
    {
        return getUnit(1);
    }

    #region accessors
    public double GetAt(int index)
    {
        switch(index)
        {
        case 0:
            return x;
        case 1:
            return y;
        }
        throw new IndexOutOfRangeException();
    }

    public double GetX()
    {
        return x;
    }

    public double GetY()
    {
        return y;
    }
    #endregion

    #region Vector2
    public bool IsUnit(double epsilon = EPSILON)
    {
        return DoubleUtils.epsilonEquals(getLength(), 1, epsilon);
    }

    public Vector2d GetUnit()
    {
        double len = getLength();
        if (DoubleUtils.epsilonZero(len))
        {
            throw new ArithmeticException("Divided by 0");
        }
        return div(len);
    }

    public int GetQuadrant()
    {
        int v = 0;
        int p = 1;
        if (getX() < 0)
        {
            v |= p;
            p <<= 1;
        }
        if (getY() < 0)
        {
            v |= p;
            p <<= 1;
        }
        return v;
    }

    public double GetLength()
    {
        return Math.sqrt(getLengthCuad());
    }

    public double GetLengthCuad()
    {
        return dot(this);
    }

    public double GetLengthL1()
    {
        return Math.abs(getX())
               + Math.abs(getY());
    }

    public double GetAngle()
    {
        return (double) Math.atan2(getY(), getX());
    }

    public double AngleTo(Vector2 other)
    {
        if (other is Vector2d)
        {
            return angleTo((Vector2d)other);
        }
        else if (other is BuffVector2d)
        {
            return angleTo((BuffVector2d)other);
        }
        else
        {
            return angleTo(new Vector2d(other));
        }
    }

    public double AngleTo(Vector2d other)
    {
        // http://stackoverflow.com/questions/2150050/finding-signed-angle-between-vectors
        return Math.atan2(getX() * other.getY() - getY() * other.getX(),
                          getX() * other.getX() + getY() * other.getY());
    }

    public double AngleTo(BuffVector2d other)
    {
        // http://stackoverflow.com/questions/2150050/finding-signed-angle-between-vectors
        return Math.atan2(getX() * other.getY() - getY() * other.getX(),
                          getX() * other.getX() + getY() * other.getY());
    }

    public Vector2d GetPerpLeft()
    {
        return new Vector2d(-getY(), getX());
    }

    public Vector2d GetPerpRight()
    {
        return new Vector2d(getY(), -getX());
    }

    public Vector2d Rotate(double angle)
    {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        return new Vector2d((double)(getX() * c - getY() * s),
                            (double)(getX() * s + getY() * c));
    }

    public Vector2d RotateAndScale(double angle, double len)
    {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        return new Vector2d((double)(len*(getX() * c - getY() * s)),
                            (double)(len*(getX() * s + getY() * c)));
    }

    public Vector2d add(Vector2 other)
    {
        if (other instanceof Vector2d)
        {
            return add((Vector2d)other);
        }
        else if (other instanceof BuffVector2d)
        {
            return add((BuffVector2d)other);
        }
        else
        {
            return add(new Vector2d(other));
        }
    }

    public Vector2d add(Vector2d other)
    {
        return new Vector2d((double)(getX() + other.getX()), (double)(getY() + other.getY()));
    }

    public Vector2d add(BuffVector2d other)
    {
        return new Vector2d((double)(getX() + other.getX()), (double)(getY() + other.getY()));
    }

    public Vector2d sub(Vector2 other)
    {
        if (other instanceof Vector2d)
        {
            return sub((Vector2d)other);
        }
        else if (other instanceof BuffVector2d)
        {
            return sub((BuffVector2d)other);
        }
        else
        {
            return sub(new Vector2d(other));
        }
    }

    public Vector2d sub(Vector2d other)
    {
        return new Vector2d((double)(getX() - other.getX()), (double)(getY() - other.getY()));
    }

    public Vector2d sub(BuffVector2d other)
    {
        return new Vector2d((double)(getX() - other.getX()), (double)(getY() - other.getY()));
    }

    public Vector2d simpleMul(Vector2 other)
    {
        if (other instanceof Vector2d)
        {
            return simpleMul((Vector2d)other);
        }
        else if (other instanceof BuffVector2d)
        {
            return simpleMul((BuffVector2d)other);
        }
        else
        {
            return simpleMul(new Vector2d(other));
        }
    }

    public Vector2d simpleMul(Vector2d other)
    {
        return new Vector2d((double)(getX() * other.getX()), (double)(getY() * other.getY()));
    }

    public Vector2d simpleMul(BuffVector2d other)
    {
        return new Vector2d((double)(getX() * other.getX()), (double)(getY() * other.getY()));
    }

    public Vector2d simpleDiv(Vector2 other)
    {
        if (other instanceof Vector2d)
        {
            return simpleDiv((Vector2d)other);
        }
        else if (other instanceof BuffVector2d)
        {
            return simpleDiv((BuffVector2d)other);
        }
        else
        {
            return simpleDiv(new Vector2d(other));
        }
    }

    public Vector2d simpleDiv(Vector2d other)
    {
        return new Vector2d((double)(getX() / other.getX()), (double)(getY() / other.getY()));
    }

    public Vector2d simpleDiv(BuffVector2d other)
    {
        return new Vector2d((double)(getX() / other.getX()), (double)(getY() / other.getY()));
    }

    public Vector2d mul(double v)
    {
        return new Vector2d((double)(getX() * v), (double)(getY() * v));
    }

    public Vector2d div(double v)
    {
        if (DoubleUtils.epsilonZero(v))
        {
            throw new ArithmeticError("divided by zero");
        }
        return new Vector2d((double)(getX() / v), (double)(getY() / v));
    }

    public Vector2d neg()
    {
        return new Vector2d((double)(- getX()), (double)(- getY()));
    }

    public Vector2d abs()
    {
        return new Vector2d((double)Math.abs(getX()), (double)Math.abs(getY()));
    }

    public Vector2d lerp(Vector2 other, double alpha)
    {
        if (other instanceof Vector2d)
        {
            return lerp((Vector2d)other, alpha);
        }
        else if (other instanceof BuffVector2d)
        {
            return lerp((BuffVector2d)other, alpha);
        }
        else
        {
            return lerp(new Vector2d(other), alpha);
        }
    }

    public Vector2d lerp(Vector2d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public Vector2d lerp(BuffVector2d other, double alpha)
    {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(Vector2 other, Vector2 lerp)
    {
        if (other instanceof Vector2d && lerp instanceof Vector2d)
        {
            return invLerp((Vector2d)other, (Vector2d)lerp);
        }
        else if (other instanceof BuffVector2d && lerp instanceof BuffVector2d)
        {
            return invLerp((BuffVector2d)other, (BuffVector2d)lerp);
        }
        else
        {
            return invLerp(new Vector2d(other), new Vector2d(other));
        }
    }

    public double invLerp(Vector2d other, Vector2d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        return (x1 * x2 + y1 * y2) / Math.sqrt(x1 * x1 + y1 * y1);
    }

    public double invLerp(BuffVector2d other, BuffVector2d lerp)
    {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        return (x1 * x2 + y1 * y2) / Math.sqrt(x1 * x1 + y1 * y1);
    }

    public Vector2d lineal(Vector2 other, double alpha, double beta)
    {
        if (other instanceof Vector2d)
        {
            return lineal((Vector2d)other, alpha, beta);
        }
        else if (other instanceof BuffVector2d)
        {
            return lineal((BuffVector2d)other, alpha, beta);
        }
        else
        {
            return lineal(new Vector2d(other), alpha, beta);
        }
    }

    public Vector2d lineal(Vector2d other, double alpha, double beta)
    {
        return new Vector2d((double)(alpha * getX() + beta * other.getX()),
                            (double)(alpha * getY() + beta * other.getY()));
    }

    public Vector2d lineal(BuffVector2d other, double alpha, double beta)
    {
        return new Vector2d((double)(alpha * getX() + beta * other.getX()),
                            (double)(alpha * getY() + beta * other.getY()));
    }

    public double Dot(Vector2 other)
    {
        if (other is Vector2d)
        {
            return Dot((Vector2d)other);
        }
        else if (other is BuffVector2d)
        {
            return Dot((BuffVector2d)other);
        }
        else
        {
            return Dot(new Vector2d(other));
        }
    }
    public double Dot(Vector2d other)
    {
        return getX() * other.getX() + getY() * other.getY();
    }

    public double Dot(BuffVector2d other)
    {
        return getX() * other.getX() + getY() * other.getY();
    }

    public double Cross(Vector2 other)
    {
        if (other is Vector2d)
        {
            return Cross((Vector2d)other);
        }
        else if (other is BuffVector2d)
        {
            return Cross((BuffVector2d)other);
        }
        else
        {
            return Cross(new Vector2d(other));
        }
    }

    public double Cross(Vector2d other)
    {
        return getX() * other.getY() - getY() * other.getX();
    }

    public double Cross(BuffVector2d other)
    {
        return getX() * other.getY() - getY() * other.getX();
    }

    public double scalarProjection(Vector2 where)
    {
        if (where is Vector2d)
        {
            return scalarProjection((Vector2d)where);
        }
        else if (where is BuffVector2d)
        {
            return scalarProjection((BuffVector2d)where);
        }
        else
        {
            return scalarProjection(new Vector2d(where));
        }
    }

    public double scalarProjection(Vector2d where)
    {
        return dot(where) / where.getLength();
    }

    public double scalarProjection(BuffVector2d where)
    {
        return dot(where) / where.getLength();
    }

    public Vector2 vectorProjection(Vector2 where)
    {
        if (where is Vector2d)
        {
            return vectorProjection((Vector2d)where);
        }
        else if (where is BuffVector2d)
        {
            return vectorProjection((BuffVector2d)where);
        }
        else
        {
            return vectorProjection(new Vector2d(where));
        }
    }

    public Vector2d vectorProjection(Vector2d where)
    {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }

    public BuffVector2d vectorProjection(BuffVector2d where)
    {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }
    #endregion

    #region Object
    public override String ToString()
    {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
        return String.Format(GetFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
                             x, y);
    }

    public override bool Equals(Object other)
    {
        if (other is Tuple2d)
        {
            return Equals((Tuple2d)other);
        }
        else if (other is BuffTuple2d)
        {
            return Equals((BuffTuple2d)other);
        }
        else if (other is Tuple)
        {
            return Equals(new Tuple2d((Tuple)other));
        }
        return false;
    }
    public bool Equals(Tuple2d other)
    {
        if (other == this)
        {
            return true;
        }
        return Equals(other.GetX(),
                      other.GetY());
    }

    public bool Equals(BuffTuple2d other)
    {
        return Equals(other.GetX(),
                      other.GetY());
    }

    public override int GetHashCode()
    {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        const int prime = 31;
        int hash = 1;
        hash = prime * hash + GetX().GetHashCode();
        hash = prime * hash + GetY().GetHashCode();
        return hash;
    }

    public Vector2d Clone()
    {
        Vector2d copy = (Vector2d)base.Clone();
        return copy;
    }
    #endregion

    #region Tuple
    public int Size
    {
        get
        {
            return 2;
        }
    }

    public void GetInto(TupleSet tupleSet)
    {
        tupleSet.SetDouble(0, x);
        tupleSet.SetDouble(1, y);
    }
    #endregion

    #region EpsilonEquatable<Tuple>
    public bool EpsilonEquals(Tuple other, double epsilon = EPSILON)
    {
        if (other is Tuple2d)
        {
            return EpsilonEquals((Tuple2d)other, epsilon);
        }
        else if (other is BuffTuple2d)
        {
            return EpsilonEquals((BuffTuple2d)other, epsilon);
        }
        else if (other is Tuple)
        {
            return EpsilonEquals(new Tuple2d(other), epsilon);
        }
        return false;
    }

    public bool EpsilonEquals(Tuple2d other, double epsilon = EPSILON)
    {
        if (other == this)
        {
            return true;
        }
        return EpsilonEquals(other.GetX(),
                             other.GetY(), epsilon);
    }

    public bool EpsilonEquals(BuffTuple2d other, double epsilon = EPSILON)
    {
        return EpsilonEquals(other.GetX(),
                             other.GetY(), epsilon);
    }
    #endregion

    #region private
    private static Vector2d getUnit(int index)
    {
        return new Vector2d((double)((index == 0) ? 1 : 0),
                            (double)((index == 1) ? 1 : 0));
    }
    #endregion
}
}
