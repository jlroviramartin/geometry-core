// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//
// Copyright (C) 2018 joseluis.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
// MA 02110-1301  USA

using java.util.logging.Logger;
using essence.util.math.EpsilonEquatable;
using essence.geometry.core.DoubleUtils;
using essence.geometry.core.SingularMatrixException;
using essence.geometry.core.Tuple;
using essence.geometry.core.MatrixInpector;
using essence.geometry.core.MatrixSet;
using essence.geometry.core.Vector4;
using essence.geometry.core.BuffVector4;
using essence.geometry.core.Vector3;
using essence.geometry.core.Point3;
using essence.geometry.core.BuffVector3;
using essence.geometry.core.BuffPoint3;
using essence.geometry.core.VectorFormatInfo;
using essence.geometry.core.Matrix4x4;
using essence.geometry.core.BuffMatrix4x4;

using static essence.geometry.core.FloatUtils.EPSILON;

namespace essence.geometry.core.floats
{
/**
 * Basic implementation of a 4x4 matrix.
 */
public class Matrix4x4f : Cloneable, EpsilonEquatable<Matrix4x4f>, BuffMatrix4x4
{
//<editor-fold defaultstate="collapsed" desc="fields">
    /** M00 component. */
    private float m00;
    /** M01 component. */
    private float m01;
    /** M02 component. */
    private float m02;
    /** M03 component. */
    private float m03;
    /** M10 component. */
    private float m10;
    /** M11 component. */
    private float m11;
    /** M12 component. */
    private float m12;
    /** M13 component. */
    private float m13;
    /** M20 component. */
    private float m20;
    /** M21 component. */
    private float m21;
    /** M22 component. */
    private float m22;
    /** M23 component. */
    private float m23;
    /** M30 component. */
    private float m30;
    /** M31 component. */
    private float m31;
    /** M32 component. */
    private float m32;
    /** M33 component. */
    private float m33;
    private static final Logger LOG = Logger.getLogger(Matrix4x4f.class.getName());
    private static String format;
//</editor-fold>

    /**
     * Empty constructor.
     */
    public Matrix4x4f()
    {
        this(0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0);
    }

    /**
     * This constructor sets the properties of this matrix.
     *
     * @param m00 Value of the property M00.
     * @param m01 Value of the property M01.
     * @param m02 Value of the property M02.
     * @param m03 Value of the property M03.
     * @param m10 Value of the property M10.
     * @param m11 Value of the property M11.
     * @param m12 Value of the property M12.
     * @param m13 Value of the property M13.
     * @param m20 Value of the property M20.
     * @param m21 Value of the property M21.
     * @param m22 Value of the property M22.
     * @param m23 Value of the property M23.
     * @param m30 Value of the property M30.
     * @param m31 Value of the property M31.
     * @param m32 Value of the property M32.
     * @param m33 Value of the property M33.
     */
    public Matrix4x4f(float m00, float m01, float m02, float m03,
                      float m10, float m11, float m12, float m13,
                      float m20, float m21, float m22, float m23,
                      float m30, float m31, float m32, float m33)
    {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }

    /**
     * Copy constructor.
     */
    public Matrix4x4f(MatrixInpector other)
    {
        other.getInto(this);
    }

    /*
     * This method gets an identity matrix.
     *
     * return Identity matrix.
     */
    public static Matrix4x4f getIdentity()
    {
        return new Matrix4x4f(1, 0, 0, 0,
                              0, 1, 0, 0,
                              0, 0, 1, 0,
                              0, 0, 0, 1);
    }

//<editor-fold defaultstate="collapsed" desc="Transforms">
    public Vector4f Mul(Vector4 v)
    {
        if (v is Vector4f)
        {
            return Mul((Vector4f)v);
        }
        else if (v is BuffVector4f)
        {
            return Mul((BuffVector4f)v);
        }
        else
        {
            return Mul(new Vector4f(v));
        }
    }

    public Vector4f Mul(Vector4f v)
    {
        return new Vector4f(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
                            getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
                            getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
                            getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    public Vector4f Mul(BuffVector4f v)
    {
        return new Vector4f(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
                            getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
                            getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
                            getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    public Vector4f Premul(Vector4 v)
    {
        if (v is Vector4f)
        {
            return Premul((Vector4f)v);
        }
        else if (v is BuffVector4f)
        {
            return Premul((BuffVector4f)v);
        }
        else
        {
            return Premul(new Vector4f(v));
        }
    }

    public Vector4f Premul(Vector4f v)
    {
        return new Vector4f(v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
                            v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
                            v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
                            v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    public Vector4f Premul(BuffVector4f v)
    {
        return new Vector4f(v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
                            v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
                            v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
                            v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    public Vector3f Mul(Vector3 v)
    {
        if (v is Vector3f)
        {
            return Mul((Vector3f)v);
        }
        else if (v is BuffVector3f)
        {
            return Mul((BuffVector3f)v);
        }
        else
        {
            return Mul(new Vector3f(v));
        }
    }

    public Vector3f Mul(Vector3f v)
    {
        float x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        float y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        float z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        return new Vector3f(x, y, z);
    }

    public Vector3f Mul(BuffVector3f v)
    {
        float x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        float y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        float z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        return new Vector3f(x, y, z);
    }

    public Point3f Mul(Point3 p)
    {
        if (p is Point3f)
        {
            return Mul((Point3f)p);
        }
        else if (p is BuffPoint3f)
        {
            return Mul((BuffPoint3f)p);
        }
        else
        {
            return Mul(new Point3f(p));
        }
    }

    public Point3f Mul(Point3f p)
    {
        float x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        float y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        float z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        float w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        return new Point3f(x / w, y / w, z / w);
    }

    public Point3f Mul(BuffPoint3f p)
    {
        float x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        float y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        float z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        float w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        return new Point3f(x / w, y / w, z / w);
    }

    public Vector3f Premul(Vector3 v)
    {
        if (v is Vector3f)
        {
            return Premul((Vector3f)v);
        }
        else if (v is BuffVector3f)
        {
            return Premul((BuffVector3f)v);
        }
        else
        {
            return Premul(new Vector3f(v));
        }
    }

    public Vector3f Premul(Vector3f v)
    {
        float x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        float y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        float z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        return new Vector3f(x, y, z);
    }

    public Vector3f Premul(BuffVector3f v)
    {
        float x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        float y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        float z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        return new Vector3f(x, y, z);
    }

    public Point3f Premul(Point3 p)
    {
        if (p is Point3f)
        {
            return Premul((Point3f)p);
        }
        else if (p is BuffPoint3f)
        {
            return Premul((BuffPoint3f)p);
        }
        else
        {
            return Premul(new Point3f(p));
        }
    }

    public Point3f Premul(Point3f p)
    {
        float x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        float y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        float z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        float w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        return new Point3f(x / w, y / w, z / w);
    }

    public Point3f Premul(BuffPoint3f p)
    {
        float x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        float y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        float z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        float w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        return new Point3f(x / w, y / w, z / w);
    }

    public void MulAndSetInto(BuffVector4 v)
    {
        if (v is BuffVector4f)
        {
            this.MulAndSetInto((BuffVector4f)v);
        }
        else
        {
            BuffVector4f _v = new BuffVector4f(v);
            this.MulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void MulAndSetInto(BuffVector4f v)
    {
        v.set(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
              getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
              getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
              getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    public void PremulAndSetInto(BuffVector4 v)
    {
        if (v is BuffVector4f)
        {
            this.PremulAndSetInto((BuffVector4f)v);
        }
        else
        {
            BuffVector4f _v = new BuffVector4f(v);
            this.PremulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void PremulAndSetInto(BuffVector4f v)
    {
        v.set (v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
               v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
               v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
               v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    public void MulAndSetInto(BuffVector3 v)
    {
        if (v is BuffVector3f)
        {
            this.MulAndSetInto((BuffVector3f)v);
        }
        else
        {
            BuffVector3f _v = new BuffVector3f(v);
            this.MulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void MulAndSetInto(BuffVector3f v)
    {
        float x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        float y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        float z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        v.set(x, y, z);
    }

    public void MulAndSetInto(BuffPoint3 p)
    {
        if (p is BuffVector3f)
        {
            this.MulAndSetInto((BuffPoint3f)p);
        }
        else
        {
            BuffPoint3f _p = new BuffPoint3f(p);
            this.MulAndSetInto(_p);
            _p.getInto(p);
        }
    }

    public void MulAndSetInto(BuffPoint3f p)
    {
        float x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        float y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        float z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        float w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        p.set(x / w, y / w, z / w);
    }

    public void PremulAndSetInto(BuffVector3 v)
    {
        if (v is BuffVector3f)
        {
            this.PremulAndSetInto((BuffVector3f)v);
        }
        else
        {
            BuffVector3f _v = new BuffVector3f(v);
            this.PremulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void PremulAndSetInto(BuffVector3f v)
    {
        float x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        float y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        float z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        v.set(x, y, z);
    }

    public void PremulAndSetInto(BuffPoint3 p)
    {
        if (p is BuffVector3f)
        {
            this.PremulAndSetInto((BuffPoint3f)p);
        }
        else
        {
            BuffPoint3f _p = new BuffPoint3f(p);
            this.PremulAndSetInto(_p);
            _p.getInto(p);
        }
    }

    public void PremulAndSetInto(BuffPoint3f p)
    {
        float x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        float y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        float z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        float w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        p.set(x / w, y / w, z / w);
    }
//</editor-fold>

    @Override
    public final bool IsValid()
    {
        return !IsNaN() && !IsInfinity();
    }

    public final bool IsNaN()
    {
        return Float.IsNaN(getM00()) || Float.IsNaN(getM01()) || Float.IsNaN(getM02()) || Float.IsNaN(getM03()) ||
               Float.IsNaN(getM10()) || Float.IsNaN(getM11()) || Float.IsNaN(getM12()) || Float.IsNaN(getM13()) ||
               Float.IsNaN(getM20()) || Float.IsNaN(getM21()) || Float.IsNaN(getM22()) || Float.IsNaN(getM23()) ||
               Float.IsNaN(getM30()) || Float.IsNaN(getM31()) || Float.IsNaN(getM32()) || Float.IsNaN(getM33());
    }

    public final bool IsInfinity()
    {
        return Float.IsInfinite(getM00()) || Float.IsInfinite(getM01()) || Float.IsInfinite(getM02()) || Float.IsInfinite(getM03()) ||
               Float.IsInfinite(getM10()) || Float.IsInfinite(getM11()) || Float.IsInfinite(getM12()) || Float.IsInfinite(getM13()) ||
               Float.IsInfinite(getM20()) || Float.IsInfinite(getM21()) || Float.IsInfinite(getM22()) || Float.IsInfinite(getM23()) ||
               Float.IsInfinite(getM30()) || Float.IsInfinite(getM31()) || Float.IsInfinite(getM32()) || Float.IsInfinite(getM33());
    }

    public final bool IsZero(double epsilon = EPSILON)
    {
        return EpsilonEquals(0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0, epsilon);
    }

    public bool isIdentity(double epsilon = EPSILON)
    {
        return EpsilonEquals(1, 0, 0, 0,
                             0, 1, 0, 0,
                             0, 0, 1, 0,
                             0, 0, 0, 1, epsilon);
    }

    public bool IsInvertible(double epsilon)
    {
        return !DoubleUtils.EpsilonEquals(getDeterminant(), epsilon);
    }

    public double GetDeterminant()
    {
        return ((getM00() * getM11() - getM01() * getM10()) * (getM22() * getM33() - getM23() * getM32())
                - (getM00() * getM12() - getM02() * getM10()) * (getM21() * getM33() - getM23() * getM31())
                + (getM00() * getM13() - getM03() * getM10()) * (getM21() * getM32() - getM22() * getM31())
                + (getM01() * getM12() - getM02() * getM11()) * (getM20() * getM33() - getM23() * getM30())
                - (getM01() * getM13() - getM03() * getM11()) * (getM20() * getM32() - getM22() * getM30())
                + (getM02() * getM13() - getM03() * getM12()) * (getM20() * getM31() - getM21() * getM30()));
    }

    public Matrix4x4f Add(Matrix4x4 other)
    {
        Matrix4x4f _other = ToMatrix4x4f(other);

        return new Matrix4x4f(getM00() + _other.getM00(), getM01() + _other.getM01(), getM02() + _other.getM02(), getM03() + _other.getM03(),
                              getM10() + _other.getM10(), getM11() + _other.getM11(), getM12() + _other.getM12(), getM13() + _other.getM13(),
                              getM20() + _other.getM20(), getM21() + _other.getM21(), getM22() + _other.getM22(), getM23() + _other.getM23(),
                              getM30() + _other.getM30(), getM31() + _other.getM31(), getM32() + _other.getM32(), getM33() + _other.getM33());
    }

    public Matrix4x4f Add(Matrix4x4f other)
    {
        return new Matrix4x4f(getM00() + other.getM00(), getM01() + other.getM01(), getM02() + other.getM02(), getM03() + other.getM03(),
                              getM10() + other.getM10(), getM11() + other.getM11(), getM12() + other.getM12(), getM13() + other.getM13(),
                              getM20() + other.getM20(), getM21() + other.getM21(), getM22() + other.getM22(), getM23() + other.getM23(),
                              getM30() + other.getM30(), getM31() + other.getM31(), getM32() + other.getM32(), getM33() + other.getM33());
    }

    public Matrix4x4f Sub(Matrix4x4 other)
    {
        Matrix4x4f _other = ToMatrix4x4f(other);

        return new Matrix4x4f(getM00() - _other.getM00(), getM01() - _other.getM01(), getM02() - _other.getM02(), getM03() - _other.getM03(),
                              getM10() - _other.getM10(), getM11() - _other.getM11(), getM12() - _other.getM12(), getM13() - _other.getM13(),
                              getM20() - _other.getM20(), getM21() - _other.getM21(), getM22() - _other.getM22(), getM23() - _other.getM23(),
                              getM30() - _other.getM30(), getM31() - _other.getM31(), getM32() - _other.getM32(), getM33() - _other.getM33());
    }

    public Matrix4x4f Sub(Matrix4x4f other)
    {
        return new Matrix4x4f(getM00() - other.getM00(), getM01() - other.getM01(), getM02() - other.getM02(), getM03() - other.getM03(),
                              getM10() - other.getM10(), getM11() - other.getM11(), getM12() - other.getM12(), getM13() - other.getM13(),
                              getM20() - other.getM20(), getM21() - other.getM21(), getM22() - other.getM22(), getM23() - other.getM23(),
                              getM30() - other.getM30(), getM31() - other.getM31(), getM32() - other.getM32(), getM33() - other.getM33());
    }

    public Matrix4x4f Mul(double v)
    {
        return new Matrix4x4f((float)(getM00() * v), (float)(getM01() * v), (float)(getM02() * v), (float)(getM03() * v),
                              (float)(getM10() * v), (float)(getM11() * v), (float)(getM12() * v), (float)(getM13() * v),
                              (float)(getM20() * v), (float)(getM21() * v), (float)(getM22() * v), (float)(getM23() * v),
                              (float)(getM30() * v), (float)(getM31() * v), (float)(getM32() * v), (float)(getM33() * v));
    }

    public Matrix4x4f Div(double v)
    {
        return new Matrix4x4f((float)(getM00() / v), (float)(getM01() / v), (float)(getM02() / v), (float)(getM03() / v),
                              (float)(getM10() / v), (float)(getM11() / v), (float)(getM12() / v), (float)(getM13() / v),
                              (float)(getM20() / v), (float)(getM21() / v), (float)(getM22() / v), (float)(getM23() / v),
                              (float)(getM30() / v), (float)(getM31() / v), (float)(getM32() / v), (float)(getM33() / v));
    }

    public Matrix4x4f Mul(Matrix4x4 other)
    {
        Matrix4x4f _other = toMatrix4x4f(other);

        return new Matrix4x4f(getM00() * _other.getM00() + getM01() * _other.getM10() + getM02() * _other.getM20() + getM03() * _other.getM30(),
                              getM00() * _other.getM01() + getM01() * _other.getM11() + getM02() * _other.getM21() + getM03() * _other.getM31(),
                              getM00() * _other.getM02() + getM01() * _other.getM12() + getM02() * _other.getM22() + getM03() * _other.getM32(),
                              getM00() * _other.getM03() + getM01() * _other.getM13() + getM02() * _other.getM23() + getM03() * _other.getM33(),
                              getM10() * _other.getM00() + getM11() * _other.getM10() + getM12() * _other.getM20() + getM13() * _other.getM30(),
                              getM10() * _other.getM01() + getM11() * _other.getM11() + getM12() * _other.getM21() + getM13() * _other.getM31(),
                              getM10() * _other.getM02() + getM11() * _other.getM12() + getM12() * _other.getM22() + getM13() * _other.getM32(),
                              getM10() * _other.getM03() + getM11() * _other.getM13() + getM12() * _other.getM23() + getM13() * _other.getM33(),
                              getM20() * _other.getM00() + getM21() * _other.getM10() + getM22() * _other.getM20() + getM23() * _other.getM30(),
                              getM20() * _other.getM01() + getM21() * _other.getM11() + getM22() * _other.getM21() + getM23() * _other.getM31(),
                              getM20() * _other.getM02() + getM21() * _other.getM12() + getM22() * _other.getM22() + getM23() * _other.getM32(),
                              getM20() * _other.getM03() + getM21() * _other.getM13() + getM22() * _other.getM23() + getM23() * _other.getM33(),
                              getM30() * _other.getM00() + getM31() * _other.getM10() + getM32() * _other.getM20() + getM33() * _other.getM30(),
                              getM30() * _other.getM01() + getM31() * _other.getM11() + getM32() * _other.getM21() + getM33() * _other.getM31(),
                              getM30() * _other.getM02() + getM31() * _other.getM12() + getM32() * _other.getM22() + getM33() * _other.getM32(),
                              getM30() * _other.getM03() + getM31() * _other.getM13() + getM32() * _other.getM23() + getM33() * _other.getM33());
    }

    public Matrix4x4f Mul(Matrix4x4f other)
    {
        return new Matrix4x4f(getM00() * other.getM00() + getM01() * other.getM10() + getM02() * other.getM20() + getM03() * other.getM30(),
                              getM00() * other.getM01() + getM01() * other.getM11() + getM02() * other.getM21() + getM03() * other.getM31(),
                              getM00() * other.getM02() + getM01() * other.getM12() + getM02() * other.getM22() + getM03() * other.getM32(),
                              getM00() * other.getM03() + getM01() * other.getM13() + getM02() * other.getM23() + getM03() * other.getM33(),
                              getM10() * other.getM00() + getM11() * other.getM10() + getM12() * other.getM20() + getM13() * other.getM30(),
                              getM10() * other.getM01() + getM11() * other.getM11() + getM12() * other.getM21() + getM13() * other.getM31(),
                              getM10() * other.getM02() + getM11() * other.getM12() + getM12() * other.getM22() + getM13() * other.getM32(),
                              getM10() * other.getM03() + getM11() * other.getM13() + getM12() * other.getM23() + getM13() * other.getM33(),
                              getM20() * other.getM00() + getM21() * other.getM10() + getM22() * other.getM20() + getM23() * other.getM30(),
                              getM20() * other.getM01() + getM21() * other.getM11() + getM22() * other.getM21() + getM23() * other.getM31(),
                              getM20() * other.getM02() + getM21() * other.getM12() + getM22() * other.getM22() + getM23() * other.getM32(),
                              getM20() * other.getM03() + getM21() * other.getM13() + getM22() * other.getM23() + getM23() * other.getM33(),
                              getM30() * other.getM00() + getM31() * other.getM10() + getM32() * other.getM20() + getM33() * other.getM30(),
                              getM30() * other.getM01() + getM31() * other.getM11() + getM32() * other.getM21() + getM33() * other.getM31(),
                              getM30() * other.getM02() + getM31() * other.getM12() + getM32() * other.getM22() + getM33() * other.getM32(),
                              getM30() * other.getM03() + getM31() * other.getM13() + getM32() * other.getM23() + getM33() * other.getM33());
    }

    public Matrix4x4f Neg()
    {
        return new Matrix4x4f(- getM00(), - getM01(), - getM02(), - getM03(),
                              - getM10(), - getM11(), - getM12(), - getM13(),
                              - getM20(), - getM21(), - getM22(), - getM23(),
                              - getM30(), - getM31(), - getM32(), - getM33());
    }

    public Matrix4x4f Abs()
    {
        return new Matrix4x4f(Math.abs(getM00()), Math.abs(getM01()), Math.abs(getM02()), Math.abs(getM03()),
                              Math.abs(getM10()), Math.abs(getM11()), Math.abs(getM12()), Math.abs(getM13()),
                              Math.abs(getM20()), Math.abs(getM21()), Math.abs(getM22()), Math.abs(getM23()),
                              Math.abs(getM30()), Math.abs(getM31()), Math.abs(getM32()), Math.abs(getM33()));
    }

    public Matrix4x4f Transpose()
    {
        return new Matrix4x4f(getM00(), getM10(), getM20(), getM30(),
                              getM01(), getM11(), getM21(), getM31(),
                              getM02(), getM12(), getM22(), getM32(),
                              getM03(), getM13(), getM23(), getM33());
    }

    @Override
    public Matrix4x4f Inverse() throws SingularMatrixException
    {
        double s = getDeterminant();
        if (DoubleUtils.epsilonZero(s, EPSILON))
        {
            throw new SingularMatrixException();
        }

        s = 1 / s;

        return new Matrix4x4f(
            (float)((getM11() * (getM22() * getM33() - getM23() * getM32())
                     + getM12() * (getM23() * getM31() - getM21() * getM33())
                     + getM13() * (getM21() * getM32() - getM22() * getM31())) * s),
            (float)((getM21() * (getM02() * getM33() - getM03() * getM32())
                     + getM22() * (getM03() * getM31() - getM01() * getM33())
                     + getM23() * (getM01() * getM32() - getM02() * getM31())) * s),
            (float)((getM31() * (getM02() * getM13() - getM03() * getM12())
                     + getM32() * (getM03() * getM11() - getM01() * getM13())
                     + getM33() * (getM01() * getM12() - getM02() * getM11())) * s),
            (float)((getM01() * (getM13() * getM22() - getM12() * getM23())
                     + getM02() * (getM11() * getM23() - getM13() * getM21())
                     + getM03() * (getM12() * getM21() - getM11() * getM22())) * s),
            (float)((getM12() * (getM20() * getM33() - getM23() * getM30())
                     + getM13() * (getM22() * getM30() - getM20() * getM32())
                     + getM10() * (getM23() * getM32() - getM22() * getM33())) * s),
            (float)((getM22() * (getM00() * getM33() - getM03() * getM30())
                     + getM23() * (getM02() * getM30() - getM00() * getM32())
                     + getM20() * (getM03() * getM32() - getM02() * getM33())) * s),
            (float)((getM32() * (getM00() * getM13() - getM03() * getM10())
                     + getM33() * (getM02() * getM10() - getM00() * getM12())
                     + getM30() * (getM03() * getM12() - getM02() * getM13())) * s),
            (float)((getM02() * (getM13() * getM20() - getM10() * getM23())
                     + getM03() * (getM10() * getM22() - getM12() * getM20())
                     + getM00() * (getM12() * getM23() - getM13() * getM22())) * s),
            (float)((getM13() * (getM20() * getM31() - getM21() * getM30())
                     + getM10() * (getM21() * getM33() - getM23() * getM31())
                     + getM11() * (getM23() * getM30() - getM20() * getM33())) * s),
            (float)((getM23() * (getM00() * getM31() - getM01() * getM30())
                     + getM20() * (getM01() * getM33() - getM03() * getM31())
                     + getM21() * (getM03() * getM30() - getM00() * getM33())) * s),
            (float)((getM33() * (getM00() * getM11() - getM01() * getM10())
                     + getM30() * (getM01() * getM13() - getM03() * getM11())
                     + getM31() * (getM03() * getM10() - getM00() * getM13())) * s),
            (float)((getM03() * (getM11() * getM20() - getM10() * getM21())
                     + getM00() * (getM13() * getM21() - getM11() * getM23())
                     + getM01() * (getM10() * getM23() - getM13() * getM20())) * s),
            (float)((getM10() * (getM22() * getM31() - getM21() * getM32())
                     + getM11() * (getM20() * getM32() - getM22() * getM30())
                     + getM12() * (getM21() * getM30() - getM20() * getM31())) * s),
            (float)((getM20() * (getM02() * getM31() - getM01() * getM32())
                     + getM21() * (getM00() * getM32() - getM02() * getM30())
                     + getM22() * (getM01() * getM30() - getM00() * getM31())) * s),
            (float)((getM30() * (getM02() * getM11() - getM01() * getM12())
                     + getM31() * (getM00() * getM12() - getM02() * getM10())
                     + getM32() * (getM01() * getM10() - getM00() * getM11())) * s),
            (float)((getM00() * (getM11() * getM22() - getM12() * getM21())
                     + getM01() * (getM12() * getM20() - getM10() * getM22())
                     + getM02() * (getM10() * getM21() - getM11() * getM20())) * s));
    }

    @Override
    public Matrix4x4f SetZero()
    {
        Set(0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0);
        return this;
    }

    @Override
    public Matrix4x4f SetIdentity()
    {
        Set(1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1);
        return this;
    }

    @Override
    public Matrix4x4f AddAndSet(Matrix4x4 other)
    {
        Matrix4x4f _other = toMatrix4x4f(other);

        Set(getM00() + _other.getM00(), getM01() + _other.getM01(), getM02() + _other.getM02(), getM03() + _other.getM03(),
            getM10() + _other.getM10(), getM11() + _other.getM11(), getM12() + _other.getM12(), getM13() + _other.getM13(),
            getM20() + _other.getM20(), getM21() + _other.getM21(), getM22() + _other.getM22(), getM23() + _other.getM23(),
            getM30() + _other.getM30(), getM31() + _other.getM31(), getM32() + _other.getM32(), getM33() + _other.getM33());
        return this;
    }

    public Matrix4x4f AddAndSet(Matrix4x4f other)
    {
        Set(getM00() + other.getM00(), getM01() + other.getM01(), getM02() + other.getM02(), getM03() + other.getM03(),
            getM10() + other.getM10(), getM11() + other.getM11(), getM12() + other.getM12(), getM13() + other.getM13(),
            getM20() + other.getM20(), getM21() + other.getM21(), getM22() + other.getM22(), getM23() + other.getM23(),
            getM30() + other.getM30(), getM31() + other.getM31(), getM32() + other.getM32(), getM33() + other.getM33());
        return this;
    }

    @Override
    public Matrix4x4f SubAndSet(Matrix4x4 other)
    {
        Matrix4x4f _other = toMatrix4x4f(other);

        Set(getM00() - _other.getM00(), getM01() - _other.getM01(), getM02() - _other.getM02(), getM03() - _other.getM03(),
            getM10() - _other.getM10(), getM11() - _other.getM11(), getM12() - _other.getM12(), getM13() - _other.getM13(),
            getM20() - _other.getM20(), getM21() - _other.getM21(), getM22() - _other.getM22(), getM23() - _other.getM23(),
            getM30() - _other.getM30(), getM31() - _other.getM31(), getM32() - _other.getM32(), getM33() - _other.getM33());
        return this;
    }

    public Matrix4x4f SubAndSet(Matrix4x4f other)
    {
        Set(getM00() - other.getM00(), getM01() - other.getM01(), getM02() - other.getM02(), getM03() - other.getM03(),
            getM10() - other.getM10(), getM11() - other.getM11(), getM12() - other.getM12(), getM13() - other.getM13(),
            getM20() - other.getM20(), getM21() - other.getM21(), getM22() - other.getM22(), getM23() - other.getM23(),
            getM30() - other.getM30(), getM31() - other.getM31(), getM32() - other.getM32(), getM33() - other.getM33());
        return this;
    }

    @Override
    public Matrix4x4f MulAndSet(double v)
    {
        Set((float)(getM00() * v), (float)(getM01() * v), (float)(getM02() * v), (float)(getM03() * v),
            (float)(getM10() * v), (float)(getM11() * v), (float)(getM12() * v), (float)(getM13() * v),
            (float)(getM20() * v), (float)(getM21() * v), (float)(getM22() * v), (float)(getM23() * v),
            (float)(getM30() * v), (float)(getM31() * v), (float)(getM32() * v), (float)(getM33() * v));
        return this;
    }

    @Override
    public Matrix4x4f DivAndSet(double v)
    {
        Set((float)(getM00() / v), (float)(getM01() / v), (float)(getM02() / v), (float)(getM03() / v),
            (float)(getM10() / v), (float)(getM11() / v), (float)(getM12() / v), (float)(getM13() / v),
            (float)(getM20() / v), (float)(getM21() / v), (float)(getM22() / v), (float)(getM23() / v),
            (float)(getM30() / v), (float)(getM31() / v), (float)(getM32() / v), (float)(getM33() / v));
        return this;
    }

    @Override
    public Matrix4x4f MulAndSet(Matrix4x4 other)
    {
        Matrix4x4f _other = toMatrix4x4f(other);

        Set(getM00() * _other.getM00() + getM01() * _other.getM10() + getM02() * _other.getM20() + getM03() * _other.getM30(),
            getM00() * _other.getM01() + getM01() * _other.getM11() + getM02() * _other.getM21() + getM03() * _other.getM31(),
            getM00() * _other.getM02() + getM01() * _other.getM12() + getM02() * _other.getM22() + getM03() * _other.getM32(),
            getM00() * _other.getM03() + getM01() * _other.getM13() + getM02() * _other.getM23() + getM03() * _other.getM33(),
            getM10() * _other.getM00() + getM11() * _other.getM10() + getM12() * _other.getM20() + getM13() * _other.getM30(),
            getM10() * _other.getM01() + getM11() * _other.getM11() + getM12() * _other.getM21() + getM13() * _other.getM31(),
            getM10() * _other.getM02() + getM11() * _other.getM12() + getM12() * _other.getM22() + getM13() * _other.getM32(),
            getM10() * _other.getM03() + getM11() * _other.getM13() + getM12() * _other.getM23() + getM13() * _other.getM33(),
            getM20() * _other.getM00() + getM21() * _other.getM10() + getM22() * _other.getM20() + getM23() * _other.getM30(),
            getM20() * _other.getM01() + getM21() * _other.getM11() + getM22() * _other.getM21() + getM23() * _other.getM31(),
            getM20() * _other.getM02() + getM21() * _other.getM12() + getM22() * _other.getM22() + getM23() * _other.getM32(),
            getM20() * _other.getM03() + getM21() * _other.getM13() + getM22() * _other.getM23() + getM23() * _other.getM33(),
            getM30() * _other.getM00() + getM31() * _other.getM10() + getM32() * _other.getM20() + getM33() * _other.getM30(),
            getM30() * _other.getM01() + getM31() * _other.getM11() + getM32() * _other.getM21() + getM33() * _other.getM31(),
            getM30() * _other.getM02() + getM31() * _other.getM12() + getM32() * _other.getM22() + getM33() * _other.getM32(),
            getM30() * _other.getM03() + getM31() * _other.getM13() + getM32() * _other.getM23() + getM33() * _other.getM33());
        return this;
    }

    public Matrix4x4f MulAndSet(Matrix4x4f other)
    {
        Set(getM00() * other.getM00() + getM01() * other.getM10() + getM02() * other.getM20() + getM03() * other.getM30(),
            getM00() * other.getM01() + getM01() * other.getM11() + getM02() * other.getM21() + getM03() * other.getM31(),
            getM00() * other.getM02() + getM01() * other.getM12() + getM02() * other.getM22() + getM03() * other.getM32(),
            getM00() * other.getM03() + getM01() * other.getM13() + getM02() * other.getM23() + getM03() * other.getM33(),
            getM10() * other.getM00() + getM11() * other.getM10() + getM12() * other.getM20() + getM13() * other.getM30(),
            getM10() * other.getM01() + getM11() * other.getM11() + getM12() * other.getM21() + getM13() * other.getM31(),
            getM10() * other.getM02() + getM11() * other.getM12() + getM12() * other.getM22() + getM13() * other.getM32(),
            getM10() * other.getM03() + getM11() * other.getM13() + getM12() * other.getM23() + getM13() * other.getM33(),
            getM20() * other.getM00() + getM21() * other.getM10() + getM22() * other.getM20() + getM23() * other.getM30(),
            getM20() * other.getM01() + getM21() * other.getM11() + getM22() * other.getM21() + getM23() * other.getM31(),
            getM20() * other.getM02() + getM21() * other.getM12() + getM22() * other.getM22() + getM23() * other.getM32(),
            getM20() * other.getM03() + getM21() * other.getM13() + getM22() * other.getM23() + getM23() * other.getM33(),
            getM30() * other.getM00() + getM31() * other.getM10() + getM32() * other.getM20() + getM33() * other.getM30(),
            getM30() * other.getM01() + getM31() * other.getM11() + getM32() * other.getM21() + getM33() * other.getM31(),
            getM30() * other.getM02() + getM31() * other.getM12() + getM32() * other.getM22() + getM33() * other.getM32(),
            getM30() * other.getM03() + getM31() * other.getM13() + getM32() * other.getM23() + getM33() * other.getM33());
        return this;
    }

    @Override
    public Matrix4x4f NegAndSet()
    {
        Set(- getM00(), - getM01(), - getM02(), - getM03(),
            - getM10(), - getM11(), - getM12(), - getM13(),
            - getM20(), - getM21(), - getM22(), - getM23(),
            - getM30(), - getM31(), - getM32(), - getM33());
        return this;
    }

    @Override
    public Matrix4x4f AbsAndSet()
    {
        Set(Math.abs(getM00()), Math.abs(getM01()), Math.abs(getM02()), Math.abs(getM03()),
            Math.abs(getM10()), Math.abs(getM11()), Math.abs(getM12()), Math.abs(getM13()),
            Math.abs(getM20()), Math.abs(getM21()), Math.abs(getM22()), Math.abs(getM23()),
            Math.abs(getM30()), Math.abs(getM31()), Math.abs(getM32()), Math.abs(getM33()));
        return this;
    }

    @Override
    public Matrix4x4f TransposeAndSet()
    {
        Set(getM00(), getM10(), getM20(), getM30(),
            getM01(), getM11(), getM21(), getM31(),
            getM02(), getM12(), getM22(), getM32(),
            getM03(), getM13(), getM23(), getM33());
        return this;
    }

    @Override
    public Matrix4x4f InverseAndSet() throws SingularMatrixException
    {
        double s = getDeterminant();
        if (DoubleUtils.epsilonZero(s, EPSILON))
        {
            throw new SingularMatrixException();
        }

        s = 1 / s;

        set(
            (float)((getM11() * (getM22() * getM33() - getM23() * getM32())
                     + getM12() * (getM23() * getM31() - getM21() * getM33())
                     + getM13() * (getM21() * getM32() - getM22() * getM31())) * s),
            (float)((getM21() * (getM02() * getM33() - getM03() * getM32())
                     + getM22() * (getM03() * getM31() - getM01() * getM33())
                     + getM23() * (getM01() * getM32() - getM02() * getM31())) * s),
            (float)((getM31() * (getM02() * getM13() - getM03() * getM12())
                     + getM32() * (getM03() * getM11() - getM01() * getM13())
                     + getM33() * (getM01() * getM12() - getM02() * getM11())) * s),
            (float)((getM01() * (getM13() * getM22() - getM12() * getM23())
                     + getM02() * (getM11() * getM23() - getM13() * getM21())
                     + getM03() * (getM12() * getM21() - getM11() * getM22())) * s),
            (float)((getM12() * (getM20() * getM33() - getM23() * getM30())
                     + getM13() * (getM22() * getM30() - getM20() * getM32())
                     + getM10() * (getM23() * getM32() - getM22() * getM33())) * s),
            (float)((getM22() * (getM00() * getM33() - getM03() * getM30())
                     + getM23() * (getM02() * getM30() - getM00() * getM32())
                     + getM20() * (getM03() * getM32() - getM02() * getM33())) * s),
            (float)((getM32() * (getM00() * getM13() - getM03() * getM10())
                     + getM33() * (getM02() * getM10() - getM00() * getM12())
                     + getM30() * (getM03() * getM12() - getM02() * getM13())) * s),
            (float)((getM02() * (getM13() * getM20() - getM10() * getM23())
                     + getM03() * (getM10() * getM22() - getM12() * getM20())
                     + getM00() * (getM12() * getM23() - getM13() * getM22())) * s),
            (float)((getM13() * (getM20() * getM31() - getM21() * getM30())
                     + getM10() * (getM21() * getM33() - getM23() * getM31())
                     + getM11() * (getM23() * getM30() - getM20() * getM33())) * s),
            (float)((getM23() * (getM00() * getM31() - getM01() * getM30())
                     + getM20() * (getM01() * getM33() - getM03() * getM31())
                     + getM21() * (getM03() * getM30() - getM00() * getM33())) * s),
            (float)((getM33() * (getM00() * getM11() - getM01() * getM10())
                     + getM30() * (getM01() * getM13() - getM03() * getM11())
                     + getM31() * (getM03() * getM10() - getM00() * getM13())) * s),
            (float)((getM03() * (getM11() * getM20() - getM10() * getM21())
                     + getM00() * (getM13() * getM21() - getM11() * getM23())
                     + getM01() * (getM10() * getM23() - getM13() * getM20())) * s),
            (float)((getM10() * (getM22() * getM31() - getM21() * getM32())
                     + getM11() * (getM20() * getM32() - getM22() * getM30())
                     + getM12() * (getM21() * getM30() - getM20() * getM31())) * s),
            (float)((getM20() * (getM02() * getM31() - getM01() * getM32())
                     + getM21() * (getM00() * getM32() - getM02() * getM30())
                     + getM22() * (getM01() * getM30() - getM00() * getM31())) * s),
            (float)((getM30() * (getM02() * getM11() - getM01() * getM12())
                     + getM31() * (getM00() * getM12() - getM02() * getM10())
                     + getM32() * (getM01() * getM10() - getM00() * getM11())) * s),
            (float)((getM00() * (getM11() * getM22() - getM12() * getM21())
                     + getM01() * (getM12() * getM20() - getM10() * getM22())
                     + getM02() * (getM10() * getM21() - getM11() * getM20())) * s));
        return this;
    }

//<editor-fold defaultstate="collapsed" desc="accessors">
    public bool IsSquared()
    {
        return true;
    }

    public float Get(int r, int c)
    {
        switch(r)
        {
        case 0:
            switch(c)
            {
            case 0:
                return m00;
            case 1:
                return m01;
            case 2:
                return m02;
            case 3:
                return m03;
            }
        case 1:
            switch(c)
            {
            case 0:
                return m10;
            case 1:
                return m11;
            case 2:
                return m12;
            case 3:
                return m13;
            }
        case 2:
            switch(c)
            {
            case 0:
                return m20;
            case 1:
                return m21;
            case 2:
                return m22;
            case 3:
                return m23;
            }
        case 3:
            switch(c)
            {
            case 0:
                return m30;
            case 1:
                return m31;
            case 2:
                return m32;
            case 3:
                return m33;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    public float GetM00()
    {
        return m00;
    }

    public float GetM01()
    {
        return m01;
    }

    public float GetM02()
    {
        return m02;
    }

    public float GetM03()
    {
        return m03;
    }

    public float GetM10()
    {
        return m10;
    }

    public float GetM11()
    {
        return m11;
    }

    public float GetM12()
    {
        return m12;
    }

    public float GetM13()
    {
        return m13;
    }

    public float GetM20()
    {
        return m20;
    }

    public float GetM21()
    {
        return m21;
    }

    public float GetM22()
    {
        return m22;
    }

    public float GetM23()
    {
        return m23;
    }

    public float GetM30()
    {
        return m30;
    }

    public float GetM31()
    {
        return m31;
    }

    public float GetM32()
    {
        return m32;
    }

    public float GetM33()
    {
        return m33;
    }

    public final void Set(int r, int c, float value)
    {
        switch(r)
        {
        case 0:
            switch(c)
            {
            case 0:
                m00 = value;
                return;
            case 1:
                m01 = value;
                return;
            case 2:
                m02 = value;
                return;
            case 3:
                m03 = value;
                return;
            }
        case 1:
            switch(c)
            {
            case 0:
                m10 = value;
                return;
            case 1:
                m11 = value;
                return;
            case 2:
                m12 = value;
                return;
            case 3:
                m13 = value;
                return;
            }
        case 2:
            switch(c)
            {
            case 0:
                m20 = value;
                return;
            case 1:
                m21 = value;
                return;
            case 2:
                m22 = value;
                return;
            case 3:
                m23 = value;
                return;
            }
        case 3:
            switch(c)
            {
            case 0:
                m30 = value;
                return;
            case 1:
                m31 = value;
                return;
            case 2:
                m32 = value;
                return;
            case 3:
                m33 = value;
                return;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    public void SetM00(float value)
    {
        m00 = value;
    }

    public void SetM01(float value)
    {
        m01 = value;
    }

    public void SetM02(float value)
    {
        m02 = value;
    }

    public void SetM03(float value)
    {
        m03 = value;
    }

    public void SetM10(float value)
    {
        m10 = value;
    }

    public void SetM11(float value)
    {
        m11 = value;
    }

    public void SetM12(float value)
    {
        m12 = value;
    }

    public void SetM13(float value)
    {
        m13 = value;
    }

    public void SetM20(float value)
    {
        m20 = value;
    }

    public void SetM21(float value)
    {
        m21 = value;
    }

    public void SetM22(float value)
    {
        m22 = value;
    }

    public void SetM23(float value)
    {
        m23 = value;
    }

    public void SetM30(float value)
    {
        m30 = value;
    }

    public void SetM31(float value)
    {
        m31 = value;
    }

    public void SetM32(float value)
    {
        m32 = value;
    }

    public void SetM33(float value)
    {
        m33 = value;
    }

    public void Set(float m00, float m01, float m02, float m03,
                    float m10, float m11, float m12, float m13,
                    float m20, float m21, float m22, float m23,
                    float m30, float m31, float m32, float m33)
    {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="MatrixInpector">
    @Override
    public final int sizeRows()
    {
        return 4;
    }

    @Override
    public final int sizeCols()
    {
        return 4;
    }

    @Override
    public void getInto(MatrixSet matrixSet)
    {
        matrixSet.setFloat( 0, 0, (float)m00 );
        matrixSet.setFloat( 0, 1, (float)m01 );
        matrixSet.setFloat( 0, 2, (float)m02 );
        matrixSet.setFloat( 0, 3, (float)m03 );
        matrixSet.setFloat( 1, 0, (float)m10 );
        matrixSet.setFloat( 1, 1, (float)m11 );
        matrixSet.setFloat( 1, 2, (float)m12 );
        matrixSet.setFloat( 1, 3, (float)m13 );
        matrixSet.setFloat( 2, 0, (float)m20 );
        matrixSet.setFloat( 2, 1, (float)m21 );
        matrixSet.setFloat( 2, 2, (float)m22 );
        matrixSet.setFloat( 2, 3, (float)m23 );
        matrixSet.setFloat( 3, 0, (float)m30 );
        matrixSet.setFloat( 3, 1, (float)m31 );
        matrixSet.setFloat( 3, 2, (float)m32 );
        matrixSet.setFloat( 3, 3, (float)m33 );
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="MatrixSet">
    @Override
    public void setFloat(int r, int c, float value)
    {
        set(r, c, (float)value);
    }

    @Override
    public void setDouble(int r, int c, double value)
    {
        set(r, c, (float)value);
    }

    @Override
    public <T> void set(Class<T> type, int r, int c, T value)
    {
        if (Number.class.isAssignableFrom(type))
        {
            set(r, c, ((Number)value).floatValue());
            return;
        }
        throw new UnsupportedOperationException();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public String toString()
    {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
                             getM00(),getM01(),getM02(),getM03(),
                             getM10(),getM11(),getM12(),getM13(),
                             getM20(),getM21(),getM22(),getM23(),
                             getM30(),getM31(),getM32(),getM33());
    }

    public boolean equals(Matrix4x4f other)
    {
        if (other == this)
        {
            return true;
        }
        if (other == null)
        {
            return false;
        }

        return this.equals(other.getM00(), other.getM01(), other.getM02(), other.getM03(),
                           other.getM10(), other.getM11(), other.getM12(), other.getM13(),
                           other.getM20(), other.getM21(), other.getM22(), other.getM23(),
                           other.getM30(), other.getM31(), other.getM32(), other.getM33());
    }

    @Override
    public boolean equals(Object other)
    {
        return ((other instanceof Matrix4x4f) && this.equals((Matrix4x4f) other));
    }

    @Override
    public int hashCode()
    {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
        hash = prime * hash + Float.hashCode(getM00());
        hash = prime * hash + Float.hashCode(getM01());
        hash = prime * hash + Float.hashCode(getM02());
        hash = prime * hash + Float.hashCode(getM03());
        hash = prime * hash + Float.hashCode(getM10());
        hash = prime * hash + Float.hashCode(getM11());
        hash = prime * hash + Float.hashCode(getM12());
        hash = prime * hash + Float.hashCode(getM13());
        hash = prime * hash + Float.hashCode(getM20());
        hash = prime * hash + Float.hashCode(getM21());
        hash = prime * hash + Float.hashCode(getM22());
        hash = prime * hash + Float.hashCode(getM23());
        hash = prime * hash + Float.hashCode(getM30());
        hash = prime * hash + Float.hashCode(getM31());
        hash = prime * hash + Float.hashCode(getM32());
        hash = prime * hash + Float.hashCode(getM33());
        return hash;
    }

    @Override
    public Matrix4x4f clone() throws CloneNotSupportedException
    {
        return (Matrix4x4f)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="EpsilonEquatable<Matrix4x4f>">
    @Override
    public boolean epsilonEquals(Matrix4x4f other, double epsilon)
    {
        if (other == this)
        {
            return true;
        }
        if (other == null)
        {
            return false;
        }
        return epsilonEquals(getM00(), getM01(), getM02(), getM03(),
                             getM10(), getM11(), getM12(), getM13(),
                             getM20(), getM21(), getM22(), getM23(),
                             getM30(), getM31(), getM32(), getM33(), epsilon);
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private Matrix4x4f toMatrix4x4f(Matrix4x4 other)
    {
        if (other instanceof Matrix4x4f)
        {
            return (Matrix4x4f)other;
        }
        return new Matrix4x4f(other);
    }

    private boolean epsilonEquals(float m00, float m01, float m02, float m03,
                                  float m10, float m11, float m12, float m13,
                                  float m20, float m21, float m22, float m23,
                                  float m30, float m31, float m32, float m33)
    {
        return epsilonEquals(m00, m01, m02, m03,
                             m10, m11, m12, m13,
                             m20, m21, m22, m23,
                             m30, m31, m32, m33, EPSILON);
    }

    private boolean epsilonEquals(float m00, float m01, float m02, float m03,
                                  float m10, float m11, float m12, float m13,
                                  float m20, float m21, float m22, float m23,
                                  float m30, float m31, float m32, float m33, double epsilon)
    {
        return DoubleUtils.epsilonEquals(getM00(), m00, epsilon) && DoubleUtils.epsilonEquals(getM01(), m01, epsilon) && DoubleUtils.epsilonEquals(getM02(), m02, epsilon) && DoubleUtils.epsilonEquals(getM03(), m03, epsilon)
               && DoubleUtils.epsilonEquals(getM10(), m10, epsilon) && DoubleUtils.epsilonEquals(getM11(), m11, epsilon) && DoubleUtils.epsilonEquals(getM12(), m12, epsilon) && DoubleUtils.epsilonEquals(getM13(), m13, epsilon)
               && DoubleUtils.epsilonEquals(getM20(), m20, epsilon) && DoubleUtils.epsilonEquals(getM21(), m21, epsilon) && DoubleUtils.epsilonEquals(getM22(), m22, epsilon) && DoubleUtils.epsilonEquals(getM23(), m23, epsilon)
               && DoubleUtils.epsilonEquals(getM30(), m30, epsilon) && DoubleUtils.epsilonEquals(getM31(), m31, epsilon) && DoubleUtils.epsilonEquals(getM32(), m32, epsilon) && DoubleUtils.epsilonEquals(getM33(), m33, epsilon);
    }

    private boolean equals(float m00, float m01, float m02, float m03,
                           float m10, float m11, float m12, float m13,
                           float m20, float m21, float m22, float m23,
                           float m30, float m31, float m32, float m33)
    {
        return getM00() == m00 && getM01() == m01 && getM02() == m02 && getM03() == m03
               && getM10() == m10 && getM11() == m11 && getM12() == m12 && getM13() == m13
               && getM20() == m20 && getM21() == m21 && getM22() == m22 && getM23() == m23
               && getM30() == m30 && getM31() == m31 && getM32() == m32 && getM33() == m33;
    }

    private static String getFormat()
    {
        if (format == null)
        {
            String f = ".3f"; // Floating point number with 2 decimal places

            StringBuilder buff = new StringBuilder();
            String b = "%1$s"; // Begin      [
            String s = "%2$s"; // Separation ,
            String e = "%3$s"; // End        ]
            int k = 4;
            buff.append(b);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(e);
            format = buff.toString();
        }
        return format;
    }
//</editor-fold>
}
}
