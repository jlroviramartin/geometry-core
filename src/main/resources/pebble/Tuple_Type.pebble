{#
 # This template renders a tupe.
 #}
{%  import "pebble/Tuple.Core.pebble" %}
/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package {{ desc._package }};

/**
 * A {@code {{ desc.tupleTypeName }}} is a {{ desc.dim }} dimensional collection of values of type {{ desc.type }}.
 */
public interface {{ desc.tupleTypeName }} {

    /**
     * This method gets the component {@code index}.
     *
     * @param index Index of the component.
     * @return Value of the component.
     */
    {{ desc.type }} getAt(int index);

    /**
     * This method sets the component {@code index}.
     *
     * @param index Index of the component.
     * @param value Value of the component.
     */
    void setAt(int index, {{ desc.type }} value);
{%      for property in desc.properties %}

    /**
     * This method gets the {{property.upperName}} component.
     *
     * @return Value of the {{property.upperName}} component.
     */
    {{property.type}} get{{property.upperName}}();

    /**
     * This method sets the {{property.upperName}} component.
     *
     * @param value Value of the {{property.upperName}} component.
     */
    void set{{property.upperName}}({{property.type}} value);
{%      endfor %}

    /**
     * This method sets all the components.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the {{ property.upperName }} component.
{%      endfor %}
     */
    void set({{ TypeNameCommaSeparated( desc ) }});
}

