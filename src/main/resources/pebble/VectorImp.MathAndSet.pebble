{%  import "pebble/Tuple.Core.pebble" %}
{%  macro MathAndSet( desc ) %}
//<editor-fold defaultstate="collapsed" desc="{{ desc.vectorName }}">
    @Override
    public {{ desc.vectorImpName }} setZero() {
{% dynmacro MathAndSet_setZero( desc, property ) %}
0
{%-     enddynmacro %}
        set({{ Properties( desc, ", ", MathAndSet_setZero ) | indent(4) }});
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} setUnit() {
        double len = getLength();
        if (DoubleUtils.epsilonZero(len)) {
            setZero();
        } else {
            divAndSet(len);
        }
        return this;
    }
{%      if desc.dim == 2 %}

    @Override
    public {{ desc.vectorImpName }} setPerpLeft() {
        set(-getY(), getX());
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} setPerpRight() {
        set(getY(), -getX());
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} setRotate(double angle) {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        set(({{ desc.type }})(getX() * c - getY() * s),
                ({{ desc.type }})(getX() * s + getY() * c));
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} setRotateAndScale(double angle, double len) {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        set(({{ desc.type }})(len*(getX() * c - getY() * s)),
                ({{ desc.type }})(len*(getX() * s + getY() * c)));
        return this;
    }
{%      endif %}

    @Override
    public {{ desc.vectorImpName }} addAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "+", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.vectorImpName }} addAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "+", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} subAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "-", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.vectorImpName }} subAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "-", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} simpleMulAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "*", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.vectorImpName }} simpleMulAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "*", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} simpleDivAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "/", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.vectorImpName }} simpleDivAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "/", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} mulAndSet(double v) {
        set{{ BinaryOperatorScalar(desc, "*", "", "v") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} divAndSet(double v) {
        set{{ BinaryOperatorScalar(desc, "/", "", "v") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} negAndSet() {
        set{{ UnaryOperator(desc, "-", "") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} absAndSet() {
        set{{ UnaryFunction(desc, "Math.abs", "") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} lerpAndSet({{ desc.vectorName }} other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    public {{ desc.vectorImpName }} lerpAndSet({{ desc.vectorImpName }} other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    @Override
    public {{ desc.vectorImpName }} linealAndSet({{ desc.vectorName }} other, double alpha, double beta) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ Lineal(desc, "", "_other.", "Vector") | indent(4) }};
        return this;
    }

    public {{ desc.vectorImpName }} linealAndSet({{ desc.vectorImpName }} other, double alpha, double beta) {
        set{{ Lineal(desc, "", "other.", "Vector") | indent(4) }};
        return this;
    }
{%      if desc.dim == 2 %}
{%      elseif desc.dim == 3 %}

    @Override
    public {{ desc.vectorImpName }} crossAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set((getY() * _other.getZ()) - (getZ() * _other.getY()),
                (getZ() * _other.getX()) - (getX() * _other.getZ()),
                (getX() * _other.getY()) - (getY() * _other.getX()));
        return this;
    }

    public {{ desc.vectorImpName }} crossAndSet({{ desc.vectorImpName }} other) {
        set((getY() * other.getZ()) - (getZ() * other.getY()),
                (getZ() * other.getX()) - (getX() * other.getZ()),
                (getX() * other.getY()) - (getY() * other.getX()));
        return this;
    }
{%      endif %}

    @Override
    public {{ desc.vectorImpName }} vectorProjectionAndSet({{ desc.vectorName }} where) {
{#
 #  where.getUnit().mul( this.dot( where.getUnit() ) )
 #  =
 #  where.mul( this.dot( where ) / where.getLengthCuad() )
 #}
        double r = dot(where) / where.getLengthCuad();
        set(where);
        mulAndSet(r);
        return this;
    }

    public {{ desc.vectorImpName }} vectorProjectionAndSet({{ desc.vectorImpName }} where) {
        double r = dot(where) / where.getLengthCuad();
        set(where);
        mulAndSet(r);
        return this;
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the method Lineal of the vector.
 #}
{%  macro Lineal( desc, this="", other="other.", ret = "Vector" ) %}
{%      dynmacro Lineal_anonymous1( desc, property ) %}
({{ desc.type }})(alpha * {{ p().this }}get{{ property.upperName }}() + beta * {{ p().other }}get{{ property.upperName }}())
{%-     enddynmacro %}
({{ Properties( desc, ",%n", Lineal_anonymous1 ) }})
{%- endmacro %}
