{%  extends "pebble/java/Base.pebble" %}

{#
 # This template renders a color.
 #}

{%  block package %}{{ desc._package }}{% endblock %}

{%  block content %}
/**
 * A {@code {{ desc.colorName }}} is a {{ desc.dim }} dimensional collection of values
 * that represents a color.
 */
public interface {{ desc.colorName }} extends Tuple {

    boolean isNormalized();

    {{ desc.colorName }} getNormalized();

    /**
     * This method adds {@code this} color to {@code other} color.
     *
     * @param other Other color.
     * @return {@code this + other}
     */
    {{ desc.colorName }} add({{ desc.colorName }} other);

    /**
     * This method subs {@code this} color to {@code other} color.
     *
     * @param other Other color.
     * @return {@code this - other}
     */
    {{ desc.colorName }} sub({{ desc.colorName }} other);

    /**
     * This method multiplies {@code this} color by {@code other} color (coordinate by coordenate).
     *
     * @param other Other color.
     * @return {@code (this.x * other.x, this.y * other.y, ...)}
     */
    {{ desc.colorName }} simpleMul({{ desc.colorName }} other);

    /**
     * This method divides {@code this} color by {@code other} color (coordinate by coordenate).
     *
     * @param other Other color.
     * @return {@code (this.x / other.x, this.y / other.y, ...)}
     */
    {{ desc.colorName }} simpleDiv({{ desc.colorName }} other);

    /**
     * This method multiplies {@code this} color by {@code v} scalar.
     *
     * @param v Scalar.
     * @return {@code this * v}
     */
    {{ desc.colorName }} mul(double v);

    /**
     * This method divides {@code this} color by {@code v} scalar.
     *
     * @param v Scalar.
     * @return {@code this / v}
     */
    {{ desc.colorName }} div(double v);

    /**
     * This method evaluates the negation of {@code this} color.
     *
     * @return {@code -this}
     */
    {{ desc.colorName }} neg();

    /**
     * This method evaluates the absolute value of {@code this} color.
     *
     * @return {@code abs( this )}
     */
    {{ desc.colorName }} abs();

    /**
     * This method evaluates the linear interpolation of {@code this} color and {@code other} color at {@code alpha}.
     *
     * @param other Other color.
     * @param alpha Interpolation.
     * @return {@code this * alpha + other * (1 - alpha)}
     */
    default {{ desc.colorName }} lerp({{ desc.colorName }} other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    /**
     * This method evaluates the inverse of the linear interpolation of {@code this} color and {@code other} color at {@code vLerp}.
     *
     * @param other Other color.
     * @param vLerp Interpolated color.
     * @return {@code vLerp = this * result + other * (1 - result)
     *                vLerp = this * result + other - other * result
     *                vLerp = (this - other) * result + other
     *                vLerp - other = (this - other) * result
     *                vLerp - other = V1 = |V1| * U   si V1 != 0
     *                this - other  = V2 = |V2| * U   si V2 != 0
     *                |V1| * U = |V2| * U * result
     *                |V1| = |V2| * result
     *                result = |V1| / |V2|}
     */
    double invLerp({{ desc.colorName }} other, {{ desc.colorName }} vLerp);

    /**
     * This method evaluates the linear combination of {@code this} color and {@code other} color at {@code alpha} and {@code beta}.
     *
     * @param other Other color.
     * @param alpha Interpolation for {@code this}.
     * @param beta Interpolation for {@code other}.
     * @return {@code this * alpha + other * beta}
     */
    {{ desc.colorName }} lineal({{ desc.colorName }} other, double alpha, double beta);
}
{%  endblock %}
