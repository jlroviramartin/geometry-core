{%  extends "pebble/java/Base.pebble" %}

{%  block package %}{{ desc._package }}{% endblock %}

{#
 # This template renders a vector.
 #}

{%  block content %}
/**
 * A {@code {{ desc.buffVectorName }}} is a {{ desc.dim }} dimensional collection of values
 * that represents a vector.
 */
public interface {{ desc.buffVectorName }} extends {{ desc.vectorName }}, BuffTuple {

    /**
     * This method sets the vector to zero.
     *
     * @return This vector.
     */
    {{ desc.buffVectorName }} setZero();

    /**
     * This method sets the vector to the unit.
     *
     * @return {@code this.unit.length == 1}
     */
    {{ desc.buffVectorName }} setUnit();

    /**
     * This method adds {@code this} vector to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code result = this + other}
     */
    {{ desc.buffVectorName }} addAndSet({{ desc.vectorName }} other);

    /**
     * This method subs {@code this} vector to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code result = this - other}
     */
    {{ desc.buffVectorName }} subAndSet({{ desc.vectorName }} other);

    /**
     * This method multiplies {@code this} vector to {@code other} vector (coordinate by coordenate).
     *
     * @param other Other vector.
     * @return result.
     */
    {{ desc.buffVectorName }} simpleMulAndSet({{ desc.vectorName }} other);

    /**
     * This method divides {@code this} vector by {@code other} vector (coordinate by coordenate).
     *
     * @param other Other vector.
     * @return result.
     */
    {{ desc.buffVectorName }} simpleDivAndSet({{ desc.vectorName }} other);

    /**
     * This method multiplies {@code this} vector to {@code v}.
     *
     * @param v Scalar.
     * @return {@code result = this * v}
     */
    {{ desc.buffVectorName }} mulAndSet(double v);

    /**
     * This method divides {@code this} vector by {@code v}.
     *
     * @param v Scalar.
     * @return {@code result = this / v}
     */
    {{ desc.buffVectorName }} divAndSet(double v);

    /**
     * This method evaluates the negation of {@code this} vector.
     *
     * @return {@code result = -this}
     */
    {{ desc.buffVectorName }} negAndSet();

    /**
     * This method evaluates the absolute value of {@code this} vector.
     *
     * @return {@code result = abs( this )}
     */
    {{ desc.buffVectorName }} absAndSet();

    /**
     * This method evaluates the linear interpolation of {@code this} vector and {@code other} vector at {@code alpha}.
     *
     * @param other Other vector.
     * @param alpha Interpolation.
     * @return {@code this * alpha + other * (1 - alpha)}
     */
    {{ desc.buffVectorName }} lerpAndSet({{ desc.vectorName }} other, double alpha);

    /**
     * This method evaluates the linear combination of {@code this} vector and {@code other} vector at {@code alpha} and {@code beta}.
     *
     * @param other Other vector.
     * @param alpha Interpolation for {@code this}.
     * @param beta Interpolation for {@code other}.
     * @return {@code this * alpha + other * beta}
     */
    {{ desc.buffVectorName }} linealAndSet({{ desc.vectorName }} other, double alpha, double beta);
{%      if desc.dim == 3 %}

    /**
     * This method evaluates the cross product of {@code this} vector and {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this x other}
     */
    {{ desc.buffVectorName }} crossAndSet({{ desc.vectorName }} other);
{%      endif %}
{%      if desc.dim == 2 %}

    /**
     * This method calculates the perpendicular vector to the left of {@code this} vector.
     *
     * @return {@code (-y, x)}
     */
    {{ desc.buffVectorName }} setPerpLeft();

    /**
     * This method calculates the perpendicular vector to the right (Perp) of {@code this} vector.
     *
     * @return {@code (y, -x)}
     */
    {{ desc.buffVectorName }} setPerpRight();

    /**
     * This method rotates {@code this} vector.
     *
     * @param angle Angle (radians).
     * @return Rotated vector.
     */
    {{ desc.buffVectorName }} setRotate(double angle);

    /**
     * This method rotates and scales {@code this} vector.
     *
     * @param angle Angle (radians).
     * @param len Scale.
     * @return Rotated vector.
     */
    {{ desc.buffVectorName }} setRotateAndScale(double angle, double len);
{%      endif %}

    /**
     * This method evaluates the vector projection of {@code this} vector over {@code where} vector.
     * https://en.wikipedia.org/wiki/Vector_projection
     *
     * @param where Where to project.
     * @return {@code this.scalarProjection(where) . where.getUnit()}
     */
    {{ desc.buffVectorName }} vectorProjectionAndSet({{ desc.vectorName }} where);
}
{%  endblock %}
