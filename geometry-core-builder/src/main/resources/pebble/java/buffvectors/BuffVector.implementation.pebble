{%  macro MathAndSet( desc, className ) %}
    @Override
    public {{ className }} setZero() {
{% dynmacro MathAndSet_setZero( desc, property ) %}
0
{%-     enddynmacro %}
        set({{ Properties( desc, ", ", MathAndSet_setZero ) | indent(4) }});
        return this;
    }

    @Override
    public {{ className }} setUnit() {
        double len = getLength();
        if (DoubleUtils.epsilonZero(len)) {
            throw new ArithmeticException("Divided by 0");
        }
        return divAndSet(len);
    }
{%      if desc.dim == 2 %}

    @Override
    public {{ className }} setPerpLeft() {
        set(-getY(), getX());
        return this;
    }

    @Override
    public {{ className }} setPerpRight() {
        set(getY(), -getX());
        return this;
    }

    @Override
    public {{ className }} setRotate(double angle) {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        set(({{ desc.type }})(getX() * c - getY() * s),
                ({{ desc.type }})(getX() * s + getY() * c));
        return this;
    }

    @Override
    public {{ className }} setRotateAndScale(double angle, double len) {
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        set(({{ desc.type }})(len*(getX() * c - getY() * s)),
                ({{ desc.type }})(len*(getX() * s + getY() * c)));
        return this;
    }
{%      endif %}

{{ SimpleMathAndSetImplementation( desc, className, desc.vectorName, desc.vectorImpName, desc.buffVectorImpName ) }}

{{ LerpAndLinealAndSetImplementation( desc, className, desc.vectorName, desc.vectorImpName, desc.buffVectorImpName )  }}
{%      if desc.dim == 2 %}
{%      elseif desc.dim == 3 %}

    @Override
    public {{ className }} crossAndSet({{ desc.vectorName }} other) {
        if (other instanceof {{ desc.vectorImpName }}) {
            return crossAndSet(({{ desc.vectorImpName }})other);
        } else if (other instanceof {{ desc.buffVectorImpName }}) {
            return crossAndSet(({{ desc.buffVectorImpName }})other);
        } else {
            return crossAndSet(new {{ desc.vectorImpName }}(other));
        }
    }

    public {{ className }} crossAndSet({{ desc.vectorImpName }} other) {
        set((getY() * other.getZ()) - (getZ() * other.getY()),
                (getZ() * other.getX()) - (getX() * other.getZ()),
                (getX() * other.getY()) - (getY() * other.getX()));
        return this;
    }

    public {{ className }} crossAndSet({{ desc.buffVectorImpName }} other) {
        set((getY() * other.getZ()) - (getZ() * other.getY()),
                (getZ() * other.getX()) - (getX() * other.getZ()),
                (getX() * other.getY()) - (getY() * other.getX()));
        return this;
    }
{%      endif %}

{# vectorProjectionAndSet:
   where.getUnit().mul( this.dot( where.getUnit() ) )
   =
   where.mul( this.dot( where ) / where.getLengthCuad() )
 
   double r = dot(where) / where.getLengthCuad();
   set(where);
   mulAndSet(r);
   return this;
#}
    @Override
    public {{ className }} vectorProjectionAndSet({{ desc.vectorName }} where) {
        if (where instanceof {{ desc.vectorImpName }}) {
            return vectorProjectionAndSet(({{ desc.vectorImpName }})where);
        } else if (where instanceof {{ desc.buffVectorImpName }}) {
            return vectorProjectionAndSet(({{ desc.buffVectorImpName }})where);
        } else {
            return vectorProjectionAndSet(new {{ desc.vectorImpName }}(where));
        }
    }

    public {{ className }} vectorProjectionAndSet({{ desc.vectorImpName }} where) {
        double r = dot(where) / where.getLengthCuad();
        set{{ BinaryOperatorScalar(desc, "*", "where.", "r") | indent(4) }};
        return this;
    }

    public {{ className }} vectorProjectionAndSet({{ desc.buffVectorImpName }} where) {
        double r = dot(where) / where.getLengthCuad();
        set{{ BinaryOperatorScalar(desc, "*", "where.", "r") | indent(4) }};
        return this;
    }
{%  endmacro %}
