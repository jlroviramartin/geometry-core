{#
 # This macro renders the overwriting of Object methods of the tuple.
 #}
{%  macro Object( desc, className, isBuff = false ) %}
    @Override
    public String toString() {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
{%      dynmacro Object_toString( desc, property ) %}
{{ property.name }}
{%-     enddynmacro %}
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
            {{ Properties( desc, ", ", Object_toString ) | indent(3)  }});
    }

    @Override
    public boolean equals(Object other) {
        if (other instanceof {{ desc.tupleImpName }}) {
            return equals(({{ desc.tupleImpName }})other);
        } else if (other instanceof {{ desc.buffTupleImpName }}) {
            return equals(({{ desc.buffTupleImpName }})other);
        } else if (other instanceof Tuple) {
            return equals(new {{ desc.tupleImpName }}((Tuple)other));
        }
        return false;
    }

{%-     dynmacro Object_equals1( desc, property ) %}
other.get{{ property.upperName }}()
{%-     enddynmacro %}

    public boolean equals({{ desc.tupleImpName }} other) {
{%  if not isBuff %}
        if (other == this) {
            return true;
        }
{%  endif %}
        return equals({{ Properties( desc, ",%n", Object_equals1 ) | indent(4) }});
    }

    public boolean equals({{ desc.buffTupleImpName }} other) {
{%  if isBuff %}
        if (other == this) {
            return true;
        }
{%  endif %}
        return equals({{ Properties( desc, ",%n", Object_equals1 ) | indent(4) }});
    }

    @Override
    public int hashCode() {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
{%      for property in desc.properties %}
        hash = prime * hash + {{ desc.ctype }}.hashCode(get{{ property.upperName }}());
{%      endfor %}
        return hash;
    }

    @Override
    public {{ className }} clone() throws CloneNotSupportedException {
        {{ className }} copy = ({{ className }})super.clone();
        return copy;
    }
{%  endmacro %}

