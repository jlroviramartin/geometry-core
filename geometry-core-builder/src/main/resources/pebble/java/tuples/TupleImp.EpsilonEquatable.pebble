{#
 # This macro renders the implementation of EpsilonEquatable of the tuple.
 #}
{%  macro EpsilonEquatable( desc, className ) %}
    @Override
    public boolean epsilonEquals(Tuple other) {
        return epsilonEquals(other, EPSILON);
    }

    @Override
    public boolean epsilonEquals(Tuple other, double epsilon) {
        if (other == this) {
            return true;
        }
        if (other instanceof {{ className }}) {
            {{ className }} _other = ({{ className }})other;
{%      dynmacro EpsilonEquatable_epsilonEquals1( desc, property ) %}
_other.{{ property.name }}
{%-     enddynmacro %}
            return epsilonEquals({{ Properties( desc, ",%n", EpsilonEquatable_epsilonEquals1 ) | indent(4) }}, epsilon);
        }
        if (other instanceof Tuple) {
            {{ desc.tupleTypeName }} _other = TupleUtils.to{{ desc.tupleTypeName }}((Tuple)other);
{%      dynmacro EpsilonEquatable_epsilonEquals2( desc, property ) %}
_other.get{{ property.upperName }}()
{%-     enddynmacro %}
            return epsilonEquals({{ Properties( desc, ",%n", EpsilonEquatable_epsilonEquals2 ) | indent(4) }}, epsilon);
        }
        return false;
    }
{%  endmacro %}
