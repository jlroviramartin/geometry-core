{#
 # This macro renders the implementation of EpsilonEquatable of the tuple.
 #}
{%  macro EpsilonEquatable( desc, className, isBuff = false ) %}
    @Override
    public boolean epsilonEquals(Tuple other) {
        return epsilonEquals(other, EPSILON);
    }

{%      dynmacro EpsilonEquatable_epsilonEquals1( desc, property ) %}
other.get{{ property.upperName }}()
{%-     enddynmacro %}
    @Override
    public boolean epsilonEquals(Tuple other, double epsilon) {
        if (other instanceof {{ desc.tupleImpName }}) {
            return epsilonEquals(({{ desc.tupleImpName }})other, epsilon);
        } else if (other instanceof {{ desc.buffTupleImpName }}) {
            return epsilonEquals(({{ desc.buffTupleImpName }})other, epsilon);
        } else if (other instanceof Tuple) {
            return epsilonEquals(new {{ desc.tupleImpName }}(other), epsilon);
        }
        return false;
    }

    public boolean epsilonEquals({{ desc.tupleImpName }} other, double epsilon) {
{%  if not isBuff %}
        if (other == this) {
            return true;
        }
{%  endif %}
        return epsilonEquals({{ Properties( desc, ",%n", EpsilonEquatable_epsilonEquals1 ) | indent(4) }}, epsilon);
    }

    public boolean epsilonEquals({{ desc.buffTupleImpName }} other, double epsilon) {
{%  if isBuff %}
        if (other == this) {
            return true;
        }
{%  endif %}
        return epsilonEquals({{ Properties( desc, ",%n", EpsilonEquatable_epsilonEquals1 ) | indent(4) }}, epsilon);
    }
{%  endmacro %}
