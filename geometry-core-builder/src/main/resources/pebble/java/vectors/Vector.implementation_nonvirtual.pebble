{%  macro MathNonVirtual( desc, className ) %}
    public {{ className }} add({{ className }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "+", "", "other.") | indent(4) }};
    }

    public {{ className }} sub({{ className }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "-", "", "other.") | indent(4) }};
    }

    public {{ className }} simpleMul({{ className }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "*", "", "other.") | indent(4) }};
    }

    public {{ className }} simpleDiv({{ className }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "/", "", "other.") | indent(4) }};
    }

    public {{ className }} lerp({{ className }} other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp({{ className }} other, {{ className }} vLerp) {
        {{ InvLerp(desc, "", "other.", "vLerp.") | indent(2) }}
    }

    public {{ className }} lineal({{ className }} other, double alpha, double beta) {
        return new {{ className }}{{ Lineal(desc, "", "other.", "Vector") | indent(4) }};
    }

    public double dot({{ className }} other) {
{%      dynmacro Math_dot2( desc, property ) %}
get{{ property.upperName }}() * other.get{{ property.upperName }}()
{%-     enddynmacro %}
        return {{ Properties( desc, " + ", Math_dot2 ) }};
    }
{%      if desc.dim == 2 %}

    public double cross({{ className }} other) {
        return getX() * other.getY() - getY() * other.getX();
    }
{%      elseif desc.dim == 3 %}

    public {{ className }} cross({{ className }} other) {
        return new {{ className }}((getY() * other.getZ()) - (getZ() * other.getY()),
                (getZ() * other.getX()) - (getX() * other.getZ()),
                (getX() * other.getY()) - (getY() * other.getX()));
    }
{%      endif %}

    public {{ className }} vectorProjection({{ className }} where) {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }
{%  endmacro %}
