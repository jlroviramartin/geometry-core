{%  macro Math( desc, className ) %}
{%  macrocall Method(
        desc,
        "boolean", "isUnit", [] ) %}
    {% argument body %}
        return isUnit(EPSILON);
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        "boolean", "isUnit", [["double", "epsilon"]] ) %}
    {% argument body %}
        return DoubleUtils.epsilonEquals(getLength(), 1, epsilon);
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        className, "getUnit", [] ) %}
    {% argument body %}
        double len = getLength();
        if (DoubleUtils.epsilonZero(len)) {
            throw new ArithmeticException("Divided by 0");
        }
        return div(len);
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        "int", "getQuadrant", [] ) %}
    {% argument body %}
        {{ GetQuadrant(desc) | indent(2) }}
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        "double", "getLength", [] ) %}
    {% argument body %}
        return Math.sqrt(getLengthCuad());
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        "double", "getLengthCuad", [] ) %}
    {% argument body %}
        return dot(this);
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        "double", "getLengthL1", [] ) %}
    {% argument body %}
        return {{ GetLengthL1(desc) | indent(4) }};
{%  endmacrocall%}
{%      if desc.dim == 2 %}

{%  macrocall Method(
        desc,
        "double", "getAngle", [] ) %}
    {% argument body %}
        return (double) Math.atan2(getY(), getX());
{%  endmacrocall%}

{%  macrocall UnfoldMethod(
        desc,
        "double", "angleTo", [[ desc.vectorName, "other" ]] ) %}
    {% argument body %}
        // http://stackoverflow.com/questions/2150050/finding-signed-angle-between-vectors
        return Math.atan2(getX() * other.getY() - getY() * other.getX(),
                getX() * other.getX() + getY() * other.getY());
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        className, "getPerpLeft", [] ) %}
    {% argument body %}
        return new {{ className }}(-getY(), getX());
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        className, "getPerpRight", [] ) %}
    {% argument body %}
        return new {{ className }}(getY(), -getX());
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        className, "rotate", [[ "double", "angle" ]] ) %}
    {% argument body %}
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        return new {{ className }}(({{ desc.type }})(getX() * c - getY() * s),
                ({{ desc.type }})(getX() * s + getY() * c));
{%  endmacrocall%}

{%  macrocall Method(
        desc,
        className, "rotateAndScale", [[ "double", "angle" ], [ "double", "len" ]] ) %}
    {% argument body %}
        double s = Math.sin(angle);
        double c = Math.cos(angle);
        return new {{ className }}(({{ desc.type }})(len*(getX() * c - getY() * s)),
                ({{ desc.type }})(len*(getX() * s + getY() * c)));
{%  endmacrocall%}
{%      endif %}

{{ SimpleMathImplementation( desc, className, desc.vectorName, desc.vectorImpName, desc.buffVectorImpName ) }}

{{ LerpAndInvLerpAndLinealImplementation( desc, className, desc.vectorName, desc.vectorImpName, desc.buffVectorImpName )  }}

{%-     dynmacro Math_dot1( desc, property ) %}
get{{ property.upperName }}() * other.get{{ property.upperName }}()
{%-     enddynmacro %}

{%  macrocall UnfoldMethod(
        desc,
        "double", "dot", [[ desc.vectorName, "other" ]] ) %}
    {% argument body %}
        return {{ Properties( desc, " + ", Math_dot1 ) }};
{%  endmacrocall %}
{%      if desc.dim == 2 %}

{%  macrocall UnfoldMethod(
        desc,
        "double", "cross", [[ desc.vectorName, "other" ]] ) %}
    {% argument body %}
        return getX() * other.getY() - getY() * other.getX();
{%  endmacrocall %}
{%      elseif desc.dim == 3 %}

{%  macrocall UnfoldMethod(
        desc,
        className, "cross", [[ desc.vectorName, "other" ]] ) %}
    {% argument body %}
        return new {{ className }}((getY() * other.getZ()) - (getZ() * other.getY()),
                (getZ() * other.getX()) - (getX() * other.getZ()),
                (getX() * other.getY()) - (getY() * other.getX()));
{%  endmacrocall %}

{%  macrocall UnfoldMethod(
        desc,
        "double", "tripleProduct", [[ desc.vectorName, "v2" ], [ desc.vectorName, "v3" ]] ) %}
    {% argument body %}
        return dot(v2.cross(v3));
{%  endmacrocall %}
{%      endif %}

{%  macrocall UnfoldMethod(
        desc,
        "double", "scalarProjection", [[ desc.vectorName, "where" ]] ) %}
    {% argument body %}
        return dot(where) / where.getLength();
{%  endmacrocall %}

{# vectorProjection:
   where.getUnit().mul( this.dot( where.getUnit() ) )
   =
   where.mul( this.dot( where ) / where.getLengthCuad() )
#}
{%  macrocall UnfoldMethod(
        desc,
        desc.vectorName, "vectorProjection", [[ desc.vectorName, "where" ]] ) %}
    {% argument body %}
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
{%  endmacrocall %}
{%  endmacro %}
