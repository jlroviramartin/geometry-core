{#
 # This macro renders the overwriting of Object methods of the matrix.
 #}
{%  macro Object( desc, className ) %}
    @Override
    public String toString() {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
{%      dynmacro Object_toString( desc, property ) %}
get{{ property.upperName }}()
{%-     enddynmacro %}
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
            {{ RowsAndColumns( desc, ",%n", ",", Object_toString ) | indent(3)  }});
    }

    public boolean equals({{ className }} other) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }

{%      dynmacro Object_equals( desc, property ) %}
other.get{{ property.upperName }}()
{%-     enddynmacro %}
        return this.equals({{ RowsAndColumns( desc, ",%n", ", ", Object_equals ) | indent(3)  }});
    }

    @Override
    public boolean equals(Object other) {
        return ((other instanceof {{ className }}) && this.equals(({{ className }}) other));
    }

    @Override
    public int hashCode() {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
{%      for row in desc.rows %}
{%          for property in row.cols %}
        hash = prime * hash + {{ desc.ctype }}.hashCode(get{{ property.upperName }}());
{%          endfor %}
{%      endfor %}
        return hash;
    }

    @Override
    public {{ className }} clone() throws CloneNotSupportedException {
            return ({{ className }})super.clone();
    }
{%  endmacro %}
