{#
 # This macro renders the implementation of vector transformations of the matrix.
 #}
{%  macro MatrixBuffTransformImplementation( desc, className ) %}
{%      set vdesc = desc.vector %}
{%      set vlowdesc = desc.vector.lowerDimension %}
    @Override
    public void mulAndSetInto({{ vdesc.buffVectorName }} v) {
        if (v instanceof {{ vdesc.buffVectorImpName }}) {
            this.mulAndSetInto(({{ vdesc.buffVectorImpName }})v);
        } else {
            {{ vdesc.buffVectorImpName }} _v = new {{ vdesc.buffVectorImpName }}(v);
            this.mulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void mulAndSetInto({{ vdesc.buffVectorImpName }} v) {
        {{ MulVector( desc, "", "v.", ret = "v.set" ) | indent(4) }}
    }

    @Override
    public void premulAndSetInto({{ vdesc.buffVectorName }} v) {
        if (v instanceof {{ vdesc.buffVectorImpName }}) {
            this.premulAndSetInto(({{ vdesc.buffVectorImpName }})v);
        } else {
            {{ vdesc.buffVectorImpName }} _v = new {{ vdesc.buffVectorImpName }}(v);
            this.premulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void premulAndSetInto({{ vdesc.buffVectorImpName }} v) {
        {{ PremulVector( desc, "", "v.", ret = "v.set " ) | indent(4) }}
    }
{%      if not desc.vector.lowerDimension is empty %}
{#
 # Those methods work with vector and points of a lower dimension. 
 #}

    @Override
    public void mulAndSetInto({{ vlowdesc.buffVectorName }} v) {
        if (v instanceof {{ vlowdesc.buffVectorImpName }}) {
            this.mulAndSetInto(({{ vlowdesc.buffVectorImpName }})v);
        } else {
            {{ vlowdesc.buffVectorImpName }} _v = new {{ vlowdesc.buffVectorImpName }}(v);
            this.mulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void mulAndSetInto({{ vlowdesc.buffVectorImpName }} v) {
        {{ MulVectorLow( desc, "", "v.", ret = "v.set" ) | indent(4) }}
    }

    @Override
    public void mulAndSetInto({{ vlowdesc.buffPointName }} p) {
        if (p instanceof {{ vlowdesc.buffVectorImpName }}) {
            this.mulAndSetInto(({{ vlowdesc.buffPointImpName }})p);
        } else {
            {{ vlowdesc.buffPointImpName }} _p = new {{ vlowdesc.buffPointImpName }}(p);
            this.mulAndSetInto(_p);
            _p.getInto(p);
        }
    }

    public void mulAndSetInto({{ vlowdesc.buffPointImpName }} p) {
        {{ MulpointLow( desc, "", "p.", ret = "p.set" ) | indent(4) }}
    }

    @Override
    public void premulAndSetInto({{ vlowdesc.buffVectorName }} v) {
        if (v instanceof {{ vlowdesc.buffVectorImpName }}) {
            this.premulAndSetInto(({{ vlowdesc.buffVectorImpName }})v);
        } else {
            {{ vlowdesc.buffVectorImpName }} _v = new {{ vlowdesc.buffVectorImpName }}(v);
            this.premulAndSetInto(_v);
            _v.getInto(v);
        }
    }

    public void premulAndSetInto({{ vlowdesc.buffVectorImpName }} v) {
        {{ PremulVectorLow( desc, "", "v.", ret = "v.set"  ) | indent(4) }}
    }

    @Override
    public void premulAndSetInto({{ vlowdesc.buffPointName }} p) {
        if (p instanceof {{ vlowdesc.buffVectorImpName }}) {
            this.premulAndSetInto(({{ vlowdesc.buffPointImpName }})p);
        } else {
            {{ vlowdesc.buffPointImpName }} _p = new {{ vlowdesc.buffPointImpName }}(p);
            this.premulAndSetInto(_p);
            _p.getInto(p);
        }
    }

    public void premulAndSetInto({{ vlowdesc.buffPointImpName }} p) {
        {{ PremulPointLow( desc, "", "p.", ret = "p.set" ) | indent(4) }}
    }
{%      endif %}
{%  endmacro %}
