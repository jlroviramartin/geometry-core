{#
 # This macro renders the math operations of the matrix.
 #}
{%  macro MathAndSet( desc, className ) %}
    /**
     * This method sets {@code this} matrix to zero.
     *
     * @return {@code this = zero}
     */
    public {{ className }} setZero() {
{%      dynmacro Accessors_setZero( desc, property ) %}
0
{%-     enddynmacro %}
        set({{ RowsAndColumns( desc, ",%n", ", ", Accessors_setZero ) | indent(3) }});
        return this;
    }
{%      if desc.dimRows == desc.dimCols %}

    /**
     * This method sets {@code this} matrix to the identity.
     *
     * @return {@code this = identity}
     */
    public {{ className }} setIdentity() {
{%          dynmacro Accessors_setIdentity( desc, property ) %}
{%              if property.r == property.c %}1{% else %}0{% endif %}
{%-         enddynmacro %}
        set({{ RowsAndColumns( desc, ",%n", ", ", Accessors_setIdentity ) | indent(3) }});
        return this;
    }
{%      endif %}

    /**
     * This method adds {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this + other}
     */
    public {{ className }} addAndSet({{ className }} other) {
        set{{ MatrixBinaryOperator(desc, "+", "", "other.") | indent(4) }};
        return this;
    }

    /**
     * This method subs {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this - other}
     */
    public {{ className }} subAndSet({{ className }} other) {
        set{{ MatrixBinaryOperator(desc, "-", "", "other.") | indent(4) }};
        return this;
    }

    /**
     * This method multiplies {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this * v}
     */
    public {{ className }} mulAndSet(double v) {
        set{{ MatrixBinaryOperatorScalar(desc, "*", "", "v") | indent(4) }};
        return this;
    }

    /**
     * This method divides {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this / v}
     */
    public {{ className }} divAndSet(double v) {
        set{{ MatrixBinaryOperatorScalar(desc, "/", "", "v") | indent(4) }};
        return this;
    }

    /**
     * This method multiplies {@code this} matrix by {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this * other}
     */
    public {{ className }} mulAndSet({{ className }} other) {
        set{{ MatrixMul( desc, "", "other."  ) }};
        return this;
    }

    /**
     * This method changes the sign of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = -this}
     */
    public {{ className }} negAndSet() {
        set{{ MatrixUnaryOperator(desc, "-", "") | indent(4) }};
        return this;
    }

    /**
     * This method calculates the absolute value of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = abs(this)}
     */
    public {{ className }} absAndSet() {
        set{{ MatrixUnaryFunction(desc, "Math.abs", "") | indent(4) }};
        return this;
    }

    /**
     * This method calculates the transpose of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = transpose(this)}
     */
    public {{ className }} transposeAndSet() {
        set{{ MatrixTranspose( desc, "" ) | indent(3) }};
        return this;
    }
{%      if (desc.dimRows >= 2) and (desc.dimRows <= 4) %}

    /**
     * This method evaluates the inverse of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = this^-1}
     */
    public {{ className }} inverseAndSet() throws SingularMatrixException {
        {{ MatrixInverse234( desc, "", "set" ) }}
        return this;
    }
{%      endif %}
{%  endmacro %}
