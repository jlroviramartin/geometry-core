{%  extends "pebble/java/Base.pebble" %}

{#
 # This template renders a matrix.
 #}

{%  import "pebble/java/matrices/Matrix.Core.pebble" %}

{%  import "pebble/java/matrices/MatrixImp.constructors.pebble" %}
{%  import "pebble/java/matrices/MatrixImp.public.pebble" %}
{%  import "pebble/java/matrices/MatrixImp.private.pebble" %}
{%  import "pebble/java/matrices/MatrixImp.Object.pebble" %}
{%  import "pebble/java/matrices/MatrixImp.EpsilonEquatable.pebble" %}

{%  import "pebble/java/matrices/gettersetter/MatrixType.Getters.pebble" %}
{%  import "pebble/java/matrices/gettersetter/MatrixType.Setters.pebble" %}

{%  import "pebble/java/matrices/math/Matrix.Math.implementation.pebble" %}
{%  import "pebble/java/matrices/math/Matrix.MathAndSet.implementation.pebble" %}

{%  import "pebble/java/matrices/transform/Matrix.Transform.implementation.pebble" %}
{%  import "pebble/java/matrices/transform/Matrix.BuffTransform.implementation.pebble" %}

{%  block package %}{{ desc._package }}{% endblock %}

{%  block import %}
import java.util.logging.Logger;
import essence.util.math.EpsilonEquatable;
import essence.geometry.core.DoubleUtils;
import essence.geometry.core.SingularMatrixException;
import essence.geometry.core.Tuple;
import essence.geometry.core.MatrixInpector;
import essence.geometry.core.MatrixSet;
import essence.geometry.core.{{ desc.vector.vectorName }};
import essence.geometry.core.{{ desc.vector.buffVectorName }};
{%  if not desc.vector.lowerDimension is empty %}
import essence.geometry.core.{{ desc.vector.lowerDimension.vectorName }};
import essence.geometry.core.{{ desc.vector.lowerDimension.pointName }};
import essence.geometry.core.{{ desc.vector.lowerDimension.buffVectorName }};
import essence.geometry.core.{{ desc.vector.lowerDimension.buffPointName }};
{%  endif %}
import essence.geometry.core.VectorFormatInfo;
import essence.geometry.core.{{ desc.MatrixName }};
import essence.geometry.core.{{ desc.buffMatrixName }};

import static essence.geometry.core.{{ desc.ctype }}Utils.EPSILON;
{%  endblock %}

{%  block content %}
/**
 * Basic implementation of a {{ desc.dimRows }}x{{ desc.dimCols }} matrix.
 */
public class {{ desc.matrixImpName }} implements Cloneable, EpsilonEquatable<{{ desc.matrixImpName }}>, {{ desc.buffMatrixName }} {
//<editor-fold defaultstate="collapsed" desc="fields">
{{ Fields( desc ) }}
//</editor-fold>

{{ Constructors( desc, desc.matrixImpName ) }}

{{ Public( desc, desc.matrixImpName ) }}

//<editor-fold defaultstate="collapsed" desc="Transforms">
{{ MatrixTransformImplementation( desc, desc.matrixImpName ) }}

{{ MatrixBuffTransformImplementation( desc, desc.matrixImpName ) }}
//</editor-fold>

{{ MatrixMathImplementation( desc, desc.matrixImpName ) }}

{{ MatrixMathAndSetImplementation( desc, desc.matrixImpName ) }}

//<editor-fold defaultstate="collapsed" desc="accessors">
{{ MatrixGetters( desc, desc.matrixImpName ) }}

{{ MatrixSetters( desc, desc.matrixImpName ) }}
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="MatrixInpector">
    @Override
    public final int sizeRows() {
        return {{ desc.dimRows }};
    }

    @Override
    public final int sizeCols() {
        return {{ desc.dimCols }};
    }

    @Override
    public void getInto(MatrixSet matrixSet) {
{%      for row in desc.rows %}
{%          for property in row.cols %}
        matrixSet.set{{ property.ctype }}( {{ row.r }}, {{ property.c }}, ({{ property.type }}){{ property.name }} );
{%          endfor %}
{%      endfor %}
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="MatrixSet">
    @Override
    public void setFloat(int r, int c, float value) {
        set(r, c, ({{ desc.type }})value);
    }

    @Override
    public void setDouble(int r, int c, double value) {
        set(r, c, ({{ desc.type }})value);
    }

    @Override
    public <T> void set(Class<T> type, int r, int c, T value) {
        if (Number.class.isAssignableFrom(type)) {
            set(r, c, ((Number)value).{{ desc.type }}Value());
            return;
        }
        throw new UnsupportedOperationException();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
{{ Object( desc, desc.matrixImpName ) }}
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="EpsilonEquatable<{{ desc.matrixImpName }}>">
{{ EpsilonEquatable( desc, desc.matrixImpName ) }}
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
{{ Private( desc, desc.matrixImpName ) }}
//</editor-fold>
}
{%  endblock %}

{#
 # This macro renders the fields of the matrix.
 #}
{%  macro Fields(desc) %}
{%      for row in desc.rows %}
{%          for property in row.cols %}
    /** {{property.upperName}} component. */
    private {{property.type}} {{property.name}};
{%          endfor %}
{%      endfor %}
    private static final Logger LOG = Logger.getLogger({{ desc.matrixImpName }}.class.getName());
    private static String format;
{%  endmacro %}
