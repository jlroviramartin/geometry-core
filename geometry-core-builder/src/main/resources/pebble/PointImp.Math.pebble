{%  import "pebble/Tuple.Core.pebble" %}
{%  macro Math( desc ) %}
//<editor-fold defaultstate="collapsed" desc="{{ desc.pointName }}">
    @Override
    public int getQuadrant() {
        {{ GetQuadrant(desc) | indent(2) }}
    }

    @Override
    public double getDistanceCuad({{ desc.pointName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        return {{ GetDistanceCuad(desc, "", "_other.") | indent(4) }};
    }

    public double getDistanceCuad({{ desc.pointImpName }} other) {
        return {{ GetDistanceCuad(desc, "", "other.") | indent(4) }};
    }

    @Override
    public double getDistanceL1({{ desc.pointName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        return {{ GetDistanceL1(desc, "", "_other.") | indent(4) }};
    }

    public double getDistanceL1({{ desc.pointImpName }} other) {
        return {{ GetDistanceL1(desc, "", "other.") | indent(4) }};
    }

    @Override
    public {{ desc.pointImpName }} add({{ desc.vectorName }} other) {
        return clone().addAndSet(other);
    }

    public {{ desc.pointImpName }} add({{ desc.vectorImpName }} other) {
        return clone().addAndSet(other);
    }

    @Override
    public {{ desc.pointName }} sub({{ desc.vectorName }} other) {
        return clone().subAndSet(other);
    }

    public {{ desc.pointImpName }} sub({{ desc.vectorImpName }} other) {
        return clone().subAndSet(other);
    }

    @Override
    public {{ desc.vectorImpName }} vectorTo({{ desc.pointName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        return new {{ desc.vectorImpName }}{{ BinaryOperator(desc, "-", "_other.", "") | indent(4) }};
    }

    public {{ desc.vectorImpName }} vectorTo({{ desc.pointImpName }} other) {
        return new {{ desc.vectorImpName }}{{ BinaryOperator(desc, "-", "other.", "") | indent(4) }};
    }

    @Override
    public {{ desc.pointImpName }} lerp({{ desc.pointName }} other, double alpha) {
        return clone().lerpAndSet(other, alpha);
    }

    public {{ desc.pointImpName }} lerp({{ desc.pointImpName }} other, double alpha) {
        return clone().lerpAndSet(other, alpha);
    }

    @Override
    public double invLerp({{ desc.pointName }} other, {{ desc.pointName }} pLerp) {
        {{ desc.tupleTypeName }} _other = toTuple(other);
        {{ desc.tupleTypeName }} _pLerp = toTuple(pLerp);

        {{ InvLerp(desc, "", "_other.", "_pLerp.") | indent(2) }}
    }

    public double invLerp({{ desc.pointImpName }} other, {{ desc.pointImpName }} pLerp) {
        {{ InvLerp(desc, "", "other.", "pLerp.") | indent(2) }}
    }

    @Override
    public {{ desc.pointImpName }} lineal({{ desc.pointName }} other, double alpha, double beta) {
        return clone().linealAndSet(other, alpha, beta);
    }

    public {{ desc.pointImpName }} lineal({{ desc.pointImpName }} other, double alpha, double beta) {
        return clone().linealAndSet(other, alpha, beta);
    }

    @Override
    public double scalarProjection({{ desc.vectorName }} where) {
        return new {{ desc.vectorImpName }}(this).dot(where) / where.getLength();
    }

    public double scalarProjection({{ desc.vectorImpName }} where) {
        return new {{ desc.vectorImpName }}(this).dot(where) / where.getLength();
    }

    @Override
    public {{ desc.pointImpName }} vectorProjection({{ desc.vectorName }} where) {
        return clone().vectorProjectionAndSet(where);
    }

    public {{ desc.pointImpName }} vectorProjection({{ desc.vectorImpName }} where) {
        return clone().vectorProjectionAndSet(where);
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the function GetDistanceCuad.
 #}
{%  macro GetDistanceCuad( desc, this="", other="other." ) %}
{%      dynmacro GetDistanceCuad_anonymous1( desc, property ) %}
square({{ p().other }}get{{ property.upperName }}() - {{ p().this }}get{{ property.upperName }}())
{%-     enddynmacro %}
{{ Properties( desc, "%n+ ", GetDistanceCuad_anonymous1 ) }}
{%- endmacro %}

{#
 # This macro renders the function GetDistanceL1.
 #}
{%  macro GetDistanceL1( desc, this="", other="other." ) %}
{%      dynmacro GetDistanceL1_anonymous1( desc, property ) %}
Math.abs({{ p().other }}get{{ property.upperName }}() - {{ p().this }}get{{ property.upperName }}())
{%-     enddynmacro %}
{{ Properties( desc, "%n+ ", GetDistanceL1_anonymous1 ) }}
{%- endmacro %}

{#
 # This macro renders the function InvLerp of the vector.
 #}
{%  macro InvLerp( desc, this="", other="other.", pLerp="pLerp." ) %}
{#
 #      v12 = other.sub(this)
 #}
{%      dynmacro InvLerp_anonymous1( desc, property ) %}
double {{ property.name }}1 = {{ p().other }}get{{ property.upperName }}() - {{ p().this }}get{{ property.upperName }}();
{%-     enddynmacro %}
{{ Properties( desc, "%n", InvLerp_anonymous1 ) }}

{#
 #      v1Lerp = pLerp.sub(this)
 #}
{%      dynmacro InvLerp_anonymous2( desc, property ) %}
double {{ property.name }}2 = {{ p().pLerp }}get{{ property.upperName }}() - {{ p().this }}get{{ property.upperName }}();
{%-     enddynmacro %}
{{ Properties( desc, "%n", InvLerp_anonymous2 ) }}

{#
 #      v12.dot( v1Lerp ) / v12.getLength()
 #}
{%      dynmacro InvLerp_anonymous3( desc, property ) %}
{{ property.name }}1 * {{ property.name }}2
{%-     enddynmacro %}
{%      dynmacro InvLerp_anonymous4( desc, property ) %}
{{ property.name }}1 * {{ property.name }}1
{%-     enddynmacro %}
return ({{ Properties( desc, " + ", InvLerp_anonymous3 ) }}) / Math.sqrt({{ Properties( desc, " + ", InvLerp_anonymous4 ) }});
{%  endmacro %}
