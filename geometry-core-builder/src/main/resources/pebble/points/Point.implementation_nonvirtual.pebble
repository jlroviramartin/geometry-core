{%  macro MathNonVirtual( desc, className, vectorClassName ) %}
    public double getDistance({{ className }} other) {
        return Math.sqrt(getDistanceCuad(other));
    }

    public double getDistanceCuad({{ className }} other) {
        return {{ GetDistanceCuad(desc, "", "other.") | indent(4) }};
    }

    public double getDistanceL1({{ className }} other) {
        return {{ GetDistanceL1(desc, "", "other.") | indent(4) }};
    }

    public {{ className }} add({{ vectorClassName }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "+", "", "other.") | indent(4) }};
    }

    public {{ className }} sub({{ vectorClassName }} other) {
        return new {{ className }}{{ BinaryOperator(desc, "-", "", "other.") | indent(4) }};
    }

    public {{ vectorClassName }} vectorTo({{ className }} other) {
        return new {{ vectorClassName }}{{ BinaryOperator(desc, "-", "other.", "") | indent(4) }};
    }

    public {{ className }} lerp({{ className }} other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp({{ className }} other, {{ className }} pLerp) {
        {{ InvLerp(desc, "", "other.", "pLerp.") | indent(2) }}
    }

    public {{ className }} lineal({{ className }} other, double alpha, double beta) {
        return new {{ className }}{{ Lineal(desc, "", "other.", "Vector") | indent(4) }};
    }

    public double scalarProjection({{ vectorClassName }} where) {
        return new {{ vectorClassName }}(this).dot(where) / where.getLength();
    }

    public {{ className }} vectorProjection({{ vectorClassName }} where) {
        {{ VectorProjection(desc, "", "where.", "return new " ~ className) | indent(4) }}

        //return new {{ className }}(new {{ desc.vectorImpName }}(this).vectorProjection(where));
    }
{%  endmacro %}
