{%  extends "pebble/Base.pebble" %}

{#
 # This template renders a point.
 #}

{%  block package %}{{ desc._package }}{% endblock %}

{%  block content %}
/**
 * A {@code {{ desc.pointName }}} is a {{ desc.dim }} dimensional collection of values
 * that represents a point.
 */
public interface {{ desc.pointName }} extends Tuple {

    /**
     * This method gets the quadrant/octant of {@code this} point.
     *
     * @return Quadrant of this point.
     */
    int getQuadrant();

    /**
     * This method gets the distance of {@code this} point to {@code other} point.
     *
     * @param other Other point.
     * @return Distance.
     */
    double getDistance({{ desc.pointName }} other);

    /**
     * This method gets the squared distance of {@code this} point to {@code other} point.
     *
     * @param other Other point.
     * @return Squared distance.
     */
    double getDistanceCuad({{ desc.pointName }} other);

    /**
     * This method gets the L1 (Manhattan) distance of {@code this} point to {@code other} point.
     *
     * @param other Other point.
     * @return L1 (Manhattan) distance.
     */
    double getDistanceL1({{ desc.pointName }} other);

    /**
     * This method adds {@code this} point to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code result = this + other}
     */
    {{ desc.pointName }} add({{ desc.vectorName }} other);

    /**
     * This method subs {@code this} point to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code result = this - other}
     */
    {{ desc.pointName }} sub({{ desc.vectorName }} other);

    /**
     * This method gets the vector from {@code this} to {@code other} point.
     *
     * @param other Other point.
     * @return {@code result = other - this}
     */
    {{ desc.vectorName }} vectorTo({{ desc.pointName }} other);

    /**
     * This method evaluates the linear interpolation of {@code this} point and {@code other} point at {@code alpha}.
     *
     * @param other Other point.
     * @param alpha Interpolation.
     * @return {@code this * alpha + other * (1 - alpha)}
     */
    {{ desc.pointName }} lerp({{ desc.pointName }} other, double alpha);

    /**
     * This method evaluates the inverse of the linear interpolation of {@code this} point and {@code other} point at {@code pLerp}.
     *
     * @param other Other point.
     * @param pLerp Interpolated point.
     * @return {@code pLerp = this * result + other * (1 - result)}
     */
    double invLerp({{ desc.pointName }} other, {{ desc.pointName }} pLerp);

    /**
     * This method evaluates the linear combination of {@code this} point and {@code other} point at {@code alpha} and {@code beta}.
     *
     * @param other Other point.
     * @param alpha Interpolation for {@code this}.
     * @param beta Interpolation for {@code other}.
     * @return {@code this * alpha + other * beta}
     */
    {{ desc.pointName }} lineal({{ desc.pointName }} other, double alpha, double beta);

    /**
     * This method evaluates the scalar projection of {@code this} point over {@code where} vector.
     * https://en.wikipedia.org/wiki/Vector_projection
     *
     * @param where Where to project.
     * @return {@code this . where.getUnit()}
     */
    double scalarProjection({{ desc.vectorName }} where);

    /**
     * This method evaluates the vector projection of {@code this} point over {@code where} vector.
     * https://en.wikipedia.org/wiki/Vector_projection
     *
     * @param where Where to project.
     * @return {@code this.scalarProjection(where) . where.getUnit()}
     */
    {{ desc.pointName }} vectorProjection({{ desc.vectorName }} where);
}
{%  endblock %}
