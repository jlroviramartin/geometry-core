{#
 # This macro renders the accessors of the matrix.
 #}
{%  macro Accessors( desc, className ) %}
    /*
     * This method gets the number of rows.
     *
     * @return Number of rows.
     */
    public int sizeRows() {
        return {{ desc.dimRows }};
    }

    /*
     * This method gets the number of columns.
     *
     * @return Number of columns.
     */
    public int sizeCols() {
        return {{ desc.dimCols }};
    }

    /*
     * This method evaluates is {@code this} matrix is squared.
     *
     * @return {@code True} if {@code this} matrix is squared. {@code False} otherwise.
     */
    public boolean isSquared() {
        return {{ desc.dimRows == desc.dimCols }};
    }

    /**
     * This methods gets the property [r, c].
     *
     * @param r Number of the row.
     * @param c Number of the column.
     * @return Property [r, c].
     */
    public final {{ desc.type }} get(int r, int c) {
        switch(r) {
{%      for row in desc.rows %}
            case {{ row.r }}:
                switch(c) {
{%          for property in row.cols %}
                    case {{ property.c }}:
                        return {{ property.name }};
{%          endfor %}
                }
{%      endfor %}
        }
        throw new IndexOutOfBoundsException();
    }

    /**
     * This methods sets the property [r, c].
     *
     * @param r Number of the row.
     * @param c Number of the column.
     * @param value Property [r, c].
     */
    public void set(int r, int c, {{ desc.type }} value) {
        switch(r) {
{%      for row in desc.rows %}
            case {{ row.r }}:
                switch(c) {
{%          for property in row.cols %}
                    case {{ property.c }}:
                        {{ property.name }} = value;
                        return;
{%          endfor %}
                }
{%      endfor %}
        }
        throw new IndexOutOfBoundsException();
    }
{%      for row in desc.rows %}
{%          for property in row.cols %}

    /**
     * This methods gets the property [{{ property.r }}, {{ property.c }}].
     *
     * @return Property [{{ property.r }}, {{ property.c }}].
     */
    public final {{ property.type }} get{{ property.upperName }}() {
        return {{ property.name }};
    }

    /**
     * This methods sets the property [{{ property.r }}, {{ property.c }}].
     *
     * @param value Property [{{ property.r }}, {{ property.c }}].
     */
    public void set{{ property.upperName }}({{ property.type }} value) {
        {{ property.name }} = value;
    }
{%          endfor %}
{%      endfor %}

    /**
     * This methods sets all the properties.
     *
{%      for row in desc.rows %}
{%          for property in row.cols %}
     * @param {{ property.name }} Property [{{ property.r }}, {{ property.c }}].
{%          endfor %}
{%      endfor %}
     */
    public {{ desc.matrixImpName }} set({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      for row in desc.rows %}
{%          for property in row.cols %}
        this.{{ property.name }} = {{ property.name }};
{%          endfor %}
{%      endfor %}
        return this;
    }
{%  endmacro %}
