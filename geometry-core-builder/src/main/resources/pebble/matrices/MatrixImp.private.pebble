{#
 # This macro renders the private items of the matrix.
 #}
{%  macro Private( desc, className ) %}
    private boolean epsilonEquals({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      dynmacro Private_anonymous3( desc, property ) %}
{{ property.name }}
{%-     enddynmacro %}
        return epsilonEquals({{ RowsAndColumns( desc, ",%n", ", ", Private_anonymous3 ) | indent(3) }}, EPSILON);
    }

    private boolean epsilonEquals({{ TypeNameCommaSeparated( desc ) | indent(2) }}, double epsilon) {
{%      dynmacro Private_anonymous1( desc, property ) %}
DoubleUtils.epsilonEquals(get{{ property.upperName }}(), {{ property.name }}, epsilon)
{%-     enddynmacro %}
        return {{ RowsAndColumns( desc, "%n&& ", " && ", Private_anonymous1 ) | indent(3) }};
    }

    private boolean equals({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      dynmacro Private_anonymous2( desc, property ) %}
get{{ property.upperName }}() == {{ property.name }}
{%-     enddynmacro %}
        return {{ RowsAndColumns( desc, "%n&& ", " && ", Private_anonymous2 ) | indent(3) }};
    }

    private static String getFormat() {
        if (format == null) {
            String f = ".3f"; // Floating point number with 2 decimal places

            StringBuilder buff = new StringBuilder();
            String b = "%1$s"; // Begin      [
            String s = "%2$s"; // Separation ,
            String e = "%3$s"; // End        ]
            int k = 4;
            buff.append(b);
{%      for row in desc.rows %}
{%          for property in row.cols %}
            buff.append("%").append(k++).append("$").append(f);
{%              if not( loop.last ) %}
            buff.append(s);
{%              endif %}
{%          endfor %}
{%          if not( loop.last ) %}
            buff.append(s);
{%          endif %}
{%      endfor %}
            buff.append(e);
            format = buff.toString();
        }
        return format;
    }
{%  endmacro %}
