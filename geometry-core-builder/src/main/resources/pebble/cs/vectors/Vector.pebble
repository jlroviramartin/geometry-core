{%  extends "pebble/cs/Base.pebble" %}

{%  block package %}{{ desc._package }}{% endblock %}

{#
 # This template renders a vector.
 #}

{%  block content %}
/**
 * A {@code {{ desc.vectorName }}} is a {{ desc.dim }} dimensional collection of values
 * that represents a vector.
 */
public interface {{ desc.vectorName }} : Tuple {

    /**
     * This method tests if {@code this} is an unit vector (the length is 1).
     *
     * @return True if the length is 1. False otherwise.
     */
    bool isUnit();

    /**
     * This method tests if {@code this} is an unit vector (the length is 1).
     *
     * @param epsilon Error.
     * @return True if the length is 1. False otherwise.
     */
    bool isUnit(double epsilon);

    /**
     * This method gets the quadrant/octant of {@code this} vector.
     *
     * @return Quadrant of this vector.
     */
    int getQuadrant();

    /**
     * This method gets the length of {@code this} vector.
     *
     * @return Length of this vector.
     */
    double getLength();

    /**
     * This method gets the squared length of {@code this} vector.
     *
     * @return Squared length of this vector.
     */
    double getLengthCuad();

    /**
     * This method gets the L1 (Manhattan) length of {@code this} vector.
     *
     * @return L1 (Manhattan) length of this vector.
     */
    double getLengthL1();

    /**
     * This method evaluates the unit vector of {@code this} vector.
     *
     * @return {@code this.unit.length == 1}
     */
    {{ desc.vectorName }} getUnit();
{%      if desc.dim == 2 %}

    /**
     * This method evaluates the angle of {@code this} with respect to the X axis.
     * <p>
     * {@code
     * ^           __
     * |          _/| this
     * |        _/
     * |      _/
     * |    _/ __
     * |  _/   |\ angulo +
     * |_/       |
     * --+------------> X
     * origen      |
     * |   \_  |/  angulo -
     * |     \_|--
     * |       \_
     * |         \_
     * |           \|
     * v          --| this
     * }
     *
     * @return Angle.
     */
    double getAngle();

    /**
     * This method evaluates the angle of {@code this} with respect to {@code other}. Angle in radians between [-PI, PI].
     * <ul>
     * <li>It is positive if the spin es CCW [0, PI].</li>
     * <li>It is negative if the spin is CW [-PI, 0].</li>
     * </ul>
     * <p>
     * {@code
     *               __
     *              _/| other
     *            _/
     *          _/
     *        _/ __
     *      _/   |\ angulo +
     *    _/       |
     *   +          |
     * origen      |
     *       \_   /
     *         \_/
     *           \_
     *             \_
     *               \|
     *              --| this
     * }
     *
     * @param other Vector.
     * @return Angle.
     */
    double angleTo({{ desc.vectorName }} other);

    /**
     * This method calculates the perpendicular vector to the left of {@code this} vector.
     *
     * @return {@code (-y, x)}
     */
    {{ desc.vectorName }} getPerpLeft();

    /**
     * This method calculates the perpendicular vector to the right (Perp) of {@code this} vector.
     *
     * @return {@code (y, -x)}
     */
    {{ desc.vectorName }} getPerpRight();

    /**
     * This method rotates {@code this} vector.
     *
     * @param angle Angle (radians).
     * @return Rotated vector.
     */
    {{ desc.vectorName }} rotate(double angle);

    /**
     * This method rotates and scales {@code this} vector.
     *
     * @param angle Angle (radians).
     * @param len Scale.
     * @return Rotated vector.
     */
    {{ desc.vectorName }} rotateAndScale(double angle, double len);
{%      endif %}

    /**
     * This method adds {@code this} vector to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this + other}
     */
    {{ desc.vectorName }} add({{ desc.vectorName }} other);

    /**
     * This method subs {@code this} vector to {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this - other}
     */
    {{ desc.vectorName }} sub({{ desc.vectorName }} other);

    /**
     * This method multiplies {@code this} vector by {@code other} vector (coordinate by coordenate).
     *
     * @param other Other vector.
     * @return {@code (this.x * other.x, this.y * other.y, ...)}
     */
    {{ desc.vectorName }} simpleMul({{ desc.vectorName }} other);

    /**
     * This method divides {@code this} vector by {@code other} vector (coordinate by coordenate).
     *
     * @param other Other vector.
     * @return {@code (this.x / other.x, this.y / other.y, ...)}
     */
    {{ desc.vectorName }} simpleDiv({{ desc.vectorName }} other);

    /**
     * This method multiplies {@code this} vector by {@code v} scalar.
     *
     * @param v Scalar.
     * @return {@code this * v}
     */
    {{ desc.vectorName }} mul(double v);

    /**
     * This method divides {@code this} vector by {@code v} scalar.
     *
     * @param v Scalar.
     * @return {@code this / v}
     */
    {{ desc.vectorName }} div(double v);

    /**
     * This method evaluates the negation of {@code this} vector.
     *
     * @return {@code -this}
     */
    {{ desc.vectorName }} neg();

    /**
     * This method evaluates the absolute value of {@code this} vector.
     *
     * @return {@code abs( this )}
     */
    {{ desc.vectorName }} abs();

    /**
     * This method evaluates the linear interpolation of {@code this} vector and {@code other} vector at {@code alpha}.
     *
     * @param other Other vector.
     * @param alpha Interpolation.
     * @return {@code this * alpha + other * (1 - alpha)}
     */
    {{ desc.vectorName }} lerp({{ desc.vectorName }} other, double alpha);

    /**
     * This method evaluates the inverse of the linear interpolation of {@code this} vector and {@code other} vector at {@code vLerp}.
     *
     * @param other Other vector.
     * @param vLerp Interpolated vector.
     * @return {@code vLerp = this * result + other * (1 - result)
     *                vLerp = this * result + other - other * result
     *                vLerp = (this - other) * result + other
     *                vLerp - other = (this - other) * result
     *                vLerp - other = V1 = |V1| * U   si V1 != 0
     *                this - other  = V2 = |V2| * U   si V2 != 0
     *                |V1| * U = |V2| * U * result
     *                |V1| = |V2| * result
     *                result = |V1| / |V2|}
     */
    double invLerp({{ desc.vectorName }} other, {{ desc.vectorName }} vLerp);

    /**
     * This method evaluates the linear combination of {@code this} vector and {@code other} vector at {@code alpha} and {@code beta}.
     *
     * @param other Other vector.
     * @param alpha Interpolation for {@code this}.
     * @param beta Interpolation for {@code other}.
     * @return {@code this * alpha + other * beta}
     */
    {{ desc.vectorName }} lineal({{ desc.vectorName }} other, double alpha, double beta);

    /**
     * This method evaluates the dot product of {@code this} vector and {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this . other}
     */
    double dot({{ desc.vectorName }} other);
{%      if desc.dim == 2 %}

    /**
     * This method evaluates the cross product of {@code this} vector and {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this x other}
     */
    double cross({{ desc.vectorName }} other);
{%      elseif desc.dim == 3 %}

    /**
     * This method evaluates the cross product of {@code this} vector and {@code other} vector.
     *
     * @param other Other vector.
     * @return {@code this x other}
     */
    {{ desc.vectorName }} cross({{ desc.vectorName }} other);

    /**
     * This method evaluates the triple product of {@code this} vector and {@code v2} and {@code v3} vectors.
     *
     * @param v2 Other vector.
     * @param v3 Other vector.
     * @return {@code this . ( v1 x v2 )}
     */
    double tripleProduct({{ desc.vectorName }} v2, {{ desc.vectorName }} v3);
{%      endif %}

    /**
     * This method evaluates the scalar projection of {@code this} vector over {@code where} vector.
     * https://en.wikipedia.org/wiki/Vector_projection
     *
     * @param where Where to project.
     * @return {@code this . where.getUnit()}
     */
    double scalarProjection({{ desc.vectorName }} where);

    /**
     * This method evaluates the vector projection of {@code this} vector over {@code where} vector.
     * https://en.wikipedia.org/wiki/Vector_projection
     *
     * @param where Where to project.
     * @return {@code this.scalarProjection(where) . where.getUnit()}
     */
    {{ desc.vectorName }} vectorProjection({{ desc.vectorName }} where);
}
{%  endblock %}
