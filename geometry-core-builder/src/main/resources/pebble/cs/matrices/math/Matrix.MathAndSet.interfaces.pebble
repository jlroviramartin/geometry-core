{#
 # This macro renders the math operations of the matrix.
 #}
{%  macro MatrixMathAndSetInterfaces( desc, className ) %}
    /**
     * This method sets {@code this} matrix to zero.
     *
     * @return {@code this = zero}
     */
    {{ className }} SetZero();
{%      if desc.dimRows == desc.dimCols %}

    /**
     * This method sets {@code this} matrix to the identity.
     *
     * @return {@code this = identity}
     */
    {{ className }} SetIdentity();
{%      endif %}

    /**
     * This method adds {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this + other}
     */
    {{ className }} AddAndSet({{ desc.matrixName }} other);

    /**
     * This method subs {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this - other}
     */
    {{ className }} SubAndSet({{ desc.matrixName }} other);

    /**
     * This method multiplies {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this * v}
     */
    {{ className }} MulAndSet(double v);

    /**
     * This method divides {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this / v}
     */
    {{ className }} DivAndSet(double v);

    /**
     * This method multiplies {@code this} matrix by {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this * other}
     */
    {{ className }} MulAndSet({{ desc.matrixName }} other);

    /**
     * This method changes the sign of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = -this}
     */
    {{ className }} NegAndSet();

    /**
     * This method calculates the absolute value of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = abs(this)}
     */
    {{ className }} AbsAndSet();

    /**
     * This method calculates the transpose of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = transpose(this)}
     */
    {{ className }} TransposeAndSet();
{%      if (desc.dimRows >= 2) and (desc.dimRows <= 4) %}

    /**
     * This method evaluates the inverse of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = this^-1}
     */
    {{ className }} InverseAndSet() throws SingularMatrixException;
{%      endif %}
{%  endmacro %}
