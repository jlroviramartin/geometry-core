{#
 # This template renders a tupe.
 #}
{%  import "pebble/cs/Tuple.Core.pebble" %}
package {{ desc._package }};

import java.util.logging.Logger;
import java.util.Collection;
import java.util.AbstractList;
import java.util.function.Predicate;
import java.util.function.Consumer;
import essence.geometry.core.Tuple;

/**
 * Basic implementation of a {{ desc.dim }} dimension tuple list. Null tuples are not admitted.
 *
 * @param <T> Type of the tuple.
 */
public class {{ desc.tupleImpListName }} <T extends {{ desc.tupleImpName }}> extends AbstractList<T> {

//<editor-fold defaultstate="collapsed" desc="fields">
{{ Fields( desc ) }}
//</editor-fold>

{{ Constructors( desc ) }}

{{ Public( desc ) }}

{{ Private( desc ) }}

//<editor-fold defaultstate="collapsed" desc="AbstractList<T>">
{{ AbstractList( desc ) }}
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="List<T>">
{{ List( desc ) }}
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Iterator<T>">
{{ Iterator( desc ) }}
//</editor-fold>

    /**
     * This interface is used to build tuples.
     *
     * @param <T> Type of the tuple.
     */
    @FunctionalInterface
    protected static interface ConstructorFunction<T extends {{ desc.tupleImpName }}> {
        T invoke({{ TypeNameCommaSeparated( desc ) }});
    }
}

{#
 # This macro renders the public items.
 #}
{%  macro Public( desc ) %}
    /**
     * This method gets the item in the position {@code index} and sets it into {@code item}.
     *
     * @param index Index of the item.
     * @param item Item where to set the result.
     */
    public void getInto(int index, T item) {
        if (index >= size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
{%      dynmacro Public_getInto( desc, property ) %}
array[j++]
{%-     enddynmacro %}
        item.set({{ Properties( desc, ", ", Public_getInto ) }});

    }

    /**
     * This method finds the first index of the item that accepts the predicate
     * {@code predicate}, starting in {@code start}.
     *
     * @param predicate Predicate.
     * @param start Where to start.
     * @return Index.
     */
    public int find(Predicate<? super T> predicate, int start) {
{%      dynmacro Public_find1( desc, property ) %}
0
{%-     enddynmacro %}
        T item = newTuple({{ Properties( desc, ", ", Public_find1 ) }});
        for (int i = start * {{ desc.dim }}; i < realSize;) {
{%      dynmacro Public_find2( desc, property ) %}
array[i++]
{%-     enddynmacro %}
            item.set({{ Properties( desc, ", ", Public_find2 ) }});
            if (predicate.test(item)) {
                return i / {{ desc.dim }} - 1;
            }
        }
        return -1;
    }

    /**
     * This method finds the last index of the item that accepts the predicate
     * {@code predicate}, starting in {@code start} (from the end).
     *
     * @param predicate Predicate.
     * @param start Where to start (from the end).
     * @return Index.
     */
    public int findLast(Predicate<? super T> predicate, int start) {
{%      dynmacro Public_findLast1( desc, property ) %}
0
{%-     enddynmacro %}
        T item = newTuple({{ Properties( desc, ", ", Public_findLast1 ) }});
        for (int i = (start + 1) * {{ desc.dim }} - 1; i >= 0;) {
{%      dynmacro Public_findLast2( desc, property ) %}
{{ property.type }} {{ property.name }} = array[i--];
{%-     enddynmacro %}
            {{ PropertiesReverse( desc, "%n", Public_findLast2 ) | indent(3) }}
{%      dynmacro Public_findLast3( desc, property ) %}
{{ property.name }}
{%-     enddynmacro %}

            item.set({{ Properties( desc, ", ", Public_findLast3 ) }});
            if (predicate.test(item)) {
                return (i + 1) / {{ desc.dim }};
            }
        }
        return -1;
    }

    /**
     * This method removes the last item.
     */
    public void removeLast() {
        if (size == 0) {
            throw new IndexOutOfBoundsException();
        }
        size--;
        realSize -= {{ desc.dim }};
    }

    /**
     * This method removes the item in the position {@code index}.
     *
     * @param index Index.
     */
    public void removeFast(int index) {
        if (size == 0 || index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
        System.arraycopy(array, j, array, j + {{ desc.dim }}, realSize - j - {{ desc.dim }});
        size--;
        realSize -= {{ desc.dim }};
    }

    /**
     * This method removes the item {@code item}.
     *
     * @param item Item.
     */
    public void remove(T item) {
        int index = indexOf(item);
        if (index > 0) {
            removeFast(index);
        }
    }

    /**
     * This method builds a new tuple.
     *
     * @return A new tuple.
     */
    protected T newTuple({{ TypeNameCommaSeparated( desc ) }}) {
        if (constructor == null) {
            throw new UnsupportedOperationException();
        }
        return constructor.invoke({{ NameCommaSeparated( desc ) }});
    }
{%  endmacro %}

{#
 # This macro renders the overwriting of AbstractList items.
 #}
{%  macro AbstractList( desc ) %}
    /**
     * This method removes a range of items, from {@code fromIndex} to {@code toIndex}.
     *
     * @param fromIndex Initial index.
     * @param toIndex Last index (non including).
     */
    @Override
    protected void removeRange(int fromIndex, int toIndex) {
        if (size == 0 || fromIndex < 0 || toIndex > size || fromIndex > toIndex) {
            throw new IndexOutOfBoundsException();
        }
        if (fromIndex == toIndex) {
            return;
        }
        int num = toIndex - fromIndex;
        int j = fromIndex * {{ desc.dim }};
        System.arraycopy(array, j + num * {{ desc.dim }}, array, j, realSize - j - num * {{ desc.dim }});
        size -= num;
        realSize -= num * {{ desc.dim }};
    }
{%  endmacro %}

{#
 # This macro renders the overwriting of List items.
 #}
{%  macro List( desc ) %}
    /**
     * Number of tuples in the list.
     *
     * @return Size of the list.
     */
    @Override
    public int size() {
        return size;
    }

    /**
     * This method gets the item in the position {@code index}.
     *
     * @param index Index of the item.
     * @return Item.
     */
    @Override
    public T get(int index) {
        if (index >= size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
{%      dynmacro Public_get( desc, property ) %}
array[j++]
{%-     enddynmacro %}
        return newTuple({{ Properties( desc, ", ", Public_get ) }});
    }

    /**
     * This method sets the item in the position {@code index} to {@code item}.
     *
     * @param index Index of the item.
     * @param item Item to set.
     * @return Item setted.
     */
    @Override
    public T set(int index, T item) {
        if (index >= size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
{%      dynmacro Public_set( desc, property ) %}
array[j++] = item.get{{ property.upperName }}();
{%-     enddynmacro %}
        {{ Properties( desc, "%n", Public_set ) | indent(2) }}

        return item;
    }

    /**
     * This method gets the index of the item {@code item}.
     *
     * @param item Item.
     * @return Index.
     */
    @Override
    public int indexOf(Object item) {
        return find(x -> x.equals((T)item), 0);
    }

    /**
     * This method gets the last index of the item {@code item}.
     *
     * @param item Item.
     * @return Index.
     */
    @Override
    public int lastIndexOf(Object item) {
        return findLast(x -> x.equals((T)item), size() - 1);
    }

    /**
     * This method adds the item {@code item} at the end.
     *
     * @param item Item.
     * @return True if item has been properly removed. False otherwise.
     */
    @Override
    public boolean add(T item) {
        int j = realSize;
        if (realSize + {{ desc.dim }} >= array.length) {
            {{ desc.type }}[] aux = new {{ desc.type }}[array.length + INC_SIZE];
            System.arraycopy(array, 0, aux, 0, realSize);
            array = aux;
        }
{%      for property in desc.properties %}
        array[j++] = item.get{{ property.upperName }}();
{%      endfor %}
        size++;
        realSize += {{ desc.dim }};
        return true;
    }

    /**
     * This method inserts the item {@code item} in the position {@code index}.
     *
     * @param item Item.
     * @param index Index.
     */
    @Override
    public void add(int index, T item) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
        int requieredSize = realSize + {{ desc.dim }};
        if (realSize + {{ desc.dim }} >= array.length) {
            int proposedSize = array.length + INC_SIZE;
            int newSize = ((requieredSize > proposedSize) ? requieredSize : proposedSize);
            {{ desc.type }}[] aux = new {{ desc.type }}[newSize];
            System.arraycopy(array, 0, aux, 0, j);
            System.arraycopy(array, j, aux, j + {{ desc.dim }}, realSize - j);
            array = aux;
        } else {
            System.arraycopy(array, j, array, j + {{ desc.dim }}, realSize - j);
        }
{%      for property in desc.properties %}
        array[j++] = item.get{{ property.upperName }}();
{%      endfor %}
        size++;
        realSize += {{ desc.dim }};
    }

    /**
     * This method inserts the items {@code c} in the position {@code index}.
     *
     * @param c Items.
     * @param index Index.
     * @return True if item has been properly removed. False otherwise.
     */
    @Override
    public boolean addAll(int index, Collection<? extends T> c) {
        if (index < 0 || index > size) {
            throw new IndexOutOfBoundsException();
        }
        int j = index * {{ desc.dim }};
        int csize = c.size();
        int requieredSize = realSize + csize * {{ desc.dim }};
        if (requieredSize >= array.length) {
            int proposedSize = array.length + INC_SIZE;
            int newSize = ((requieredSize > proposedSize) ? requieredSize : proposedSize);
            {{ desc.type }}[] aux = new {{ desc.type }}[newSize];
            System.arraycopy(array, 0, aux, 0, j);
            System.arraycopy(array, j, aux, j + csize * {{ desc.dim }}, realSize - j);
            array = aux;
        } else {
            System.arraycopy(array, j, array, j + csize * {{ desc.dim }}, realSize - j);
        }
        for (T item : c) {
{%      for property in desc.properties %}
            array[j++] = item.get{{ property.upperName }}();
{%      endfor %}
        }
        size += csize;
        realSize += csize * {{ desc.dim }};
        return true;
    }

    /**
     * This method removes the item in the position {@code index}.
     *
     * @param index Index.
     * @return Item removed.
     */
    @Override
    public T remove(int index) {
        if (size == 0 || index < 0 || index >= size) {
            throw new IndexOutOfBoundsException();
        }
        T ret = get(index);
        int j = index * {{ desc.dim }};
        System.arraycopy(array, j + {{ desc.dim }}, array, j, realSize - j - {{ desc.dim }});
        size--;
        realSize -= {{ desc.dim }};
        return ret;
    }
{%  endmacro %}

{#
 # This macro renders the overwriting of Iterator items.
 #}
{%  macro Iterator( desc ) %}
    /**
     * This method applies the action {@code action} to all items in {@code this} list.
     *
     * @param action Acion.
     */
    @Override
    public void forEach(Consumer<? super T> action) {
{%      dynmacro Public_forEach1( desc, property ) %}
0
{%-     enddynmacro %}
        T item = newTuple({{ Properties( desc, ", ", Public_forEach1 ) }});
        for (int i = 0; i < realSize;) {
{%      dynmacro Public_forEach2( desc, property ) %}
array[i++]
{%-     enddynmacro %}
            item.set({{ Properties( desc, ", ", Public_forEach2 ) }});
            action.accept(item);
            i -= {{ desc.dim }};
{%      dynmacro Public_forEach3( desc, property ) %}
array[i++] = item.get{{ property.upperName }}();
{%-     enddynmacro %}
            {{ Properties( desc, "%n", Public_forEach3 ) | indent(3) }}

        }
    }
{%  endmacro %}

{#
 # This macro renders the private items.
 #}
{%  macro Private( desc ) %}
{%  endmacro %}

{#
 # This macro renders the fields.
 #}
{%  macro Fields( desc ) %}
    private final ConstructorFunction<T> constructor;
    private {{ desc.type }}[] array;
    /* Number of tuples in the list. */
    private int size;
    /* Number of components in the list. */
    private int realSize;
    private static final int INC_SIZE = {{ desc.dim }} * 10;
    private static final Logger LOG = Logger.getLogger({{ desc.tupleImpListName }}.class.getName());
{%  endmacro %}

{#
 # This macro renders the constructors.
 #}
{%  macro Constructors( desc ) %}
    /**
     * Empty constructor.
     */
    public {{ desc.tupleImpListName }}() {
        this(INC_SIZE, null);
    }

    /**
     * Constructor including a tuple constructor.
     *
     * @param constructor Tuple constructor.
     */
    public {{ desc.tupleImpListName }}(ConstructorFunction<T> constructor) {
        this(INC_SIZE, constructor);
    }

    /**
     * Constructor including the size.
     *
     * @param size Initial size of the list.
     */
    public {{ desc.tupleImpListName }}(int size) {
        this(size, null);
    }

    /**
     * Constructor including the size and a tuple constructor.
     *
     * @param size Initial size of the list.
     * @param constructor Tuple constructor.
     */
    public {{ desc.tupleImpListName }}(int size, ConstructorFunction<T> constructor) {
        array{{ desc.upperName }} = new {{ desc.type }}[size * {{ desc.dim }}];
        this.constructor = constructor;
    }
{% endmacro %}
