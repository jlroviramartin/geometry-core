{%  import "pebble/Tuple.Core.pebble" %}
{%  macro MathAndSet( desc ) %}
//<editor-fold defaultstate="collapsed" desc="{{ desc.pointName }}">
    @Override
    public {{ desc.pointImpName }} addAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "+", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.pointImpName }} addAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "+", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.pointImpName }} subAndSet({{ desc.vectorName }} other) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ BinaryOperator(desc, "-", "", "_other.") | indent(4) }};
        return this;
    }

    public {{ desc.pointImpName }} subAndSet({{ desc.vectorImpName }} other) {
        set{{ BinaryOperator(desc, "-", "", "other.") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.pointImpName }} lerpAndSet({{ desc.pointName }} other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    public {{ desc.pointImpName }} lerpAndSet({{ desc.pointImpName }} other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    @Override
    public {{ desc.pointImpName }} linealAndSet({{ desc.pointName }} other, double alpha, double beta) {
        {{ desc.tupleTypeName }} _other = toTuple(other);

        set{{ Lineal(desc, "", "_other.", "Vector") | indent(4) }};
        return this;
    }

    public {{ desc.pointImpName }} linealAndSet({{ desc.pointImpName }} other, double alpha, double beta) {
        set{{ Lineal(desc, "", "other.", "Vector") | indent(4) }};
        return this;
    }

    @Override
    public {{ desc.pointImpName }} vectorProjectionAndSet({{ desc.vectorName }} where) {
        set(new {{ desc.vectorImpName }}(this).vectorProjectionAndSet(where));
        return this;
    }

    public {{ desc.pointImpName }} vectorProjectionAndSet({{ desc.vectorImpName }} where) {
        set(new {{ desc.vectorImpName }}(this).vectorProjectionAndSet(where));
        return this;
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the method Lineal of the vector.
 #}
{%  macro Lineal( desc, this="", other="other.", ret = "Vector" ) %}
{%      dynmacro Lineal_anonymous1( desc, property ) %}
({{ desc.type }})(alpha * {{ p().this }}get{{ property.upperName }}() + beta * {{ p().other }}get{{ property.upperName }}())
{%-     enddynmacro %}
({{ Properties( desc, ",%n", Lineal_anonymous1 ) }})
{%- endmacro %}
