delimiters "$", "$"

Tuple(desc) ::= <<
package $desc._package$;

import essence.util.math.EpsilonEquatable;

/**
 * A {@code Tuple$desc.dim$\} is a $desc.dim$ dimensional collection of values.
 */
public interface Tuple$desc.dim$ extends EpsilonEquatable<Tuple$desc.dim$> {

    /**
     * This method tests if {@code this} tuple is valid: no component is NaN nor infinity.
     *
     * @return It tests if is valid.
     */
    boolean isValid();

    /**
     * This method tests if any component of {@code this} tuple is infinity.
     *
     * @return It tests if any component is infinity.
     */
    boolean isInfinity();

    /**
     * This method tests if all components of {@code this} tuple are zero (using epsilon equals).
     *
     * @return It tests if all components are zero.
     */
    boolean isZero();
}
>>

Tuple_Number(desc) ::= <<
package $desc._package$;

/**
 * A {@code Tuple$desc.dim$_Number\} is a $desc.dim$ dimensional collection of values of type numeric.
 */
public interface Tuple$desc.dim$_Number extends Tuple$desc.dim$ {
    /**
     * This method sets the values of {@code this} tuple into {@code buff}.
     *
     * @param buff Where to put the values.
     */
    void get(BuffTuple$desc.dim$_Number buff);
}
>>

Tuple_Type(desc) ::= <<
package $desc._package$;

import $desc.corePackage$.Tuple$desc.dim$;
import $desc.corePackage$.Tuple$desc.dim$_Number;

/**
 * A {@code Tuple$desc.dim$_$desc.ctype$\} is a $desc.dim$ dimensional collection of values of type $desc.type$.
 */
public interface Tuple$desc.dim$_$desc.ctype$ extends Tuple$desc.dim$, Tuple$desc.dim$_Number {

$desc.properties :{ property |
    /**
     * Gets the value of the $property.upperName$ coordinate.
     *
     * @return Value.
     */
    $property.type$ get$property.upperName$();
}; separator="\n"$
}
>>
