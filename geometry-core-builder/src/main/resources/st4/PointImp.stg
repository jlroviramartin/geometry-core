delimiters "$", "$"

import "Common.stg"

PointImp(desc) ::= <<
package $desc._package$;

import $desc.corePackage$.Tuple$desc.dim$;
import $desc.corePackage$.Point$desc.dim$;
import $desc.corePackage$.Vector$desc.dim$;

/**
 * Basic implementation of {@code Point$desc.dim$\}.
 */
public class Point$desc.dim$$desc.suffix$ extends Tuple$desc.dim$$desc.suffix$ implements Point$desc.dim$ {

$PointImp_Fields(desc)$

$PointImp_Constructors(desc, {Point$desc.dim$$desc.suffix$})$

$PointImp_Private(desc)$

$PointImp_Point(desc)$
}
>>

PointImp_Constructors(desc, className) ::= <<
    /**
     * Empty constructor.
     */
    public $className$() {
    }

    /**
     * This constructor sets the values of the ( $desc.properties :{ property | $property.upperName$}; separator=", "$ ) coordinates.
     *
     $desc.properties :{ property | * @param $property.name$ Value of the property $property.upperName$. }; separator="\n"$
     */
    public $className$($desc.properties :{ property | $property.type$ $property.name$}; separator=", "$) {
        super($desc.properties :{ property | $property.name$}; separator=", "$);
    }

    /**
     * Copy constructor.
     *
     * @param other Other tuple.
     */
    public $className$(Tuple$desc.dim$ other) {
        super(other);
    }
>>

PointImp_Fields(desc) ::= <<
    /**
     * Zero point: ($desc.properties :{ property | 0}; separator=", "$).
     */
    public static final Point$desc.dim$$desc.suffix$ ZERO = new Point$desc.dim$$desc.suffix$($desc.properties :{ property | 0}; separator=", "$);

    /**
     * One point: ($desc.properties :{ property | 1}; separator=", "$).
     */
    public static final Point$desc.dim$$desc.suffix$ ONE = new Point$desc.dim$$desc.suffix$($desc.properties :{ property | 1}; separator=", "$);

$desc.properties :{ property |
    /**
     * Unit point: $property.upperName$.
     */
    public static final Point$desc.dim$$desc.suffix$ U$property.upperName$ = getUnit($property.index$);
}; separator="\n"$
>>

PointImp_Private(desc) ::= <<
//<editor-fold defaultstate="collapsed" desc="private">
    private static Point$desc.dim$$desc.suffix$ getUnit(int index) {
        return new Point$desc.dim$$desc.suffix$($desc.properties :{ property | ((index == $property.index$) ? 1 : 0)}; separator=", "$);
    }

    private Tuple$desc.dim$_$desc.ctype$ toTuple(Tuple$desc.dim$ other) {
        if (other instanceof Tuple$desc.dim$_$desc.ctype$) {
            return (Tuple$desc.dim$_$desc.ctype$)other;
        }
        return null;
    }

    private static $desc.type$ square($desc.type$ v) {
        return v * v;
    }
//</editor-fold>
>>

PointImp_Point(desc) ::= <<
//<editor-fold defaultstate="collapsed" desc="Point$desc.dim$">
    @Override
    public int getQuadrant() {
        $GetQuadrant(desc)$
    }

    @Override
    public double getDistanceCuad(Point$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $GetDistanceCuad(desc, "", "_other.")$
    }

    public double getDistanceCuad(Point$desc.dim$$desc.suffix$ other) {
        $GetDistanceCuad(desc, "", "other.")$
    }

    @Override
    public double getDistanceL1(Point$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $GetDistanceL1(desc, "", "_other.")$
    }

    public double getDistanceL1(Point$desc.dim$$desc.suffix$ other) {
        $GetDistanceL1(desc, "", "other.")$
    }

    @Override
    public Point$desc.dim$$desc.suffix$ add(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperator(desc, "+", "", "_other.", "Point")$
    }

    public Point$desc.dim$$desc.suffix$ add(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperator(desc, "+", "", "other.", "Point")$
    }

    @Override
    public Point$desc.dim$$desc.suffix$ sub(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperator(desc, "-", "", "_other.", "Point")$
    }

    public Point$desc.dim$$desc.suffix$ sub(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperator(desc, "-", "", "other.", "Point")$
    }

    @Override
    public Vector$desc.dim$$desc.suffix$ vectorTo(Point$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperator(desc, "-", "_other.", "", "Vector")$
    }

    public Vector$desc.dim$$desc.suffix$ vectorTo(Point$desc.dim$$desc.suffix$ other) {
        $BinaryOperator(desc, "-", "other.", "", "Vector")$
    }

    @Override
    public Point$desc.dim$$desc.suffix$ lerp(Point$desc.dim$ other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public Point$desc.dim$$desc.suffix$ lerp(Point$desc.dim$$desc.suffix$ other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    @Override
    public double invLerp(Point$desc.dim$ other, Point$desc.dim$ vLerp) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);
        Tuple$desc.dim$_$desc.ctype$ _vLerp = toTuple(vLerp);

        $InvLerp(desc, "", "_other.", "_vLerp.")$
    }

    public double invLerp(Point$desc.dim$$desc.suffix$ other, Point$desc.dim$$desc.suffix$ vLerp) {
        $InvLerp(desc, "", "other.", "vLerp.")$
    }

    @Override
    public Point$desc.dim$$desc.suffix$ lineal(Point$desc.dim$ other, double alpha, double beta) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $Lineal(desc, "", "_other.", "Point")$
    }

    public Point$desc.dim$$desc.suffix$ lineal(Point$desc.dim$$desc.suffix$ other, double alpha, double beta) {
        $Lineal(desc, "", "other.", "Point")$
    }
//</editor-fold>
>>
