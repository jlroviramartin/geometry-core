{%  extends "pebble/Base.pebble" %}

{#
 # This template renders a tupe.
 #}

{%  import "pebble/Tuple.Core.pebble" %}

{%  block package %}{{ desc._package }}{% endblock %}

{%  block import %}
import java.util.logging.Logger;
import essence.geometry.core.DoubleUtils;
import essence.geometry.core.Tuple;
import essence.geometry.core.VectorFormatInfo;
import essence.geometry.core.{{ desc.tupleNumberName }};

import static essence.geometry.core.{{ desc.ctype }}Utils.EPSILON;
{%  endblock %}

{%  block content %}
/**
 * Basic implementation of a {{ desc.dim }} dimension tuple.
 */
public class {{ desc.tupleImpName }} implements Cloneable, Tuple, {{ desc.tupleTypeName }}, {{ desc.tupleNumberName }}  {

    {{ Fields( desc ) }}

    {{ Constructors( desc ) }}

    {{ Public( desc ) }}

    {{ Object( desc ) }}

    {{ Tuple( desc ) }}

    {{ Tuple_Type( desc ) }}

    {{ Tuple_Number( desc ) }}

    {{ EpsilonEquatable( desc ) }}

    {{ Private( desc ) }}
}
{%  endblock %}

{#
 # This macro renders the public items of the tuple.
 #}
{%  macro Public( desc ) %}
    public final boolean isValid() {
{%      if desc.integral %}
        return true;
{%      else %}
        return !isNaN() && !isInfinity();
{%      endif %}
    }

    /**
     * This method evaluates is {@code this} tuple contains any NaN component.
     *
     * @return {@code True} if {@code this} tuple contains any NaN component. {@code False} otherwise.
     */
    public final boolean isNaN() {
{%      if desc.integral %}
        return false;
{%      else %}
{%          dynmacro Public_isNaN( desc, property ) %}
{{ desc.ctype }}.isNaN({{ property.name }})
{%-         enddynmacro %}
        return {{ Properties( desc, " || ", Public_isNaN ) | indent(3) }};
{%      endif %}
    }

    /**
     * This method evaluates is {@code this} tuple contains any infinity component.
     *
     * @return {@code True} if {@code this} tuple contains any infinity component. {@code False} otherwise.
     */
    public final boolean isInfinity() {
{%      if desc.integral %}
        return false;
{%      else  %}
{%          dynmacro Public_isInfinity( desc, property ) %}
{{ desc.ctype }}.isInfinite({{ property.name }})
{%-         enddynmacro %}
        return {{ Properties( desc, " || ", Public_isInfinity ) | indent(3) }};
{%      endif  %}
    }

    /**
     * This method evaluates is {@code this} tuple is zero.
     *
     * @return {@code True} if {@code this} tuple is zero. {@code False} otherwise.
     */
    public final boolean isZero() {
        return isZero(EPSILON);
    }

    /**
     * This method evaluates is {@code this} tuple is zero.
     *
     * @param epsilon Error.
     * @return {@code True} if {@code this} tuple is zero. {@code False} otherwise.
     */
     public final boolean isZero(double epsilon) {
{%      dynmacro Public_isZero( desc, property ) %}
({{ desc.type }})0
{%-     enddynmacro %}
        return epsilonEquals({{ Properties( desc, ", ", Public_isZero ) | indent(3) }}, epsilon);
    }

    protected static {{ desc.tupleTypeName }} toTuple(Tuple other) {
        if (other instanceof {{ desc.tupleTypeName }}) {
            return ({{ desc.tupleTypeName }})other;
        }
        {{ desc.tupleImpName }} aux = new {{ desc.tupleImpName }}();
        other.getInto(aux);
        return aux;
    }
{%  endmacro %}

{#
 # This macro renders the fields of the tuple.
 #}
{%  macro Fields( desc ) %}
//<editor-fold defaultstate="collapsed" desc="fields">
{%      for property in desc.properties %}
    /** {{ property.upperName }} component. */
    private {{ property.type }} {{ property.name }};
{%      endfor %}
    private static final Logger LOG = Logger.getLogger({{ desc.tupleImpName }}.class.getName());
    private static String format;
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the implementation of Tuple of the tuple.
 #}
{%  macro Tuple( desc ) %}
//<editor-fold defaultstate="collapsed" desc="Tuple">
    @Override
    public int size() {
        return {{ desc.dim }};
    }

    @Override
    public void getInto(Tuple other) {
{%      dynmacro Public_getInto( desc, property ) %}
get{{ property.upperName }}()
{%-     enddynmacro %}
        if (other instanceof {{ desc.tupleImpName }}) {
            {{ desc.tupleImpName }} _other = ({{ desc.tupleImpName }})other;
            _other.set({{ Properties( desc, ", ", Public_getInto ) | indent(5) }});
            return;
        }
        if (other instanceof {{ desc.tupleTypeName }}) {
            {{ desc.tupleTypeName }} _other = ({{ desc.tupleTypeName }})other;
            _other.set({{ Properties( desc, ", ", Public_getInto ) | indent(5) }});
            return;
        }
        if (other instanceof {{ desc.tupleNumberName }}) {
            {{ desc.tupleNumberName }} _other = ({{ desc.tupleNumberName }})other;
            _other.set{{ desc.ctype }}({{ Properties( desc, ", ", Public_getInto ) | indent(5) }});
            return;
        }
        throw new UnsupportedOperationException();
    }

    @Override
    public void set(Tuple other) {
        if (other instanceof {{ desc.tupleTypeName }}) {
            {{ desc.tupleTypeName }} _other = ({{ desc.tupleTypeName }})other;
{%      dynmacro Public_set( desc, property ) %}
_other.get{{ property.upperName }}()
{%-     enddynmacro %}
            set({{ Properties( desc, ", ", Public_set ) | indent(5) }});
            return;
        }
        if (other instanceof {{ desc.tupleNumberName }}) {
            {{ desc.tupleNumberName }} _other = ({{ desc.tupleNumberName }})other;
            _other.getInto(this);
            return;
        }
        throw new UnsupportedOperationException();
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the implementation of Tuple_Type of the tuple.
 #}
{%  macro Tuple_Type( desc ) %}
//<editor-fold defaultstate="collapsed" desc="{{ desc.tupleTypeName }}">
    /**
     * This method gets the component {@code index}.
     *
     * @param index Index of the component.
     * @return Value of the component.
     */
    @Override
    public {{ desc.type }} getAt(int index) {
        switch(index) {
{%      for property in desc.properties %}
            case {{ property.index }}:
                return {{ property.name }};
{%      endfor %}
        }
        throw new IndexOutOfBoundsException();
    }

    /**
     * This method sets the component {@code index}.
     *
     * @param index Index of the component.
     * @param value Value of the component.
     */
    @Override
    public void setAt(int index, {{ desc.type }} value) {
        switch(index) {
{%      for property in desc.properties %}
            case {{ property.index }}:
                {{ property.name }} = value;
                return;
{%      endfor %}
        }
        throw new IndexOutOfBoundsException();
    }
{%      for property in desc.properties %}

    /**
     * This method gets the {{ property.upperName }} component.
     *
     * @return Value of the {{ property.upperName }} component.
     */
    @Override
    public {{ property.type }} get{{ property.upperName }}() {
        return {{ property.name }};
    }

    /**
     * This method sets the {{ property.upperName }} component.
     *
     * @param value Value of the {{ property.upperName }} component.
     */
    @Override
    public void set{{ property.upperName }}({{ property.type }} value) {
        {{ property.name }} = value;
    }
{%      endfor %}

    /**
     * This method sets all the components.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the {{ property.upperName }} component.
{%      endfor %}
     */
    @Override
    public void set({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      for property in desc.properties %}
        this.{{ property.name }} = {{ property.name }};
{%      endfor %}
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the implementation of Tuple_Number of the tuple.
 #}
{%  macro Tuple_Number( desc ) %}
//<editor-fold defaultstate="collapsed" desc="{{ desc.tupleNumberName }}">
    /**
     * This method sets the values of {@code this} tuple into {@code buff}.
     *
     * @param buff Where to put the values.
     */
    @Override
    public void getInto({{ desc.tupleNumberName }} buff) {
        buff.set{{ desc.ctype }}({{ NameCommaSeparated(desc) }});
    }

    {{ SetterImp( desc, "double", "Double" ) }}

    {{ SetterImp( desc, "float", "Float" ) }}

    {{ SetterImp( desc, "long", "Long" ) }}

    {{ SetterImp( desc, "int", "Integer" ) }}

    {{ SetterImp( desc, "short", "Short" ) }}

    {{ SetterImp( desc, "byte", "Byte" ) }}
//</editor-fold>
{%  endmacro %}

{%  macro SetterImp( desc, type, ctype ) %}
    /**
     * This method sets the value all components as {{ type }} values.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the {{ property.upperName }} component.
{%      endfor %}
     */
    @Override
    public void set{{ ctype }}({{ FixedTypeNameCommaSeparated(desc, type) }}) {
{%      for property in desc.properties %}
        this.{{ property.name }} = ({{ property.type }}){{ property.name }};
{%      endfor %}
    }
{%  endmacro %}

{#
 # This macro renders the private items of the matrix.
 #}
{%  macro Private( desc ) %}
//<editor-fold defaultstate="collapsed" desc="private">
    private boolean epsilonEquals({{ TypeNameCommaSeparated( desc ) | indent(2) }}, double epsilon) {
{%      dynmacro Private_anonymous1( desc, property ) %}
DoubleUtils.epsilonEquals(get{{ property.upperName }}(), {{ property.name }}, epsilon)
{%-     enddynmacro %}
        return {{ Properties( desc, " && ", Private_anonymous1 ) | indent(3) }};
    }

    private boolean equals({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      dynmacro Private_anonymous2( desc, property ) %}
get{{ property.upperName }}() == {{ property.name }}
{%-     enddynmacro %}
        return {{ Properties( desc, " && ", Private_anonymous2 ) | indent(3) }};
    }

    private static String getFormat() {
        if (format == null) {
{%      if desc.integral %}
            String f = "d";    // Integer
{%      else %}
            String f = ".3f";  // Floating point number with 2 decimal places
{%      endif %}
            String b = "%1$s"; // Begin      [
            String s = "%2$s"; // Separation ,
            String e = "%3$s"; // End        ]

            StringBuilder buff = new StringBuilder();
            int k = 4;
            buff.append(b);
{%      dynmacro Private_getFormat( desc, property ) %}
buff.append("%").append(k++).append("$").append(f);
{%-     enddynmacro %}
            {{ Properties( desc, "%nbuff.append(s);%n", Private_getFormat ) | indent(3) }}

            buff.append(e);
            format = buff.toString();
        }
        return format;
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the constructors of the tuple.
 #}
{%  macro Constructors( desc ) %}
    /**
     * Empty constructor.
     */
    public {{ desc.tupleImpName }}() {
{%      dynmacro Constructors_anonymous1( desc, property ) %}
({{ desc.type }})0
{%-     enddynmacro %}
        this({{ Properties( desc, ", ", Constructors_anonymous1 ) | indent(3) }});
    }

    /**
     * This constructor sets the components of this tuple.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the component {{ property.upperName }}.
{%      endfor %}
     */
    public {{ desc.tupleImpName }}({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
{%      for property in desc.properties %}
        this.{{ property.name }} = {{ property.name }};
{%      endfor %}
    }
{% endmacro %}

{#
 # This macro renders the overwriting of Object methods of the tuple.
 #}
{%  macro Object( desc ) %}
//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public String toString() {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
{%      dynmacro Object_toString( desc, property ) %}
get{{ property.upperName }}()
{%-     enddynmacro %}
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
            {{ Properties( desc, ",", Object_toString ) | indent(3)  }});
    }

    public boolean equals({{ desc.tupleImpName }} other) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }

{%      dynmacro Object_equals( desc, property ) %}
other.get{{ property.upperName }}()
{%-     enddynmacro %}
        return this.equals({{ Properties( desc, ", ", Object_equals ) | indent(3)  }});
    }

    @Override
    public boolean equals(Object other) {
        return ((other instanceof {{ desc.tupleImpName }}) && this.equals(({{ desc.tupleImpName }}) other));
    }

    @Override
    public int hashCode() {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
{%      for property in desc.properties %}
        hash = prime * hash + {{ desc.ctype }}.hashCode(get{{ property.upperName }}());
{%      endfor %}
        return hash;
    }

    @Override
    public {{ desc.tupleImpName }} clone() {
        try {
            {{ desc.tupleImpName }} copy = ({{ desc.tupleImpName }})super.clone();
            return copy;
        } catch (CloneNotSupportedException ex) {
            throw new Error(ex);
        }
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the implementation of EpsilonEquatable of the tuple.
 #}
{%  macro EpsilonEquatable( desc ) %}
//<editor-fold defaultstate="collapsed" desc="EpsilonEquatable<Tuple>">
    @Override
    public boolean epsilonEquals(Tuple other) {
        return epsilonEquals(other, EPSILON);
    }

    @Override
    public boolean epsilonEquals(Tuple other, double epsilon) {
        if (other == this) {
            return true;
        }
        if (!(other instanceof {{ desc.tupleImpName }})) {
            return false;
        }
        {{ desc.tupleImpName }} _other = ({{ desc.tupleImpName }})other;
{%      dynmacro EpsilonEquatable_anonymous1( desc, property ) %}
_other.get{{ property.upperName }}()
{%-     enddynmacro %}
        return epsilonEquals({{ Properties( desc, ",%n", EpsilonEquatable_anonymous1 ) | indent(4) }}, epsilon);
    }
//</editor-fold>
{%  endmacro %}
