{#
 # This template renders a tupe.
 #}
{%  import "pebble/Tuple.Core.pebble" %}
{%  import "pebble/PointImp.Math.pebble" %}
{%  import "pebble/PointImp.MathAndSet.pebble" %}
/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package {{ desc._package }};

import essence.geometry.core.Tuple;
import essence.geometry.core.{{ desc.vectorName }};
import essence.geometry.core.{{ desc.pointName }};

/**
 * Basic implementation of a {{ desc.dim }} dimension vector.
 */
public class {{ desc.pointImpName }} extends {{ desc.tupleImpName }} implements {{ desc.pointName }} {

{{ Constructors( desc ) }}

{{ Public( desc ) }}

{{ Math( desc ) }}

{{ MathAndSet( desc ) }}

{{ Object( desc ) }}

{{ Private( desc ) }}
}

{#
 # This macro renders the constructors of the point.
 #}
{%  macro Constructors( desc ) %}
    /**
     * Empty constructor.
     */
    public {{ desc.pointImpName }}() {
    }

    /**
     * This constructor sets the components of this point.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the component {{ property.upperName }}.
{%      endfor %}
     */
    public {{ desc.pointImpName }}({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
        super({{ NameCommaSeparated( desc ) | indent(2) }});
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public {{ desc.pointImpName }}(Tuple tuple) {
        tuple.getInto(this);
    }
{% endmacro %}

{#
 # This macro renders the private items of the point.
 #}
{%  macro Private( desc ) %}
//<editor-fold defaultstate="collapsed" desc="private">
    private static {{ desc.type }} square({{ desc.type }} v) {
        return v*v;
    }
//</editor-fold>
{% endmacro %}

{#
 # This macro renders the public items of the point.
 #}
{%  macro Public( desc ) %}
    /**
     * Zero point.
     *
     * @return Point zero.
     */
    public static final {{ desc.pointImpName }} getZero() {
{%      dynmacro Public_anonymous1( desc, property ) %}
({{ desc.type }})0
{%-     enddynmacro %}
        return new {{ desc.pointImpName }}({{ Properties( desc, ", ", Public_anonymous1 ) }});
    }

    /**
     * One point.
     *
     * @return Point one.
     */
    public static final {{ desc.pointImpName }} getOne() {
{%      dynmacro Public_anonymous2( desc, property ) %}
({{ desc.type }})1
{%-     enddynmacro %}
        return new {{ desc.pointImpName }}({{ Properties( desc, ", ", Public_anonymous2 ) }});
    }
{% endmacro %}

{#
 # This macro renders the overwriting of Object methods of the tuple.
 #}
{%  macro Object( desc ) %}
//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public {{ desc.pointImpName }} clone() {
        return ({{ desc.pointImpName }})super.clone();
    }
//</editor-fold>
{%  endmacro %}
