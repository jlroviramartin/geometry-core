{%  extends "pebble/Base.pebble" %}

{#
 # This template renders a tupe.
 #}

{%  import "pebble/Tuple.Core.pebble" %}
{%  import "pebble/PointImp.Math.pebble" %}
{%  import "pebble/PointImp.MathAndSet.pebble" %}

{%  block package %}{{ desc._package }}{% endblock %}

{%  block import %}
import essence.geometry.core.Tuple;
import essence.geometry.core.{{ desc.vectorName }};
import essence.geometry.core.{{ desc.pointName }};
{%  endblock %}

{%  block content %}
/**
 * Basic implementation of a {{ desc.dim }} dimension vector.
 */
public class {{ desc.pointImpName }} extends {{ desc.tupleImpName }} implements {{ desc.pointName }} {

    {{ Constructors( desc ) }}

    {{ Public( desc ) }}

    {{ Math( desc ) }}

    {{ MathAndSet( desc ) }}

    {{ Object( desc ) }}

    {{ Private( desc ) }}
}
{%  endblock %}

{#
 # This macro renders the constructors of the point.
 #}
{%  macro Constructors( desc ) %}
    /**
     * Empty constructor.
     */
    public {{ desc.pointImpName }}() {
    }

    /**
     * This constructor sets the components of this point.
     *
{%      for property in desc.properties %}
     * @param {{ property.name }} Value of the component {{ property.upperName }}.
{%      endfor %}
     */
    public {{ desc.pointImpName }}({{ TypeNameCommaSeparated( desc ) | indent(2) }}) {
        super({{ NameCommaSeparated( desc ) | indent(2) }});
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public {{ desc.pointImpName }}(Tuple tuple) {
        tuple.getInto(this);
    }
{%  endmacro %}

{#
 # This macro renders the private items of the point.
 #}
{%  macro Private( desc ) %}
//<editor-fold defaultstate="collapsed" desc="private">
    private static {{ desc.type }} square({{ desc.type }} v) {
        return v*v;
    }
//</editor-fold>
{%  endmacro %}

{#
 # This macro renders the public items of the point.
 #}
{%  macro Public( desc ) %}
    /**
     * Zero point.
     *
     * @return Point zero.
     */
    public static final {{ desc.pointImpName }} getZero() {
{%      dynmacro Public_anonymous1( desc, property ) %}
({{ desc.type }})0
{%-     enddynmacro %}
        return new {{ desc.pointImpName }}({{ Properties( desc, ", ", Public_anonymous1 ) }});
    }

    /**
     * One point.
     *
     * @return Point one.
     */
    public static final {{ desc.pointImpName }} getOne() {
{%      dynmacro Public_anonymous2( desc, property ) %}
({{ desc.type }})1
{%-     enddynmacro %}
        return new {{ desc.pointImpName }}({{ Properties( desc, ", ", Public_anonymous2 ) }});
    }
{%  endmacro %}

{#
 # This macro renders the overwriting of Object methods of the tuple.
 #}
{%  macro Object( desc ) %}
//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public {{ desc.pointImpName }} clone() {
        return ({{ desc.pointImpName }})super.clone();
    }
//</editor-fold>
{%  endmacro %}
