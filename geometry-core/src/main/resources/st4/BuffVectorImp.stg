delimiters "$", "$"

import "VectorImp.stg"

BuffVectorImp(desc) ::= <<
package $desc._package$;

import $desc.corePackage$.Tuple$desc.dim$;
import $desc.corePackage$.Vector$desc.dim$;
import $desc.corePackage$.BuffVector$desc.dim$;

/**
 * Basic implementation of {@code BuffVector$desc.dim$\}.
 */
public class BuffVector$desc.dim$$desc.suffix$ extends BuffTuple$desc.dim$$desc.suffix$ implements BuffVector$desc.dim$ {

$VectorImp_Constructors(desc, {BuffVector$desc.dim$$desc.suffix$})$

$VectorImp_Private(desc)$

$BuffVectorImp_Vector(desc)$

$VectorImp_Vector(desc)$
}
>>

BuffVectorImp_Vector(desc) ::= <<
//<editor-fold defaultstate="collapsed" desc="BuffVector$desc.dim$">
    @Override
    public BuffVector$desc.dim$$desc.suffix$ setUnit() {
        double len = getLength();
        if (essence.util.math.doubles.MathUtils.epsilonZero(len)) {
            setZero();
            return this;
        }
        return divAndSet(len);
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ addAndSet(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperatorAndSet(desc, "-", "", "_other.")$
    }

    public BuffVector$desc.dim$$desc.suffix$ addAndSet(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperatorAndSet(desc, "+", "", "other.")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ subAndSet(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperatorAndSet(desc, "-", "", "_other.")$
    }

    public BuffVector$desc.dim$$desc.suffix$ subAndSet(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperatorAndSet(desc, "-", "", "other.")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ simpleMulAndSet(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperatorAndSet(desc, "*", "", "_other.")$
    }

    public BuffVector$desc.dim$$desc.suffix$ simpleMulAndSet(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperatorAndSet(desc, "*", "", "other.")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ simpleDivAndSet(Vector$desc.dim$ other) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $BinaryOperatorAndSet(desc, "/", "", "_other.")$
    }

    public BuffVector$desc.dim$$desc.suffix$ simpleDivAndSet(Vector$desc.dim$$desc.suffix$ other) {
        $BinaryOperatorAndSet(desc, "/", "", "other.")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ mulAndSet(double v) {
        $BinaryOperatorScalarAndSet(desc, "*", "", "v")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ divAndSet(double v) {
        $BinaryOperatorScalarAndSet(desc, "/", "", "v")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ negAndSet() {
        $UnaryOperatorAndSet(desc, "-", "")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ absAndSet() {
        $UnaryFunctionAndSet(desc, "Math.abs", "")$
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ lerpAndSet(Vector$desc.dim$ other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    public BuffVector$desc.dim$$desc.suffix$ lerpAndSet(Vector$desc.dim$$desc.suffix$ other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    @Override
    public BuffVector$desc.dim$$desc.suffix$ linealAndSet(Vector$desc.dim$ other, double alpha, double beta) {
        Tuple$desc.dim$_$desc.ctype$ _other = toTuple(other);

        $LinealAndSet(desc, "", "_other.")$
    }

    public BuffVector$desc.dim$$desc.suffix$ linealAndSet(Vector$desc.dim$$desc.suffix$ other, double alpha, double beta) {
        $LinealAndSet(desc, "", "other.")$
    }
//</editor-fold>
>>
