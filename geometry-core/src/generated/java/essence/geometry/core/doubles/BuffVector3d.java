/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.doubles;

import essence.geometry.core.Tuple;
import essence.geometry.core.TupleUtils;
import essence.geometry.core.Vector3;
import essence.geometry.core.BuffVector3;
import essence.geometry.core.DoubleUtils;
import essence.util.math.ArithmeticError;

import static essence.geometry.core.DoubleUtils.EPSILON;

/**
 * Basic implementation of a 3 dimension vector.
 */
public class BuffVector3d extends BuffTuple3d implements BuffVector3 {

    /**
     * Empty constructor.
     */
    public BuffVector3d() {
    }

    /**
     * This constructor sets the components of this vector.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     */
    public BuffVector3d(double x, double y, double z) {
        super(x, y, z);
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public BuffVector3d(Tuple tuple) {
        super(tuple);
    }

    /**
     * Zero vector.
     *
     * @return Vector zero.
     */
    public static final BuffVector3d getZero() {
        return new BuffVector3d((double)0, (double)0, (double)0);
    }

    /**
     * One vector.
     *
     * @return Vector one.
     */
    public static final BuffVector3d getOne() {
        return new BuffVector3d((double)1, (double)1, (double)1);
    }

    /**
     * Unit vector: X.
     *
     * @return Vector unit.
     */
    public static final BuffVector3d getUX() {
        return getUnit(0);
    }

    /**
     * Unit vector: Y.
     *
     * @return Vector unit.
     */
    public static final BuffVector3d getUY() {
        return getUnit(1);
    }

    /**
     * Unit vector: Z.
     *
     * @return Vector unit.
     */
    public static final BuffVector3d getUZ() {
        return getUnit(2);
    }

    public BuffVector3d addAndSet(BuffVector3d other) {
        set((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
        return this;
    }

    public BuffVector3d subAndSet(BuffVector3d other) {
        set((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
        return this;
    }

    public BuffVector3d simpleMulAndSet(BuffVector3d other) {
        set((double)(getX() * other.getX()), (double)(getY() * other.getY()), (double)(getZ() * other.getZ()));
        return this;
    }

    public BuffVector3d simpleDivAndSet(BuffVector3d other) {
        set((double)(getX() / other.getX()), (double)(getY() / other.getY()), (double)(getZ() / other.getZ()));
        return this;
    }

    public BuffVector3d lerpAndSet(BuffVector3d other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    public BuffVector3d linealAndSet(BuffVector3d other, double alpha, double beta) {
        set((double)(alpha * getX() + beta * other.getX()),
            (double)(alpha * getY() + beta * other.getY()),
            (double)(alpha * getZ() + beta * other.getZ()));
        return this;
    }

    public BuffVector3d crossAndSet(BuffVector3d other) {
        set((getY() * other.getZ()) - (getZ() * other.getY()),
            (getZ() * other.getX()) - (getX() * other.getZ()),
            (getX() * other.getY()) - (getY() * other.getX()));
        return this;
    }

    public BuffVector3d vectorProjectionAndSet(BuffVector3d where) {
        double r = dot(where) / where.getLengthCuad();
        set((double)(where.getX() * r), (double)(where.getY() * r), (double)(where.getZ() * r));
        return this;

        //double r = dot(where) / where.getLengthCuad();
        //set(where);
        //mulAndSet(r);
        //return this;
    }

    public BuffVector3d add(BuffVector3d other) {
        return new BuffVector3d((double)(getX() + other.getX()), (double)(getY() + other.getY()), (double)(getZ() + other.getZ()));
    }

    public BuffVector3d sub(BuffVector3d other) {
        return new BuffVector3d((double)(getX() - other.getX()), (double)(getY() - other.getY()), (double)(getZ() - other.getZ()));
    }

    public BuffVector3d simpleMul(BuffVector3d other) {
        return new BuffVector3d((double)(getX() * other.getX()), (double)(getY() * other.getY()), (double)(getZ() * other.getZ()));
    }

    public BuffVector3d simpleDiv(BuffVector3d other) {
        return new BuffVector3d((double)(getX() / other.getX()), (double)(getY() / other.getY()), (double)(getZ() / other.getZ()));
    }

    public BuffVector3d lerp(BuffVector3d other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(BuffVector3d other, BuffVector3d vLerp) {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double x2 = vLerp.getX() - getX();
        double y2 = vLerp.getY() - getY();
        double z2 = vLerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    public BuffVector3d lineal(BuffVector3d other, double alpha, double beta) {
        return new BuffVector3d((double)(alpha * getX() + beta * other.getX()),
                                (double)(alpha * getY() + beta * other.getY()),
                                (double)(alpha * getZ() + beta * other.getZ()));
    }

    public double dot(BuffVector3d other) {
        return getX() * other.getX() + getY() * other.getY() + getZ() * other.getZ();
    }

    public BuffVector3d cross(BuffVector3d other) {
        return new BuffVector3d((getY() * other.getZ()) - (getZ() * other.getY()),
                                (getZ() * other.getX()) - (getX() * other.getZ()),
                                (getX() * other.getY()) - (getY() * other.getX()));
    }

    public BuffVector3d vectorProjection(BuffVector3d where) {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }

//<editor-fold defaultstate="collapsed" desc="BuffVector3">
    @Override
    public BuffVector3d setZero() {
        set(0, 0, 0);
        return this;
    }

    @Override
    public BuffVector3d setUnit() {
        double len = getLength();
        if (DoubleUtils.epsilonZero(len)) {
            setZero();
        } else {
            divAndSet(len);
        }
        return this;
    }

    @Override
    public BuffVector3d addAndSet(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((double)(getX() + _other.getX()), (double)(getY() + _other.getY()), (double)(getZ() + _other.getZ()));
        return this;
    }

    @Override
    public BuffVector3d subAndSet(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((double)(getX() - _other.getX()), (double)(getY() - _other.getY()), (double)(getZ() - _other.getZ()));
        return this;
    }

    @Override
    public BuffVector3d simpleMulAndSet(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((double)(getX() * _other.getX()), (double)(getY() * _other.getY()), (double)(getZ() * _other.getZ()));
        return this;
    }

    @Override
    public BuffVector3d simpleDivAndSet(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((double)(getX() / _other.getX()), (double)(getY() / _other.getY()), (double)(getZ() / _other.getZ()));
        return this;
    }

    @Override
    public BuffVector3d mulAndSet(double v) {
        set((double)(getX() * v), (double)(getY() * v), (double)(getZ() * v));
        return this;
    }

    @Override
    public BuffVector3d divAndSet(double v) {
        set((double)(getX() / v), (double)(getY() / v), (double)(getZ() / v));
        return this;
    }

    @Override
    public BuffVector3d negAndSet() {
        set((double)(- getX()), (double)(- getY()), (double)(- getZ()));
        return this;
    }

    @Override
    public BuffVector3d absAndSet() {
        set((double)Math.abs(getX()), (double)Math.abs(getY()), (double)Math.abs(getZ()));
        return this;
    }

    @Override
    public BuffVector3d lerpAndSet(Vector3 other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    @Override
    public BuffVector3d linealAndSet(Vector3 other, double alpha, double beta) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((double)(alpha * getX() + beta * _other.getX()),
            (double)(alpha * getY() + beta * _other.getY()),
            (double)(alpha * getZ() + beta * _other.getZ()));
        return this;
    }

    @Override
    public BuffVector3d crossAndSet(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        set((getY() * _other.getZ()) - (getZ() * _other.getY()),
            (getZ() * _other.getX()) - (getX() * _other.getZ()),
            (getX() * _other.getY()) - (getY() * _other.getX()));
        return this;
    }

    @Override
    public BuffVector3d vectorProjectionAndSet(Vector3 where) {
        Tuple3_Double _where = TupleUtils.toTuple3_Double(where);

        double r = dot(where) / where.getLengthCuad();
        set((double)(_where.getX() * r), (double)(_where.getY() * r), (double)(_where.getZ() * r));
        return this;

        //double r = dot(where) / where.getLengthCuad();
        //set(where);
        //mulAndSet(r);
        //return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Vector3">
    @Override
    public boolean isUnit() {
        return isUnit(EPSILON);
    }

    @Override
    public boolean isUnit(double epsilon) {
        return DoubleUtils.epsilonEquals(getLength(), 1, epsilon);
    }

    @Override
    public BuffVector3d getUnit() {
        double len = getLength();
        return div(len);
    }

    @Override
    public int getQuadrant() {
        int v = 0;
        int p = 1;
        if (getX() < 0) {
            v |= p;
            p <<= 1;
        }
        if (getY() < 0) {
            v |= p;
            p <<= 1;
        }
        if (getZ() < 0) {
            v |= p;
            p <<= 1;
        }
        return v;
    }

    @Override
    public double getLengthL1() {
        return Math.abs(getX())
               + Math.abs(getY())
               + Math.abs(getZ());
    }

    @Override
    public BuffVector3d add(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((double)(getX() + _other.getX()), (double)(getY() + _other.getY()), (double)(getZ() + _other.getZ()));
    }

    @Override
    public BuffVector3d sub(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((double)(getX() - _other.getX()), (double)(getY() - _other.getY()), (double)(getZ() - _other.getZ()));
    }

    @Override
    public BuffVector3d simpleMul(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((double)(getX() * _other.getX()), (double)(getY() * _other.getY()), (double)(getZ() * _other.getZ()));
    }

    @Override
    public BuffVector3d simpleDiv(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((double)(getX() / _other.getX()), (double)(getY() / _other.getY()), (double)(getZ() / _other.getZ()));
    }

    @Override
    public BuffVector3d mul(double v) {
        return new BuffVector3d((double)(getX() * v), (double)(getY() * v), (double)(getZ() * v));
    }

    @Override
    public BuffVector3d div(double v) {
        if (DoubleUtils.epsilonZero(v)) {
            throw new ArithmeticError("divided by zero");
        }
        return new BuffVector3d((double)(getX() / v), (double)(getY() / v), (double)(getZ() / v));
    }

    @Override
    public BuffVector3d neg() {
        return new BuffVector3d((double)(- getX()), (double)(- getY()), (double)(- getZ()));
    }

    @Override
    public BuffVector3d abs() {
        return new BuffVector3d((double)Math.abs(getX()), (double)Math.abs(getY()), (double)Math.abs(getZ()));
    }

    @Override
    public BuffVector3d lerp(Vector3 other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    @Override
    public double invLerp(Vector3 other, Vector3 vLerp) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);
        Tuple3_Double _vLerp = TupleUtils.toTuple3_Double(vLerp);

        double x1 = _other.getX() - getX();
        double y1 = _other.getY() - getY();
        double z1 = _other.getZ() - getZ();
        double x2 = _vLerp.getX() - getX();
        double y2 = _vLerp.getY() - getY();
        double z2 = _vLerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    @Override
    public BuffVector3d lineal(Vector3 other, double alpha, double beta) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((double)(alpha * getX() + beta * _other.getX()),
                                (double)(alpha * getY() + beta * _other.getY()),
                                (double)(alpha * getZ() + beta * _other.getZ()));
    }

    @Override
    public double dot(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return getX() * _other.getX() + getY() * _other.getY() + getZ() * _other.getZ();
    }

    @Override
    public BuffVector3d cross(Vector3 other) {
        Tuple3_Double _other = TupleUtils.toTuple3_Double(other);

        return new BuffVector3d((getY() * _other.getZ()) - (getZ() * _other.getY()),
                                (getZ() * _other.getX()) - (getX() * _other.getZ()),
                                (getX() * _other.getY()) - (getY() * _other.getX()));
    }

    @Override
    public Vector3 vectorProjection(Vector3 where) {
        double r = dot(where) / where.getLengthCuad();
        return where.mul(r);
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public BuffVector3d clone() throws CloneNotSupportedException {
        return (BuffVector3d)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private static BuffVector3d getUnit(int index) {
        return new BuffVector3d((double)((index == 0) ? 1 : 0),
                                (double)((index == 1) ? 1 : 0),
                                (double)((index == 2) ? 1 : 0));
    }
//</editor-fold>
}
