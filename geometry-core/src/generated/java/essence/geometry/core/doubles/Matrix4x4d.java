/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.doubles;

import java.util.logging.Logger;
import essence.util.math.EpsilonEquatable;
import essence.geometry.core.DoubleUtils;
import essence.geometry.core.SingularMatrixException;
import essence.geometry.core.Tuple;
import essence.geometry.core.TupleUtils;
import essence.geometry.core.Vector4;
import essence.geometry.core.BuffVector4;
import essence.geometry.core.Vector3;
import essence.geometry.core.Point3;
import essence.geometry.core.BuffVector3;
import essence.geometry.core.BuffPoint3;
import essence.geometry.core.VectorFormatInfo;
import essence.geometry.core.Matrix4x4;
import essence.geometry.core.BuffMatrix4x4;

import static essence.geometry.core.DoubleUtils.EPSILON;

/**
 * Basic implementation of a 4x4 matrix.
 */
public class Matrix4x4d implements Cloneable, EpsilonEquatable<Matrix4x4d>, BuffMatrix4x4 {
//<editor-fold defaultstate="collapsed" desc="fields">
    /** M00 component. */
    private double m00;
    /** M01 component. */
    private double m01;
    /** M02 component. */
    private double m02;
    /** M03 component. */
    private double m03;
    /** M10 component. */
    private double m10;
    /** M11 component. */
    private double m11;
    /** M12 component. */
    private double m12;
    /** M13 component. */
    private double m13;
    /** M20 component. */
    private double m20;
    /** M21 component. */
    private double m21;
    /** M22 component. */
    private double m22;
    /** M23 component. */
    private double m23;
    /** M30 component. */
    private double m30;
    /** M31 component. */
    private double m31;
    /** M32 component. */
    private double m32;
    /** M33 component. */
    private double m33;
    private static final Logger LOG = Logger.getLogger(Matrix4x4d.class.getName());
    private static String format;
//</editor-fold>

    /**
     * Empty constructor.
     */
    public Matrix4x4d() {
        this(0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0);
    }

    /**
     * This constructor sets the properties of this matrix.
     *
     * @param m00 Value of the property M00.
     * @param m01 Value of the property M01.
     * @param m02 Value of the property M02.
     * @param m03 Value of the property M03.
     * @param m10 Value of the property M10.
     * @param m11 Value of the property M11.
     * @param m12 Value of the property M12.
     * @param m13 Value of the property M13.
     * @param m20 Value of the property M20.
     * @param m21 Value of the property M21.
     * @param m22 Value of the property M22.
     * @param m23 Value of the property M23.
     * @param m30 Value of the property M30.
     * @param m31 Value of the property M31.
     * @param m32 Value of the property M32.
     * @param m33 Value of the property M33.
     */
    public Matrix4x4d(double m00, double m01, double m02, double m03,
                      double m10, double m11, double m12, double m13,
                      double m20, double m21, double m22, double m23,
                      double m30, double m31, double m32, double m33) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }

    /*
     * This method gets an identity matrix.
     *
     * return Identity matrix.
     */
    public static Matrix4x4d getIdentity() {
        return new Matrix4x4d(1, 0, 0, 0,
                              0, 1, 0, 0,
                              0, 0, 1, 0,
                              0, 0, 0, 1);
    }

    protected static Tuple3_Double toTupleLow(Tuple other) {
        if (other instanceof Tuple3_Double) {
            return (Tuple3_Double)other;
        }
        return new Tuple3d(other);
    }

//<editor-fold defaultstate="collapsed" desc="accessors">
    @Override
    public final int sizeRows() {
        return 4;
    }

    @Override
    public final int sizeCols() {
        return 4;
    }

    @Override
    public final boolean isSquared() {
        return true;
    }

    @Override
    public final double get(int r, int c) {
        switch(r) {
        case 0:
            switch(c) {
            case 0:
                return m00;
            case 1:
                return m01;
            case 2:
                return m02;
            case 3:
                return m03;
            }
        case 1:
            switch(c) {
            case 0:
                return m10;
            case 1:
                return m11;
            case 2:
                return m12;
            case 3:
                return m13;
            }
        case 2:
            switch(c) {
            case 0:
                return m20;
            case 1:
                return m21;
            case 2:
                return m22;
            case 3:
                return m23;
            }
        case 3:
            switch(c) {
            case 0:
                return m30;
            case 1:
                return m31;
            case 2:
                return m32;
            case 3:
                return m33;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    @Override
    public final double getM00() {
        return m00;
    }

    @Override
    public final double getM01() {
        return m01;
    }

    @Override
    public final double getM02() {
        return m02;
    }

    @Override
    public final double getM03() {
        return m03;
    }

    @Override
    public final double getM10() {
        return m10;
    }

    @Override
    public final double getM11() {
        return m11;
    }

    @Override
    public final double getM12() {
        return m12;
    }

    @Override
    public final double getM13() {
        return m13;
    }

    @Override
    public final double getM20() {
        return m20;
    }

    @Override
    public final double getM21() {
        return m21;
    }

    @Override
    public final double getM22() {
        return m22;
    }

    @Override
    public final double getM23() {
        return m23;
    }

    @Override
    public final double getM30() {
        return m30;
    }

    @Override
    public final double getM31() {
        return m31;
    }

    @Override
    public final double getM32() {
        return m32;
    }

    @Override
    public final double getM33() {
        return m33;
    }

    @Override
    public final void set(int r, int c, double value) {
        switch(r) {
        case 0:
            switch(c) {
            case 0:
                m00 = value;
                return;
            case 1:
                m01 = value;
                return;
            case 2:
                m02 = value;
                return;
            case 3:
                m03 = value;
                return;
            }
        case 1:
            switch(c) {
            case 0:
                m10 = value;
                return;
            case 1:
                m11 = value;
                return;
            case 2:
                m12 = value;
                return;
            case 3:
                m13 = value;
                return;
            }
        case 2:
            switch(c) {
            case 0:
                m20 = value;
                return;
            case 1:
                m21 = value;
                return;
            case 2:
                m22 = value;
                return;
            case 3:
                m23 = value;
                return;
            }
        case 3:
            switch(c) {
            case 0:
                m30 = value;
                return;
            case 1:
                m31 = value;
                return;
            case 2:
                m32 = value;
                return;
            case 3:
                m33 = value;
                return;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    @Override
    public final void setM00(double value) {
        m00 = value;
    }

    @Override
    public final void setM01(double value) {
        m01 = value;
    }

    @Override
    public final void setM02(double value) {
        m02 = value;
    }

    @Override
    public final void setM03(double value) {
        m03 = value;
    }

    @Override
    public final void setM10(double value) {
        m10 = value;
    }

    @Override
    public final void setM11(double value) {
        m11 = value;
    }

    @Override
    public final void setM12(double value) {
        m12 = value;
    }

    @Override
    public final void setM13(double value) {
        m13 = value;
    }

    @Override
    public final void setM20(double value) {
        m20 = value;
    }

    @Override
    public final void setM21(double value) {
        m21 = value;
    }

    @Override
    public final void setM22(double value) {
        m22 = value;
    }

    @Override
    public final void setM23(double value) {
        m23 = value;
    }

    @Override
    public final void setM30(double value) {
        m30 = value;
    }

    @Override
    public final void setM31(double value) {
        m31 = value;
    }

    @Override
    public final void setM32(double value) {
        m32 = value;
    }

    @Override
    public final void setM33(double value) {
        m33 = value;
    }

    @Override
    public final void set(double m00, double m01, double m02, double m03,
                          double m10, double m11, double m12, double m13,
                          double m20, double m21, double m22, double m23,
                          double m30, double m31, double m32, double m33) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Transforms">
    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector4d mul(Vector4 v) {
        Tuple4_Double _v = TupleUtils.toTuple4_Double(v);

        return new Vector4d(getM00() * _v.getX() + getM01() * _v.getY() + getM02() * _v.getZ() + getM03() * _v.getW(),
                            getM10() * _v.getX() + getM11() * _v.getY() + getM12() * _v.getZ() + getM13() * _v.getW(),
                            getM20() * _v.getX() + getM21() * _v.getY() + getM22() * _v.getZ() + getM23() * _v.getW(),
                            getM30() * _v.getX() + getM31() * _v.getY() + getM32() * _v.getZ() + getM33() * _v.getW());
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector4d mul(Vector4d v) {
        return new Vector4d(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
                            getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
                            getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
                            getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector4d premul(Vector4 v) {
        Tuple4_Double _v = TupleUtils.toTuple4_Double(v);

        return new Vector4d(_v.getX() * getM00() + _v.getY() * getM10() + _v.getZ() * getM20() + _v.getW() * getM30(),
                            _v.getX() * getM01() + _v.getY() * getM11() + _v.getZ() * getM21() + _v.getW() * getM31(),
                            _v.getX() * getM02() + _v.getY() * getM12() + _v.getZ() * getM22() + _v.getW() * getM32(),
                            _v.getX() * getM03() + _v.getY() * getM13() + _v.getZ() * getM23() + _v.getW() * getM33());
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector4d premul(Vector4d v) {
        return new Vector4d(v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
                            v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
                            v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
                            v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector3d mul(Vector3 v) {
        Tuple3_Double _v = toTupleLow(v);

        double x = getM00() * _v.getX() + getM01() * _v.getY() + getM02() * _v.getZ();
        double y = getM10() * _v.getX() + getM11() * _v.getY() + getM12() * _v.getZ();
        double z = getM20() * _v.getX() + getM21() * _v.getY() + getM22() * _v.getZ();
        return new Vector3d(x, y, z);
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector3d mul(Vector3d v) {
        double x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        double y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        double z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        return new Vector3d(x, y, z);
    }

    /**
     * This method multiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public Point3d mul(Point3 p) {
        Tuple3_Double _p = toTupleLow(p);

        double x = getM00() * _p.getX() + getM01() * _p.getY() + getM02() * _p.getZ() + getM03();
        double y = getM10() * _p.getX() + getM11() * _p.getY() + getM12() * _p.getZ() + getM13();
        double z = getM20() * _p.getX() + getM21() * _p.getY() + getM22() * _p.getZ() + getM23();
        double w = getM30() * _p.getX() + getM31() * _p.getY() + getM32() * _p.getZ() + getM33();
        return new Point3d(x / w, y / w, z / w);
    }

    /**
     * This method multiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public Point3d mul(Point3d p) {
        double x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        double y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        double z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        double w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        return new Point3d(x / w, y / w, z / w);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector3d premul(Vector3 v) {
        Tuple3_Double _v = toTupleLow(v);

        double x = _v.getX() * getM00() + _v.getY() * getM10() + _v.getZ() * getM20();
        double y = _v.getX() * getM01() + _v.getY() * getM11() + _v.getZ() * getM21();
        double z = _v.getX() * getM02() + _v.getY() * getM12() + _v.getZ() * getM22();
        return new Vector3d(x, y, z);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public Vector3d premul(Vector3d v) {
        double x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        double y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        double z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        return new Vector3d(x, y, z);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public Point3d premul(Point3 p) {
        Tuple3_Double _p = toTupleLow(p);

        double x = _p.getX() * getM00() + _p.getY() * getM10() + _p.getZ() * getM20() + getM30();
        double y = _p.getX() * getM01() + _p.getY() * getM11() + _p.getZ() * getM21() + getM31();
        double z = _p.getX() * getM02() + _p.getY() * getM12() + _p.getZ() * getM22() + getM32();
        double w = _p.getX() * getM03() + _p.getY() * getM13() + _p.getZ() * getM23() + getM33();
        return new Point3d(x / w, y / w, z / w);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public Point3d premul(Point3d p) {
        double x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        double y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        double z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        double w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        return new Point3d(x / w, y / w, z / w);
    }

    @Override
    public void mul(BuffVector4 v) {
        BuffTuple4_Double _v = TupleUtils.toBuffTuple4_Double(v);

        _v.set(getM00() * _v.getX() + getM01() * _v.getY() + getM02() * _v.getZ() + getM03() * _v.getW(),
               getM10() * _v.getX() + getM11() * _v.getY() + getM12() * _v.getZ() + getM13() * _v.getW(),
               getM20() * _v.getX() + getM21() * _v.getY() + getM22() * _v.getZ() + getM23() * _v.getW(),
               getM30() * _v.getX() + getM31() * _v.getY() + getM32() * _v.getZ() + getM33() * _v.getW());
    }

    public void mul(BuffVector4d v) {
        v.set(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
              getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
              getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
              getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    @Override
    public void premul(BuffVector4 v) {
        BuffTuple4_Double _v = TupleUtils.toBuffTuple4_Double(v);

        _v.set(_v.getX() * getM00() + _v.getY() * getM10() + _v.getZ() * getM20() + _v.getW() * getM30(),
               _v.getX() * getM01() + _v.getY() * getM11() + _v.getZ() * getM21() + _v.getW() * getM31(),
               _v.getX() * getM02() + _v.getY() * getM12() + _v.getZ() * getM22() + _v.getW() * getM32(),
               _v.getX() * getM03() + _v.getY() * getM13() + _v.getZ() * getM23() + _v.getW() * getM33());
    }

    public void premul(BuffVector4d v) {
        v.set (v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
               v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
               v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
               v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    @Override
    public void mul(BuffVector3 v) {
        BuffTuple3_Double _v = TupleUtils.toBuffTuple3_Double(v);

        double x = getM00() * _v.getX() + getM01() * _v.getY() + getM02() * _v.getZ();
        double y = getM10() * _v.getX() + getM11() * _v.getY() + getM12() * _v.getZ();
        double z = getM20() * _v.getX() + getM21() * _v.getY() + getM22() * _v.getZ();
        _v.set(x, y, z);
    }

    public void mul(BuffVector3d v) {
        double x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        double y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        double z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        v.set(x, y, z);
    }

    @Override
    public void mul(BuffPoint3 p) {
        BuffTuple3_Double _p = TupleUtils.toBuffTuple3_Double(p);

        double x = getM00() * _p.getX() + getM01() * _p.getY() + getM02() * _p.getZ() + getM03();
        double y = getM10() * _p.getX() + getM11() * _p.getY() + getM12() * _p.getZ() + getM13();
        double z = getM20() * _p.getX() + getM21() * _p.getY() + getM22() * _p.getZ() + getM23();
        double w = getM30() * _p.getX() + getM31() * _p.getY() + getM32() * _p.getZ() + getM33();
        _p.set(x / w, y / w, z / w);
    }

    public void mul(BuffPoint3d p) {
        double x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        double y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        double z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        double w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        p.set(x / w, y / w, z / w);
    }

    @Override
    public void premul(BuffVector3 v) {
        BuffTuple3_Double _v = TupleUtils.toBuffTuple3_Double(v);

        double x = _v.getX() * getM00() + _v.getY() * getM10() + _v.getZ() * getM20();
        double y = _v.getX() * getM01() + _v.getY() * getM11() + _v.getZ() * getM21();
        double z = _v.getX() * getM02() + _v.getY() * getM12() + _v.getZ() * getM22();
        _v.set(x, y, z);
    }

    public void premul(BuffVector3d v) {
        double x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        double y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        double z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        v.set(x, y, z);
    }

    @Override
    public void premul(BuffPoint3 p) {
        BuffTuple3_Double _p = TupleUtils.toBuffTuple3_Double(p);

        double x = _p.getX() * getM00() + _p.getY() * getM10() + _p.getZ() * getM20() + getM30();
        double y = _p.getX() * getM01() + _p.getY() * getM11() + _p.getZ() * getM21() + getM31();
        double z = _p.getX() * getM02() + _p.getY() * getM12() + _p.getZ() * getM22() + getM32();
        double w = _p.getX() * getM03() + _p.getY() * getM13() + _p.getZ() * getM23() + getM33();
        _p.set(x / w, y / w, z / w);
    }

    public void premul(BuffPoint3d p) {
        double x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        double y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        double z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        double w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        p.set(x / w, y / w, z / w);
    }
//</editor-fold>

    @Override
    public final boolean isValid() {
        return !isNaN() && !isInfinity();
    }

    @Override
    public final boolean isNaN() {
        return Double.isNaN(getM00()) || Double.isNaN(getM01()) || Double.isNaN(getM02()) || Double.isNaN(getM03()) ||
               Double.isNaN(getM10()) || Double.isNaN(getM11()) || Double.isNaN(getM12()) || Double.isNaN(getM13()) ||
               Double.isNaN(getM20()) || Double.isNaN(getM21()) || Double.isNaN(getM22()) || Double.isNaN(getM23()) ||
               Double.isNaN(getM30()) || Double.isNaN(getM31()) || Double.isNaN(getM32()) || Double.isNaN(getM33());
    }

    @Override
    public final boolean isInfinity() {
        return Double.isInfinite(getM00()) || Double.isInfinite(getM01()) || Double.isInfinite(getM02()) || Double.isInfinite(getM03()) ||
               Double.isInfinite(getM10()) || Double.isInfinite(getM11()) || Double.isInfinite(getM12()) || Double.isInfinite(getM13()) ||
               Double.isInfinite(getM20()) || Double.isInfinite(getM21()) || Double.isInfinite(getM22()) || Double.isInfinite(getM23()) ||
               Double.isInfinite(getM30()) || Double.isInfinite(getM31()) || Double.isInfinite(getM32()) || Double.isInfinite(getM33());
    }

    @Override
    public final boolean isZero() {
        return isZero(EPSILON);
    }

    @Override
    public final boolean isZero(double epsilon) {
        return epsilonEquals(0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0, epsilon);
    }

    @Override
    public boolean isIdentity() {
        return isIdentity(EPSILON);
    }

    @Override
    public boolean isIdentity(double epsilon) {
        return epsilonEquals(1, 0, 0, 0,
                             0, 1, 0, 0,
                             0, 0, 1, 0,
                             0, 0, 0, 1, epsilon);
    }

    @Override
    public boolean isInvertible() {
        return isInvertible(EPSILON);
    }

    @Override
    public boolean isInvertible(double epsilon) {
        return !DoubleUtils.epsilonEquals(getDeterminant(), epsilon);
    }

    @Override
    public double getDeterminant() {
        return ((getM00() * getM11() - getM01() * getM10()) * (getM22() * getM33() - getM23() * getM32())
                - (getM00() * getM12() - getM02() * getM10()) * (getM21() * getM33() - getM23() * getM31())
                + (getM00() * getM13() - getM03() * getM10()) * (getM21() * getM32() - getM22() * getM31())
                + (getM01() * getM12() - getM02() * getM11()) * (getM20() * getM33() - getM23() * getM30())
                - (getM01() * getM13() - getM03() * getM11()) * (getM20() * getM32() - getM22() * getM30())
                + (getM02() * getM13() - getM03() * getM12()) * (getM20() * getM31() - getM21() * getM30()));
    }

    @Override
    public Matrix4x4d add(Matrix4x4 other) {
        return new Matrix4x4d(getM00() + other.getM00(), getM01() + other.getM01(), getM02() + other.getM02(), getM03() + other.getM03(),
                              getM10() + other.getM10(), getM11() + other.getM11(), getM12() + other.getM12(), getM13() + other.getM13(),
                              getM20() + other.getM20(), getM21() + other.getM21(), getM22() + other.getM22(), getM23() + other.getM23(),
                              getM30() + other.getM30(), getM31() + other.getM31(), getM32() + other.getM32(), getM33() + other.getM33());
    }

    @Override
    public Matrix4x4d sub(Matrix4x4 other) {
        return new Matrix4x4d(getM00() - other.getM00(), getM01() - other.getM01(), getM02() - other.getM02(), getM03() - other.getM03(),
                              getM10() - other.getM10(), getM11() - other.getM11(), getM12() - other.getM12(), getM13() - other.getM13(),
                              getM20() - other.getM20(), getM21() - other.getM21(), getM22() - other.getM22(), getM23() - other.getM23(),
                              getM30() - other.getM30(), getM31() - other.getM31(), getM32() - other.getM32(), getM33() - other.getM33());
    }

    @Override
    public Matrix4x4d mul(double v) {
        return new Matrix4x4d((double)(getM00() * v), (double)(getM01() * v), (double)(getM02() * v), (double)(getM03() * v),
                              (double)(getM10() * v), (double)(getM11() * v), (double)(getM12() * v), (double)(getM13() * v),
                              (double)(getM20() * v), (double)(getM21() * v), (double)(getM22() * v), (double)(getM23() * v),
                              (double)(getM30() * v), (double)(getM31() * v), (double)(getM32() * v), (double)(getM33() * v));
    }

    @Override
    public Matrix4x4d div(double v) {
        return new Matrix4x4d((double)(getM00() / v), (double)(getM01() / v), (double)(getM02() / v), (double)(getM03() / v),
                              (double)(getM10() / v), (double)(getM11() / v), (double)(getM12() / v), (double)(getM13() / v),
                              (double)(getM20() / v), (double)(getM21() / v), (double)(getM22() / v), (double)(getM23() / v),
                              (double)(getM30() / v), (double)(getM31() / v), (double)(getM32() / v), (double)(getM33() / v));
    }

    @Override
    public Matrix4x4d mul(Matrix4x4 other) {
        return new Matrix4x4d(getM00() * other.getM00() + getM01() * other.getM10() + getM02() * other.getM20() + getM03() * other.getM30(),
                              getM00() * other.getM01() + getM01() * other.getM11() + getM02() * other.getM21() + getM03() * other.getM31(),
                              getM00() * other.getM02() + getM01() * other.getM12() + getM02() * other.getM22() + getM03() * other.getM32(),
                              getM00() * other.getM03() + getM01() * other.getM13() + getM02() * other.getM23() + getM03() * other.getM33(),
                              getM10() * other.getM00() + getM11() * other.getM10() + getM12() * other.getM20() + getM13() * other.getM30(),
                              getM10() * other.getM01() + getM11() * other.getM11() + getM12() * other.getM21() + getM13() * other.getM31(),
                              getM10() * other.getM02() + getM11() * other.getM12() + getM12() * other.getM22() + getM13() * other.getM32(),
                              getM10() * other.getM03() + getM11() * other.getM13() + getM12() * other.getM23() + getM13() * other.getM33(),
                              getM20() * other.getM00() + getM21() * other.getM10() + getM22() * other.getM20() + getM23() * other.getM30(),
                              getM20() * other.getM01() + getM21() * other.getM11() + getM22() * other.getM21() + getM23() * other.getM31(),
                              getM20() * other.getM02() + getM21() * other.getM12() + getM22() * other.getM22() + getM23() * other.getM32(),
                              getM20() * other.getM03() + getM21() * other.getM13() + getM22() * other.getM23() + getM23() * other.getM33(),
                              getM30() * other.getM00() + getM31() * other.getM10() + getM32() * other.getM20() + getM33() * other.getM30(),
                              getM30() * other.getM01() + getM31() * other.getM11() + getM32() * other.getM21() + getM33() * other.getM31(),
                              getM30() * other.getM02() + getM31() * other.getM12() + getM32() * other.getM22() + getM33() * other.getM32(),
                              getM30() * other.getM03() + getM31() * other.getM13() + getM32() * other.getM23() + getM33() * other.getM33());
    }

    @Override
    public Matrix4x4d neg() {
        return new Matrix4x4d(- getM00(), - getM01(), - getM02(), - getM03(),
                              - getM10(), - getM11(), - getM12(), - getM13(),
                              - getM20(), - getM21(), - getM22(), - getM23(),
                              - getM30(), - getM31(), - getM32(), - getM33());
    }

    @Override
    public Matrix4x4d abs() {
        return new Matrix4x4d(Math.abs(getM00()), Math.abs(getM01()), Math.abs(getM02()), Math.abs(getM03()),
                              Math.abs(getM10()), Math.abs(getM11()), Math.abs(getM12()), Math.abs(getM13()),
                              Math.abs(getM20()), Math.abs(getM21()), Math.abs(getM22()), Math.abs(getM23()),
                              Math.abs(getM30()), Math.abs(getM31()), Math.abs(getM32()), Math.abs(getM33()));
    }

    @Override
    public Matrix4x4d transpose() {
        return new Matrix4x4d(getM00(), getM10(), getM20(), getM30(),
                              getM01(), getM11(), getM21(), getM31(),
                              getM02(), getM12(), getM22(), getM32(),
                              getM03(), getM13(), getM23(), getM33());
    }

    @Override
    public Matrix4x4d inverse() throws SingularMatrixException {
        double s = getDeterminant();
        if (DoubleUtils.epsilonZero(s, EPSILON)) {
            throw new SingularMatrixException();
        }

        s = 1 / s;

        return new Matrix4x4d(
                   (double)((getM11() * (getM22() * getM33() - getM23() * getM32())
                             + getM12() * (getM23() * getM31() - getM21() * getM33())
                             + getM13() * (getM21() * getM32() - getM22() * getM31())) * s),
                   (double)((getM21() * (getM02() * getM33() - getM03() * getM32())
                             + getM22() * (getM03() * getM31() - getM01() * getM33())
                             + getM23() * (getM01() * getM32() - getM02() * getM31())) * s),
                   (double)((getM31() * (getM02() * getM13() - getM03() * getM12())
                             + getM32() * (getM03() * getM11() - getM01() * getM13())
                             + getM33() * (getM01() * getM12() - getM02() * getM11())) * s),
                   (double)((getM01() * (getM13() * getM22() - getM12() * getM23())
                             + getM02() * (getM11() * getM23() - getM13() * getM21())
                             + getM03() * (getM12() * getM21() - getM11() * getM22())) * s),
                   (double)((getM12() * (getM20() * getM33() - getM23() * getM30())
                             + getM13() * (getM22() * getM30() - getM20() * getM32())
                             + getM10() * (getM23() * getM32() - getM22() * getM33())) * s),
                   (double)((getM22() * (getM00() * getM33() - getM03() * getM30())
                             + getM23() * (getM02() * getM30() - getM00() * getM32())
                             + getM20() * (getM03() * getM32() - getM02() * getM33())) * s),
                   (double)((getM32() * (getM00() * getM13() - getM03() * getM10())
                             + getM33() * (getM02() * getM10() - getM00() * getM12())
                             + getM30() * (getM03() * getM12() - getM02() * getM13())) * s),
                   (double)((getM02() * (getM13() * getM20() - getM10() * getM23())
                             + getM03() * (getM10() * getM22() - getM12() * getM20())
                             + getM00() * (getM12() * getM23() - getM13() * getM22())) * s),
                   (double)((getM13() * (getM20() * getM31() - getM21() * getM30())
                             + getM10() * (getM21() * getM33() - getM23() * getM31())
                             + getM11() * (getM23() * getM30() - getM20() * getM33())) * s),
                   (double)((getM23() * (getM00() * getM31() - getM01() * getM30())
                             + getM20() * (getM01() * getM33() - getM03() * getM31())
                             + getM21() * (getM03() * getM30() - getM00() * getM33())) * s),
                   (double)((getM33() * (getM00() * getM11() - getM01() * getM10())
                             + getM30() * (getM01() * getM13() - getM03() * getM11())
                             + getM31() * (getM03() * getM10() - getM00() * getM13())) * s),
                   (double)((getM03() * (getM11() * getM20() - getM10() * getM21())
                             + getM00() * (getM13() * getM21() - getM11() * getM23())
                             + getM01() * (getM10() * getM23() - getM13() * getM20())) * s),
                   (double)((getM10() * (getM22() * getM31() - getM21() * getM32())
                             + getM11() * (getM20() * getM32() - getM22() * getM30())
                             + getM12() * (getM21() * getM30() - getM20() * getM31())) * s),
                   (double)((getM20() * (getM02() * getM31() - getM01() * getM32())
                             + getM21() * (getM00() * getM32() - getM02() * getM30())
                             + getM22() * (getM01() * getM30() - getM00() * getM31())) * s),
                   (double)((getM30() * (getM02() * getM11() - getM01() * getM12())
                             + getM31() * (getM00() * getM12() - getM02() * getM10())
                             + getM32() * (getM01() * getM10() - getM00() * getM11())) * s),
                   (double)((getM00() * (getM11() * getM22() - getM12() * getM21())
                             + getM01() * (getM12() * getM20() - getM10() * getM22())
                             + getM02() * (getM10() * getM21() - getM11() * getM20())) * s));
    }

    @Override
    public Matrix4x4d setZero() {
        set(0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0);
        return this;
    }

    @Override
    public Matrix4x4d setIdentity() {
        set(1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1);
        return this;
    }

    @Override
    public Matrix4x4d addAndSet(Matrix4x4 other) {
        set(getM00() + other.getM00(), getM01() + other.getM01(), getM02() + other.getM02(), getM03() + other.getM03(),
            getM10() + other.getM10(), getM11() + other.getM11(), getM12() + other.getM12(), getM13() + other.getM13(),
            getM20() + other.getM20(), getM21() + other.getM21(), getM22() + other.getM22(), getM23() + other.getM23(),
            getM30() + other.getM30(), getM31() + other.getM31(), getM32() + other.getM32(), getM33() + other.getM33());
        return this;
    }

    @Override
    public Matrix4x4d subAndSet(Matrix4x4 other) {
        set(getM00() - other.getM00(), getM01() - other.getM01(), getM02() - other.getM02(), getM03() - other.getM03(),
            getM10() - other.getM10(), getM11() - other.getM11(), getM12() - other.getM12(), getM13() - other.getM13(),
            getM20() - other.getM20(), getM21() - other.getM21(), getM22() - other.getM22(), getM23() - other.getM23(),
            getM30() - other.getM30(), getM31() - other.getM31(), getM32() - other.getM32(), getM33() - other.getM33());
        return this;
    }

    @Override
    public Matrix4x4d mulAndSet(double v) {
        set((double)(getM00() * v), (double)(getM01() * v), (double)(getM02() * v), (double)(getM03() * v),
            (double)(getM10() * v), (double)(getM11() * v), (double)(getM12() * v), (double)(getM13() * v),
            (double)(getM20() * v), (double)(getM21() * v), (double)(getM22() * v), (double)(getM23() * v),
            (double)(getM30() * v), (double)(getM31() * v), (double)(getM32() * v), (double)(getM33() * v));
        return this;
    }

    @Override
    public Matrix4x4d divAndSet(double v) {
        set((double)(getM00() / v), (double)(getM01() / v), (double)(getM02() / v), (double)(getM03() / v),
            (double)(getM10() / v), (double)(getM11() / v), (double)(getM12() / v), (double)(getM13() / v),
            (double)(getM20() / v), (double)(getM21() / v), (double)(getM22() / v), (double)(getM23() / v),
            (double)(getM30() / v), (double)(getM31() / v), (double)(getM32() / v), (double)(getM33() / v));
        return this;
    }

    @Override
    public Matrix4x4d mulAndSet(Matrix4x4 other) {
        set(getM00() * other.getM00() + getM01() * other.getM10() + getM02() * other.getM20() + getM03() * other.getM30(),
            getM00() * other.getM01() + getM01() * other.getM11() + getM02() * other.getM21() + getM03() * other.getM31(),
            getM00() * other.getM02() + getM01() * other.getM12() + getM02() * other.getM22() + getM03() * other.getM32(),
            getM00() * other.getM03() + getM01() * other.getM13() + getM02() * other.getM23() + getM03() * other.getM33(),
            getM10() * other.getM00() + getM11() * other.getM10() + getM12() * other.getM20() + getM13() * other.getM30(),
            getM10() * other.getM01() + getM11() * other.getM11() + getM12() * other.getM21() + getM13() * other.getM31(),
            getM10() * other.getM02() + getM11() * other.getM12() + getM12() * other.getM22() + getM13() * other.getM32(),
            getM10() * other.getM03() + getM11() * other.getM13() + getM12() * other.getM23() + getM13() * other.getM33(),
            getM20() * other.getM00() + getM21() * other.getM10() + getM22() * other.getM20() + getM23() * other.getM30(),
            getM20() * other.getM01() + getM21() * other.getM11() + getM22() * other.getM21() + getM23() * other.getM31(),
            getM20() * other.getM02() + getM21() * other.getM12() + getM22() * other.getM22() + getM23() * other.getM32(),
            getM20() * other.getM03() + getM21() * other.getM13() + getM22() * other.getM23() + getM23() * other.getM33(),
            getM30() * other.getM00() + getM31() * other.getM10() + getM32() * other.getM20() + getM33() * other.getM30(),
            getM30() * other.getM01() + getM31() * other.getM11() + getM32() * other.getM21() + getM33() * other.getM31(),
            getM30() * other.getM02() + getM31() * other.getM12() + getM32() * other.getM22() + getM33() * other.getM32(),
            getM30() * other.getM03() + getM31() * other.getM13() + getM32() * other.getM23() + getM33() * other.getM33());
        return this;
    }

    @Override
    public Matrix4x4d negAndSet() {
        set(- getM00(), - getM01(), - getM02(), - getM03(),
            - getM10(), - getM11(), - getM12(), - getM13(),
            - getM20(), - getM21(), - getM22(), - getM23(),
            - getM30(), - getM31(), - getM32(), - getM33());
        return this;
    }

    @Override
    public Matrix4x4d absAndSet() {
        set(Math.abs(getM00()), Math.abs(getM01()), Math.abs(getM02()), Math.abs(getM03()),
            Math.abs(getM10()), Math.abs(getM11()), Math.abs(getM12()), Math.abs(getM13()),
            Math.abs(getM20()), Math.abs(getM21()), Math.abs(getM22()), Math.abs(getM23()),
            Math.abs(getM30()), Math.abs(getM31()), Math.abs(getM32()), Math.abs(getM33()));
        return this;
    }

    @Override
    public Matrix4x4d transposeAndSet() {
        set(getM00(), getM10(), getM20(), getM30(),
            getM01(), getM11(), getM21(), getM31(),
            getM02(), getM12(), getM22(), getM32(),
            getM03(), getM13(), getM23(), getM33());
        return this;
    }

    @Override
    public Matrix4x4d inverseAndSet() throws SingularMatrixException {
        double s = getDeterminant();
        if (DoubleUtils.epsilonZero(s, EPSILON)) {
            throw new SingularMatrixException();
        }

        s = 1 / s;

        set(
            (double)((getM11() * (getM22() * getM33() - getM23() * getM32())
                      + getM12() * (getM23() * getM31() - getM21() * getM33())
                      + getM13() * (getM21() * getM32() - getM22() * getM31())) * s),
            (double)((getM21() * (getM02() * getM33() - getM03() * getM32())
                      + getM22() * (getM03() * getM31() - getM01() * getM33())
                      + getM23() * (getM01() * getM32() - getM02() * getM31())) * s),
            (double)((getM31() * (getM02() * getM13() - getM03() * getM12())
                      + getM32() * (getM03() * getM11() - getM01() * getM13())
                      + getM33() * (getM01() * getM12() - getM02() * getM11())) * s),
            (double)((getM01() * (getM13() * getM22() - getM12() * getM23())
                      + getM02() * (getM11() * getM23() - getM13() * getM21())
                      + getM03() * (getM12() * getM21() - getM11() * getM22())) * s),
            (double)((getM12() * (getM20() * getM33() - getM23() * getM30())
                      + getM13() * (getM22() * getM30() - getM20() * getM32())
                      + getM10() * (getM23() * getM32() - getM22() * getM33())) * s),
            (double)((getM22() * (getM00() * getM33() - getM03() * getM30())
                      + getM23() * (getM02() * getM30() - getM00() * getM32())
                      + getM20() * (getM03() * getM32() - getM02() * getM33())) * s),
            (double)((getM32() * (getM00() * getM13() - getM03() * getM10())
                      + getM33() * (getM02() * getM10() - getM00() * getM12())
                      + getM30() * (getM03() * getM12() - getM02() * getM13())) * s),
            (double)((getM02() * (getM13() * getM20() - getM10() * getM23())
                      + getM03() * (getM10() * getM22() - getM12() * getM20())
                      + getM00() * (getM12() * getM23() - getM13() * getM22())) * s),
            (double)((getM13() * (getM20() * getM31() - getM21() * getM30())
                      + getM10() * (getM21() * getM33() - getM23() * getM31())
                      + getM11() * (getM23() * getM30() - getM20() * getM33())) * s),
            (double)((getM23() * (getM00() * getM31() - getM01() * getM30())
                      + getM20() * (getM01() * getM33() - getM03() * getM31())
                      + getM21() * (getM03() * getM30() - getM00() * getM33())) * s),
            (double)((getM33() * (getM00() * getM11() - getM01() * getM10())
                      + getM30() * (getM01() * getM13() - getM03() * getM11())
                      + getM31() * (getM03() * getM10() - getM00() * getM13())) * s),
            (double)((getM03() * (getM11() * getM20() - getM10() * getM21())
                      + getM00() * (getM13() * getM21() - getM11() * getM23())
                      + getM01() * (getM10() * getM23() - getM13() * getM20())) * s),
            (double)((getM10() * (getM22() * getM31() - getM21() * getM32())
                      + getM11() * (getM20() * getM32() - getM22() * getM30())
                      + getM12() * (getM21() * getM30() - getM20() * getM31())) * s),
            (double)((getM20() * (getM02() * getM31() - getM01() * getM32())
                      + getM21() * (getM00() * getM32() - getM02() * getM30())
                      + getM22() * (getM01() * getM30() - getM00() * getM31())) * s),
            (double)((getM30() * (getM02() * getM11() - getM01() * getM12())
                      + getM31() * (getM00() * getM12() - getM02() * getM10())
                      + getM32() * (getM01() * getM10() - getM00() * getM11())) * s),
            (double)((getM00() * (getM11() * getM22() - getM12() * getM21())
                      + getM01() * (getM12() * getM20() - getM10() * getM22())
                      + getM02() * (getM10() * getM21() - getM11() * getM20())) * s));
        return this;
    }

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public String toString() {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
                             getM00(),getM01(),getM02(),getM03(),
                             getM10(),getM11(),getM12(),getM13(),
                             getM20(),getM21(),getM22(),getM23(),
                             getM30(),getM31(),getM32(),getM33());
    }

    public boolean equals(Matrix4x4d other) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }

        return this.equals(other.getM00(), other.getM01(), other.getM02(), other.getM03(),
                           other.getM10(), other.getM11(), other.getM12(), other.getM13(),
                           other.getM20(), other.getM21(), other.getM22(), other.getM23(),
                           other.getM30(), other.getM31(), other.getM32(), other.getM33());
    }

    @Override
    public boolean equals(Object other) {
        return ((other instanceof Matrix4x4d) && this.equals((Matrix4x4d) other));
    }

    @Override
    public int hashCode() {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
        hash = prime * hash + Double.hashCode(getM00());
        hash = prime * hash + Double.hashCode(getM01());
        hash = prime * hash + Double.hashCode(getM02());
        hash = prime * hash + Double.hashCode(getM03());
        hash = prime * hash + Double.hashCode(getM10());
        hash = prime * hash + Double.hashCode(getM11());
        hash = prime * hash + Double.hashCode(getM12());
        hash = prime * hash + Double.hashCode(getM13());
        hash = prime * hash + Double.hashCode(getM20());
        hash = prime * hash + Double.hashCode(getM21());
        hash = prime * hash + Double.hashCode(getM22());
        hash = prime * hash + Double.hashCode(getM23());
        hash = prime * hash + Double.hashCode(getM30());
        hash = prime * hash + Double.hashCode(getM31());
        hash = prime * hash + Double.hashCode(getM32());
        hash = prime * hash + Double.hashCode(getM33());
        return hash;
    }

    @Override
    public Matrix4x4d clone() throws CloneNotSupportedException {
        return (Matrix4x4d)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="EpsilonEquatable<Matrix4x4d>">
    @Override
    public boolean epsilonEquals(Matrix4x4d other, double epsilon) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }
        return epsilonEquals(getM00(), getM01(), getM02(), getM03(),
                             getM10(), getM11(), getM12(), getM13(),
                             getM20(), getM21(), getM22(), getM23(),
                             getM30(), getM31(), getM32(), getM33(), epsilon);
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private boolean epsilonEquals(double m00, double m01, double m02, double m03,
                                  double m10, double m11, double m12, double m13,
                                  double m20, double m21, double m22, double m23,
                                  double m30, double m31, double m32, double m33) {
        return epsilonEquals(m00, m01, m02, m03,
                             m10, m11, m12, m13,
                             m20, m21, m22, m23,
                             m30, m31, m32, m33, EPSILON);
    }

    private boolean epsilonEquals(double m00, double m01, double m02, double m03,
                                  double m10, double m11, double m12, double m13,
                                  double m20, double m21, double m22, double m23,
                                  double m30, double m31, double m32, double m33, double epsilon) {
        return DoubleUtils.epsilonEquals(getM00(), m00, epsilon) && DoubleUtils.epsilonEquals(getM01(), m01, epsilon) && DoubleUtils.epsilonEquals(getM02(), m02, epsilon) && DoubleUtils.epsilonEquals(getM03(), m03, epsilon)
               && DoubleUtils.epsilonEquals(getM10(), m10, epsilon) && DoubleUtils.epsilonEquals(getM11(), m11, epsilon) && DoubleUtils.epsilonEquals(getM12(), m12, epsilon) && DoubleUtils.epsilonEquals(getM13(), m13, epsilon)
               && DoubleUtils.epsilonEquals(getM20(), m20, epsilon) && DoubleUtils.epsilonEquals(getM21(), m21, epsilon) && DoubleUtils.epsilonEquals(getM22(), m22, epsilon) && DoubleUtils.epsilonEquals(getM23(), m23, epsilon)
               && DoubleUtils.epsilonEquals(getM30(), m30, epsilon) && DoubleUtils.epsilonEquals(getM31(), m31, epsilon) && DoubleUtils.epsilonEquals(getM32(), m32, epsilon) && DoubleUtils.epsilonEquals(getM33(), m33, epsilon);
    }

    private boolean equals(double m00, double m01, double m02, double m03,
                           double m10, double m11, double m12, double m13,
                           double m20, double m21, double m22, double m23,
                           double m30, double m31, double m32, double m33) {
        return getM00() == m00 && getM01() == m01 && getM02() == m02 && getM03() == m03
               && getM10() == m10 && getM11() == m11 && getM12() == m12 && getM13() == m13
               && getM20() == m20 && getM21() == m21 && getM22() == m22 && getM23() == m23
               && getM30() == m30 && getM31() == m31 && getM32() == m32 && getM33() == m33;
    }

    private static String getFormat() {
        if (format == null) {
            String f = ".3f"; // Floating point number with 2 decimal places

            StringBuilder buff = new StringBuilder();
            String b = "%1$s"; // Begin      [
            String s = "%2$s"; // Separation ,
            String e = "%3$s"; // End        ]
            int k = 4;
            buff.append(b);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(e);
            format = buff.toString();
        }
        return format;
    }
//</editor-fold>
}
