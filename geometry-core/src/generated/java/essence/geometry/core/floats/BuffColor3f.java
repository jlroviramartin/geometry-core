/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.floats;

import essence.geometry.core.Tuple;
import essence.geometry.core.TupleUtils;
import essence.geometry.core.Color3;
import essence.geometry.core.BuffColor3;
import essence.geometry.core.DoubleUtils;
import essence.util.math.ArithmeticError;

/**
 * Basic implementation of a 3 dimension color.
 */
public class BuffColor3f extends BuffTuple3f implements BuffColor3 {

    /**
     * Empty constructor.
     */
    public BuffColor3f() {
    }

    /**
     * This constructor sets the components of this color.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     */
    public BuffColor3f(float x, float y, float z) {
        super(x, y, z);
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public BuffColor3f(Tuple tuple) {
        super(tuple);
    }

    /**
     * Zero color.
     */
    public static final BuffColor3f getZero() {
        return new BuffColor3f((float)0, (float)0, (float)0);
    }

    /**
     * One color.
     */
    public static final BuffColor3f getOne() {
        return new BuffColor3f((float)1, (float)1, (float)1);
    }

    public BuffColor3f addAndSet(BuffColor3f other) {
        set((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()));
        return this;
    }

    public BuffColor3f subAndSet(BuffColor3f other) {
        set((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()));
        return this;
    }

    public BuffColor3f simpleMulAndSet(BuffColor3f other) {
        set((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()));
        return this;
    }

    public BuffColor3f simpleDivAndSet(BuffColor3f other) {
        set((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()));
        return this;
    }

    public BuffColor3f lerpAndSet(BuffColor3f other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    public BuffColor3f linealAndSet(BuffColor3f other, double alpha, double beta) {
        set((float)(alpha * getX() + beta * other.getX()),
            (float)(alpha * getY() + beta * other.getY()),
            (float)(alpha * getZ() + beta * other.getZ()));
        return this;
    }

    public BuffColor3f add(BuffColor3f other) {
        return new BuffColor3f((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()));
    }

    public BuffColor3f sub(BuffColor3f other) {
        return new BuffColor3f((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()));
    }

    public BuffColor3f simpleMul(BuffColor3f other) {
        return new BuffColor3f((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()));
    }

    public BuffColor3f simpleDiv(BuffColor3f other) {
        return new BuffColor3f((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()));
    }

    public BuffColor3f lerp(BuffColor3f other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(BuffColor3f other, BuffColor3f cLerp) {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double x2 = cLerp.getX() - getX();
        double y2 = cLerp.getY() - getY();
        double z2 = cLerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    public BuffColor3f lineal(BuffColor3f other, double alpha, double beta) {
        return new BuffColor3f((float)(alpha * getX() + beta * other.getX()),
                               (float)(alpha * getY() + beta * other.getY()),
                               (float)(alpha * getZ() + beta * other.getZ()));
    }

//<editor-fold defaultstate="collapsed" desc="BuffColor3">
    @Override
    public BuffColor3f normalize() {
        set(clamp(getX(), (float)0, (float)1), clamp(getY(), (float)0, (float)1), clamp(getZ(), (float)0, (float)1));
        return this;
    }

    @Override
    public BuffColor3f setZero() {
        set((float)0, (float)0, (float)0);
        return this;
    }

    @Override
    public BuffColor3f addAndSet(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        set((float)(getX() + _other.getX()), (float)(getY() + _other.getY()), (float)(getZ() + _other.getZ()));
        return this;
    }

    @Override
    public BuffColor3f subAndSet(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        set((float)(getX() - _other.getX()), (float)(getY() - _other.getY()), (float)(getZ() - _other.getZ()));
        return this;
    }

    @Override
    public BuffColor3f simpleMulAndSet(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        set((float)(getX() * _other.getX()), (float)(getY() * _other.getY()), (float)(getZ() * _other.getZ()));
        return this;
    }

    @Override
    public BuffColor3f simpleDivAndSet(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        set((float)(getX() / _other.getX()), (float)(getY() / _other.getY()), (float)(getZ() / _other.getZ()));
        return this;
    }

    @Override
    public BuffColor3f mulAndSet(double v) {
        set((float)(getX() * v), (float)(getY() * v), (float)(getZ() * v));
        return this;
    }

    @Override
    public BuffColor3f divAndSet(double v) {
        set((float)(getX() / v), (float)(getY() / v), (float)(getZ() / v));
        return this;
    }

    @Override
    public BuffColor3f negAndSet() {
        set((float)(- getX()), (float)(- getY()), (float)(- getZ()));
        return this;
    }

    @Override
    public BuffColor3f absAndSet() {
        set((float)Math.abs(getX()), (float)Math.abs(getY()), (float)Math.abs(getZ()));
        return this;
    }

    @Override
    public BuffColor3f lerpAndSet(Color3 other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    @Override
    public BuffColor3f linealAndSet(Color3 other, double alpha, double beta) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        set((float)(alpha * getX() + beta * _other.getX()),
            (float)(alpha * getY() + beta * _other.getY()),
            (float)(alpha * getZ() + beta * _other.getZ()));
        return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Color3">
    @Override
    public boolean isNormalized() {
        return isNormal(getX(), (float)0, (float)1) && isNormal(getY(), (float)0, (float)1) && isNormal(getZ(), (float)0, (float)1);
    }

    @Override
    public BuffColor3f getNormalized() {
        return new BuffColor3f(clamp(getX(), (float)0, (float)1), clamp(getY(), (float)0, (float)1), clamp(getZ(), (float)0, (float)1));
    }

    @Override
    public BuffColor3f add(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        return new BuffColor3f((float)(getX() + _other.getX()), (float)(getY() + _other.getY()), (float)(getZ() + _other.getZ()));
    }

    @Override
    public BuffColor3f sub(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        return new BuffColor3f((float)(getX() - _other.getX()), (float)(getY() - _other.getY()), (float)(getZ() - _other.getZ()));
    }

    @Override
    public BuffColor3f simpleMul(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        return new BuffColor3f((float)(getX() * _other.getX()), (float)(getY() * _other.getY()), (float)(getZ() * _other.getZ()));
    }

    @Override
    public BuffColor3f simpleDiv(Color3 other) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        return new BuffColor3f((float)(getX() / _other.getX()), (float)(getY() / _other.getY()), (float)(getZ() / _other.getZ()));
    }

    @Override
    public BuffColor3f mul(double v) {
        return new BuffColor3f((float)(getX() * v), (float)(getY() * v), (float)(getZ() * v));
    }

    @Override
    public BuffColor3f div(double v) {
        if (DoubleUtils.epsilonZero(v)) {
            throw new ArithmeticError("divided by zero");
        }
        return new BuffColor3f((float)(getX() / v), (float)(getY() / v), (float)(getZ() / v));
    }

    @Override
    public BuffColor3f neg() {
        return new BuffColor3f((float)(- getX()), (float)(- getY()), (float)(- getZ()));
    }

    @Override
    public BuffColor3f abs() {
        return new BuffColor3f((float)Math.abs(getX()), (float)Math.abs(getY()), (float)Math.abs(getZ()));
    }

    @Override
    public BuffColor3f lerp(Color3 other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    @Override
    public double invLerp(Color3 other, Color3 cLerp) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);
        Tuple3_Float _cLerp = TupleUtils.toTuple3_Float(cLerp);

        double x1 = _other.getX() - getX();
        double y1 = _other.getY() - getY();
        double z1 = _other.getZ() - getZ();
        double x2 = _cLerp.getX() - getX();
        double y2 = _cLerp.getY() - getY();
        double z2 = _cLerp.getZ() - getZ();
        return (x1 * x2 + y1 * y2 + z1 * z2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1);
    }

    @Override
    public BuffColor3f lineal(Color3 other, double alpha, double beta) {
        Tuple3_Float _other = TupleUtils.toTuple3_Float(other);

        return new BuffColor3f((float)(alpha * getX() + beta * _other.getX()),
                               (float)(alpha * getY() + beta * _other.getY()),
                               (float)(alpha * getZ() + beta * _other.getZ()));
    }

    private static boolean isNormal(float v, float min, float max) {
        return v >= min && v <= max;
    }

    private static float clamp(float v, float min, float max) {
        return v < min ? min : v > max ? max : v;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public BuffColor3f clone() throws CloneNotSupportedException {
        return (BuffColor3f)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
//</editor-fold>
}
