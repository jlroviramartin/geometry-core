/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.floats;

import essence.geometry.core.Tuple;
import essence.geometry.core.TupleUtils;
import essence.geometry.core.Color4;
import essence.geometry.core.BuffColor4;
import essence.geometry.core.DoubleUtils;
import essence.util.math.ArithmeticError;

/**
 * Basic implementation of a 4 dimension color.
 */
public class BuffColor4f extends BuffTuple4f implements BuffColor4 {

    /**
     * Empty constructor.
     */
    public BuffColor4f() {
    }

    /**
     * This constructor sets the components of this color.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     * @param w Value of the component W.
     */
    public BuffColor4f(float x, float y, float z, float w) {
        super(x, y, z, w);
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public BuffColor4f(Tuple tuple) {
        super(tuple);
    }

    /**
     * Zero color.
     */
    public static final BuffColor4f getZero() {
        return new BuffColor4f((float)0, (float)0, (float)0, (float)0);
    }

    /**
     * One color.
     */
    public static final BuffColor4f getOne() {
        return new BuffColor4f((float)1, (float)1, (float)1, (float)1);
    }

//<editor-fold defaultstate="collapsed" desc="BuffColor4">
    @Override
    public BuffColor4f normalize() {
        set(clamp(getX(), (float)0, (float)1), clamp(getY(), (float)0, (float)1), clamp(getZ(), (float)0, (float)1), clamp(getW(), (float)0, (float)1));
        return this;
    }

    @Override
    public BuffColor4f setZero() {
        set((float)0, (float)0, (float)0, (float)0);
        return this;
    }

    @Override
    public BuffColor4f addAndSet(Color4 other) {
        if (other instanceof Color4f) {
            return addAndSet((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return addAndSet((BuffColor4f)other);
        } else {
            return addAndSet(new Color4f(other));
        }
    }

    public BuffColor4f addAndSet(Color4f other) {
        set((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
        return this;
    }

    public BuffColor4f addAndSet(BuffColor4f other) {
        set((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
        return this;
    }

    @Override
    public BuffColor4f subAndSet(Color4 other) {
        if (other instanceof Color4f) {
            return subAndSet((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return subAndSet((BuffColor4f)other);
        } else {
            return subAndSet(new Color4f(other));
        }
    }

    public BuffColor4f subAndSet(Color4f other) {
        set((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
        return this;
    }

    public BuffColor4f subAndSet(BuffColor4f other) {
        set((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
        return this;
    }

    @Override
    public BuffColor4f simpleMulAndSet(Color4 other) {
        if (other instanceof Color4f) {
            return simpleMulAndSet((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return simpleMulAndSet((BuffColor4f)other);
        } else {
            return simpleMulAndSet(new Color4f(other));
        }
    }

    public BuffColor4f simpleMulAndSet(Color4f other) {
        set((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()), (float)(getW() * other.getW()));
        return this;
    }

    public BuffColor4f simpleMulAndSet(BuffColor4f other) {
        set((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()), (float)(getW() * other.getW()));
        return this;
    }

    @Override
    public BuffColor4f simpleDivAndSet(Color4 other) {
        if (other instanceof Color4f) {
            return simpleDivAndSet((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return simpleDivAndSet((BuffColor4f)other);
        } else {
            return simpleDivAndSet(new Color4f(other));
        }
    }

    public BuffColor4f simpleDivAndSet(Color4f other) {
        set((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()), (float)(getW() / other.getW()));
        return this;
    }

    public BuffColor4f simpleDivAndSet(BuffColor4f other) {
        set((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()), (float)(getW() / other.getW()));
        return this;
    }

    @Override
    public BuffColor4f mulAndSet(double v) {
        set((float)(getX() * v), (float)(getY() * v), (float)(getZ() * v), (float)(getW() * v));
        return this;
    }

    @Override
    public BuffColor4f divAndSet(double v) {
        set((float)(getX() / v), (float)(getY() / v), (float)(getZ() / v), (float)(getW() / v));
        return this;
    }

    @Override
    public BuffColor4f negAndSet() {
        set((float)(- getX()), (float)(- getY()), (float)(- getZ()), (float)(- getW()));
        return this;
    }

    @Override
    public BuffColor4f absAndSet() {
        set((float)Math.abs(getX()), (float)Math.abs(getY()), (float)Math.abs(getZ()), (float)Math.abs(getW()));
        return this;
    }

    @Override
    public BuffColor4f lerpAndSet(Color4 other, double alpha) {
        if (other instanceof Color4f) {
            return lerpAndSet((Color4f)other, alpha);
        } else if (other instanceof BuffColor4f) {
            return lerpAndSet((BuffColor4f)other, alpha);
        } else {
            return lerpAndSet(new Color4f(other), alpha);
        }
    }

    public BuffColor4f lerpAndSet(Color4f other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    public BuffColor4f lerpAndSet(BuffColor4f other, double alpha) {
        linealAndSet(other, 1 - alpha, alpha);
        return this;
    }

    @Override
    public BuffColor4f linealAndSet(Color4 other, double alpha, double beta) {
        if (other instanceof Color4f) {
            return linealAndSet((Color4f)other, alpha, beta);
        } else if (other instanceof BuffColor4f) {
            return linealAndSet((BuffColor4f)other, alpha, beta);
        } else {
            return linealAndSet(new Color4f(other), alpha, beta);
        }
    }

    public BuffColor4f linealAndSet(Color4f other, double alpha, double beta) {
        set((float)(alpha * getX() + beta * other.getX()),
            (float)(alpha * getY() + beta * other.getY()),
            (float)(alpha * getZ() + beta * other.getZ()),
            (float)(alpha * getW() + beta * other.getW()));
        return this;
    }

    public BuffColor4f linealAndSet(BuffColor4f other, double alpha, double beta) {
        set((float)(alpha * getX() + beta * other.getX()),
            (float)(alpha * getY() + beta * other.getY()),
            (float)(alpha * getZ() + beta * other.getZ()),
            (float)(alpha * getW() + beta * other.getW()));
        return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Color4">
    @Override
    public boolean isNormalized() {
        return isNormal(getX(), (float)0, (float)1) && isNormal(getY(), (float)0, (float)1) && isNormal(getZ(), (float)0, (float)1) && isNormal(getW(), (float)0, (float)1);
    }

    @Override
    public BuffColor4f getNormalized() {
        return new BuffColor4f(clamp(getX(), (float)0, (float)1), clamp(getY(), (float)0, (float)1), clamp(getZ(), (float)0, (float)1), clamp(getW(), (float)0, (float)1));
    }

    @Override
    public BuffColor4f add(Color4 other) {
        if (other instanceof Color4f) {
            return add((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return add((BuffColor4f)other);
        } else {
            return add(new Color4f(other));
        }
    }

    public BuffColor4f add(Color4f other) {
        return new BuffColor4f((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
    }

    public BuffColor4f add(BuffColor4f other) {
        return new BuffColor4f((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
    }

    @Override
    public BuffColor4f sub(Color4 other) {
        if (other instanceof Color4f) {
            return sub((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return sub((BuffColor4f)other);
        } else {
            return sub(new Color4f(other));
        }
    }

    public BuffColor4f sub(Color4f other) {
        return new BuffColor4f((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
    }

    public BuffColor4f sub(BuffColor4f other) {
        return new BuffColor4f((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
    }

    @Override
    public BuffColor4f simpleMul(Color4 other) {
        if (other instanceof Color4f) {
            return simpleMul((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return simpleMul((BuffColor4f)other);
        } else {
            return simpleMul(new Color4f(other));
        }
    }

    public BuffColor4f simpleMul(Color4f other) {
        return new BuffColor4f((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()), (float)(getW() * other.getW()));
    }

    public BuffColor4f simpleMul(BuffColor4f other) {
        return new BuffColor4f((float)(getX() * other.getX()), (float)(getY() * other.getY()), (float)(getZ() * other.getZ()), (float)(getW() * other.getW()));
    }

    @Override
    public BuffColor4f simpleDiv(Color4 other) {
        if (other instanceof Color4f) {
            return simpleDiv((Color4f)other);
        } else if (other instanceof BuffColor4f) {
            return simpleDiv((BuffColor4f)other);
        } else {
            return simpleDiv(new Color4f(other));
        }
    }

    public BuffColor4f simpleDiv(Color4f other) {
        return new BuffColor4f((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()), (float)(getW() / other.getW()));
    }

    public BuffColor4f simpleDiv(BuffColor4f other) {
        return new BuffColor4f((float)(getX() / other.getX()), (float)(getY() / other.getY()), (float)(getZ() / other.getZ()), (float)(getW() / other.getW()));
    }

    @Override
    public BuffColor4f mul(double v) {
        return new BuffColor4f((float)(getX() * v), (float)(getY() * v), (float)(getZ() * v), (float)(getW() * v));
    }

    @Override
    public BuffColor4f div(double v) {
        if (DoubleUtils.epsilonZero(v)) {
            throw new ArithmeticError("divided by zero");
        }
        return new BuffColor4f((float)(getX() / v), (float)(getY() / v), (float)(getZ() / v), (float)(getW() / v));
    }

    @Override
    public BuffColor4f neg() {
        return new BuffColor4f((float)(- getX()), (float)(- getY()), (float)(- getZ()), (float)(- getW()));
    }

    @Override
    public BuffColor4f abs() {
        return new BuffColor4f((float)Math.abs(getX()), (float)Math.abs(getY()), (float)Math.abs(getZ()), (float)Math.abs(getW()));
    }

    @Override
    public BuffColor4f lerp(Color4 other, double alpha) {
        if (other instanceof Color4f) {
            return lerp((Color4f)other, alpha);
        } else if (other instanceof BuffColor4f) {
            return lerp((BuffColor4f)other, alpha);
        } else {
            return lerp(new Color4f(other), alpha);
        }
    }

    public BuffColor4f lerp(Color4f other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public BuffColor4f lerp(BuffColor4f other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    @Override
    public double invLerp(Color4 other, Color4 lerp) {
        if (other instanceof Color4f && lerp instanceof Color4f) {
            return invLerp((Color4f)other, (Color4f)lerp);
        } else if (other instanceof BuffColor4f && lerp instanceof BuffColor4f) {
            return invLerp((BuffColor4f)other, (BuffColor4f)lerp);
        } else {
            return invLerp(new Color4f(other), new Color4f(other));
        }
    }

    public double invLerp(Color4f other, Color4f lerp) {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double w1 = other.getW() - getW();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        double w2 = lerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    public double invLerp(BuffColor4f other, BuffColor4f lerp) {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double w1 = other.getW() - getW();
        double x2 = lerp.getX() - getX();
        double y2 = lerp.getY() - getY();
        double z2 = lerp.getZ() - getZ();
        double w2 = lerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    @Override
    public BuffColor4f lineal(Color4 other, double alpha, double beta) {
        if (other instanceof Color4f) {
            return lineal((Color4f)other, alpha, beta);
        } else if (other instanceof BuffColor4f) {
            return lineal((BuffColor4f)other, alpha, beta);
        } else {
            return lineal(new Color4f(other), alpha, beta);
        }
    }

    public BuffColor4f lineal(Color4f other, double alpha, double beta) {
        return new BuffColor4f((float)(alpha * getX() + beta * other.getX()),
                               (float)(alpha * getY() + beta * other.getY()),
                               (float)(alpha * getZ() + beta * other.getZ()),
                               (float)(alpha * getW() + beta * other.getW()));
    }

    public BuffColor4f lineal(BuffColor4f other, double alpha, double beta) {
        return new BuffColor4f((float)(alpha * getX() + beta * other.getX()),
                               (float)(alpha * getY() + beta * other.getY()),
                               (float)(alpha * getZ() + beta * other.getZ()),
                               (float)(alpha * getW() + beta * other.getW()));
    }

    private static boolean isNormal(float v, float min, float max) {
        return v >= min && v <= max;
    }

    private static float clamp(float v, float min, float max) {
        return v < min ? min : v > max ? max : v;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public BuffColor4f clone() throws CloneNotSupportedException {
        return (BuffColor4f)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
//</editor-fold>
}
