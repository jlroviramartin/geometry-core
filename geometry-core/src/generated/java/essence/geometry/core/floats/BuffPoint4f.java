/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.floats;

import essence.geometry.core.Tuple;
import essence.geometry.core.TupleUtils;
import essence.geometry.core.Vector4;
import essence.geometry.core.Point4;
import essence.geometry.core.BuffPoint4;

/**
 * Basic implementation of a 4 dimension vector.
 */
public class BuffPoint4f extends BuffTuple4f implements BuffPoint4 {

    /**
     * Empty constructor.
     */
    public BuffPoint4f() {
    }

    /**
     * This constructor sets the components of this point.
     *
     * @param x Value of the component X.
     * @param y Value of the component Y.
     * @param z Value of the component Z.
     * @param w Value of the component W.
     */
    public BuffPoint4f(float x, float y, float z, float w) {
        super(x, y, z, w);
    }

    /**
     * Copy constructor.
     *
     * @param tuple Tuple.
     */
    public BuffPoint4f(Tuple tuple) {
        super(tuple);
    }

    /**
     * Zero point.
     *
     * @return Point zero.
     */
    public static final BuffPoint4f getZero() {
        return new BuffPoint4f((float)0, (float)0, (float)0, (float)0);
    }

    /**
     * One point.
     *
     * @return Point one.
     */
    public static final BuffPoint4f getOne() {
        return new BuffPoint4f((float)1, (float)1, (float)1, (float)1);
    }

    public BuffPoint4f addAndSet(BuffVector4f other) {
        set((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
        return this;
    }

    public BuffPoint4f subAndSet(BuffVector4f other) {
        set((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
        return this;
    }

    public BuffPoint4f lerpAndSet(BuffPoint4f other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    public BuffPoint4f linealAndSet(BuffPoint4f other, double alpha, double beta) {
        set((float)(alpha * getX() + beta * other.getX()),
            (float)(alpha * getY() + beta * other.getY()),
            (float)(alpha * getZ() + beta * other.getZ()),
            (float)(alpha * getW() + beta * other.getW()));
        return this;
    }

    public BuffPoint4f vectorProjectionAndSet(BuffVector4f where) {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ() + getW() * where.getW();
        double r = dot / where.getLengthCuad();

        set((float)(getX() * r), (float)(getY() * r), (float)(getZ() * r), (float)(getW() * r));
        return this;

        //set(new BuffVector4f(this).vectorProjectionAndSet(where));
        //return this;
    }

    public double getDistance(BuffPoint4f other) {
        return Math.sqrt(getDistanceCuad(other));
    }

    public double getDistanceCuad(BuffPoint4f other) {
        return square(other.getX() - getX())
               + square(other.getY() - getY())
               + square(other.getZ() - getZ())
               + square(other.getW() - getW());
    }

    public double getDistanceL1(BuffPoint4f other) {
        return Math.abs(other.getX() - getX())
               + Math.abs(other.getY() - getY())
               + Math.abs(other.getZ() - getZ())
               + Math.abs(other.getW() - getW());
    }

    public BuffPoint4f add(BuffVector4f other) {
        return new BuffPoint4f((float)(getX() + other.getX()), (float)(getY() + other.getY()), (float)(getZ() + other.getZ()), (float)(getW() + other.getW()));
    }

    public BuffPoint4f sub(BuffVector4f other) {
        return new BuffPoint4f((float)(getX() - other.getX()), (float)(getY() - other.getY()), (float)(getZ() - other.getZ()), (float)(getW() - other.getW()));
    }

    public BuffVector4f vectorTo(BuffPoint4f other) {
        return new BuffVector4f((float)(other.getX() - getX()), (float)(other.getY() - getY()), (float)(other.getZ() - getZ()), (float)(other.getW() - getW()));
    }

    public BuffPoint4f lerp(BuffPoint4f other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    public double invLerp(BuffPoint4f other, BuffPoint4f pLerp) {
        double x1 = other.getX() - getX();
        double y1 = other.getY() - getY();
        double z1 = other.getZ() - getZ();
        double w1 = other.getW() - getW();
        double x2 = pLerp.getX() - getX();
        double y2 = pLerp.getY() - getY();
        double z2 = pLerp.getZ() - getZ();
        double w2 = pLerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    public BuffPoint4f lineal(BuffPoint4f other, double alpha, double beta) {
        return new BuffPoint4f((float)(alpha * getX() + beta * other.getX()),
                               (float)(alpha * getY() + beta * other.getY()),
                               (float)(alpha * getZ() + beta * other.getZ()),
                               (float)(alpha * getW() + beta * other.getW()));
    }

    public double scalarProjection(BuffVector4f where) {
        return new BuffVector4f(this).dot(where) / where.getLength();
    }

    public BuffPoint4f vectorProjection(BuffVector4f where) {
        double dot = getX() * where.getX() + getY() * where.getY() + getZ() * where.getZ() + getW() * where.getW();
        double r = dot / where.getLengthCuad();

        return new BuffPoint4f((float)(getX() * r), (float)(getY() * r), (float)(getZ() * r), (float)(getW() * r));

        //return new BuffPoint4f(new Vector4f(this).vectorProjection(where));
    }

//<editor-fold defaultstate="collapsed" desc="BuffPoint4">
    @Override
    public BuffPoint4f addAndSet(Vector4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        set((float)(getX() + _other.getX()), (float)(getY() + _other.getY()), (float)(getZ() + _other.getZ()), (float)(getW() + _other.getW()));
        return this;
    }

    @Override
    public BuffPoint4f subAndSet(Vector4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        set((float)(getX() - _other.getX()), (float)(getY() - _other.getY()), (float)(getZ() - _other.getZ()), (float)(getW() - _other.getW()));
        return this;
    }

    @Override
    public BuffPoint4f lerpAndSet(Point4 other, double alpha) {
        return linealAndSet(other, 1 - alpha, alpha);
    }

    @Override
    public BuffPoint4f linealAndSet(Point4 other, double alpha, double beta) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        set((float)(alpha * getX() + beta * _other.getX()),
            (float)(alpha * getY() + beta * _other.getY()),
            (float)(alpha * getZ() + beta * _other.getZ()),
            (float)(alpha * getW() + beta * _other.getW()));
        return this;
    }

    @Override
    public BuffPoint4f vectorProjectionAndSet(Vector4 where) {
        Tuple4_Float _where = TupleUtils.toTuple4_Float(where);

        double dot = getX() * _where.getX() + getY() * _where.getY() + getZ() * _where.getZ() + getW() * _where.getW();
        double r = dot / where.getLengthCuad();

        set((float)(getX() * r), (float)(getY() * r), (float)(getZ() * r), (float)(getW() * r));
        return this;

        //set(new BuffVector4f(this).vectorProjectionAndSet(where));
        //return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Point4">
    @Override
    public int getQuadrant() {
        int v = 0;
        int p = 1;
        if (getX() < 0) {
            v |= p;
            p <<= 1;
        }
        if (getY() < 0) {
            v |= p;
            p <<= 1;
        }
        if (getZ() < 0) {
            v |= p;
            p <<= 1;
        }
        if (getW() < 0) {
            v |= p;
            p <<= 1;
        }
        return v;
    }

    @Override
    public double getDistance(Point4 other) {
        return Math.sqrt(getDistanceCuad(other));
    }

    @Override
    public double getDistanceCuad(Point4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return square(_other.getX() - getX())
               + square(_other.getY() - getY())
               + square(_other.getZ() - getZ())
               + square(_other.getW() - getW());
    }

    @Override
    public double getDistanceL1(Point4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return Math.abs(_other.getX() - getX())
               + Math.abs(_other.getY() - getY())
               + Math.abs(_other.getZ() - getZ())
               + Math.abs(_other.getW() - getW());
    }

    @Override
    public BuffPoint4f add(Vector4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return new BuffPoint4f((float)(getX() + _other.getX()), (float)(getY() + _other.getY()), (float)(getZ() + _other.getZ()), (float)(getW() + _other.getW()));
    }

    @Override
    public BuffPoint4f sub(Vector4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return new BuffPoint4f((float)(getX() - _other.getX()), (float)(getY() - _other.getY()), (float)(getZ() - _other.getZ()), (float)(getW() - _other.getW()));
    }

    @Override
    public BuffVector4f vectorTo(Point4 other) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return new BuffVector4f((float)(_other.getX() - getX()), (float)(_other.getY() - getY()), (float)(_other.getZ() - getZ()), (float)(_other.getW() - getW()));
    }

    @Override
    public BuffPoint4f lerp(Point4 other, double alpha) {
        return lineal(other, 1 - alpha, alpha);
    }

    @Override
    public double invLerp(Point4 other, Point4 pLerp) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);
        Tuple4_Float _pLerp = TupleUtils.toTuple4_Float(pLerp);

        double x1 = _other.getX() - getX();
        double y1 = _other.getY() - getY();
        double z1 = _other.getZ() - getZ();
        double w1 = _other.getW() - getW();
        double x2 = _pLerp.getX() - getX();
        double y2 = _pLerp.getY() - getY();
        double z2 = _pLerp.getZ() - getZ();
        double w2 = _pLerp.getW() - getW();
        return (x1 * x2 + y1 * y2 + z1 * z2 + w1 * w2) / Math.sqrt(x1 * x1 + y1 * y1 + z1 * z1 + w1 * w1);
    }

    @Override
    public BuffPoint4f lineal(Point4 other, double alpha, double beta) {
        Tuple4_Float _other = TupleUtils.toTuple4_Float(other);

        return new BuffPoint4f((float)(alpha * getX() + beta * _other.getX()),
                               (float)(alpha * getY() + beta * _other.getY()),
                               (float)(alpha * getZ() + beta * _other.getZ()),
                               (float)(alpha * getW() + beta * _other.getW()));
    }

    @Override
    public double scalarProjection(Vector4 where) {
        return new BuffVector4f(this).dot(where) / where.getLength();
    }

    @Override
    public BuffPoint4f vectorProjection(Vector4 where) {
        Tuple4_Float _where = TupleUtils.toTuple4_Float(where);

        double dot = getX() * _where.getX() + getY() * _where.getY() + getZ() * _where.getZ() + getW() * _where.getW();
        double r = dot / where.getLengthCuad();

        return new BuffPoint4f((float)(getX() * r), (float)(getY() * r), (float)(getZ() * r), (float)(getW() * r));

        //return new BuffPoint4f(new BuffVector4f(this).vectorProjection(where));
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public BuffPoint4f clone() throws CloneNotSupportedException {
        return (BuffPoint4f)super.clone();
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private static float square(float v) {
        return v*v;
    }
//</editor-fold>
}
