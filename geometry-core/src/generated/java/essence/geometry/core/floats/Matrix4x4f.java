/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core.floats;

import java.util.logging.Logger;
import essence.util.math.EpsilonEquatable;
import essence.geometry.core.DoubleUtils;
import essence.geometry.core.SingularMatrixException;
import essence.geometry.core.Tuple;
import essence.geometry.core.Vector4;
import essence.geometry.core.Vector3;
import essence.geometry.core.Point3;
import essence.geometry.core.VectorFormatInfo;

import static essence.geometry.core.FloatUtils.EPSILON;

/**
 * Basic implementation of a 4x4 matrix.
 */
public class Matrix4x4f implements Cloneable, EpsilonEquatable<Matrix4x4f> {
//<editor-fold defaultstate="collapsed" desc="fields">
    /** M00 component. */
    private float m00;
    /** M01 component. */
    private float m01;
    /** M02 component. */
    private float m02;
    /** M03 component. */
    private float m03;
    /** M10 component. */
    private float m10;
    /** M11 component. */
    private float m11;
    /** M12 component. */
    private float m12;
    /** M13 component. */
    private float m13;
    /** M20 component. */
    private float m20;
    /** M21 component. */
    private float m21;
    /** M22 component. */
    private float m22;
    /** M23 component. */
    private float m23;
    /** M30 component. */
    private float m30;
    /** M31 component. */
    private float m31;
    /** M32 component. */
    private float m32;
    /** M33 component. */
    private float m33;
    private static final Logger LOG = Logger.getLogger(Matrix4x4f.class.getName());
    private static String format;
//</editor-fold>

    /**
     * Empty constructor.
     */
    public Matrix4x4f() {
        this(0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0,
             0, 0, 0, 0);
    }

    /**
     * This constructor sets the properties of this matrix.
     *
     * @param m00 Value of the property M00.
     * @param m01 Value of the property M01.
     * @param m02 Value of the property M02.
     * @param m03 Value of the property M03.
     * @param m10 Value of the property M10.
     * @param m11 Value of the property M11.
     * @param m12 Value of the property M12.
     * @param m13 Value of the property M13.
     * @param m20 Value of the property M20.
     * @param m21 Value of the property M21.
     * @param m22 Value of the property M22.
     * @param m23 Value of the property M23.
     * @param m30 Value of the property M30.
     * @param m31 Value of the property M31.
     * @param m32 Value of the property M32.
     * @param m33 Value of the property M33.
     */
    public Matrix4x4f(float m00, float m01, float m02, float m03,
                      float m10, float m11, float m12, float m13,
                      float m20, float m21, float m22, float m23,
                      float m30, float m31, float m32, float m33) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
    }

    /*
     * This method gets an identity matrix.
     *
     * return Identity matrix.
     */
    public static Matrix4x4f getIdentity() {
        return new Matrix4x4f(1, 0, 0, 0,
                              0, 1, 0, 0,
                              0, 0, 1, 0,
                              0, 0, 0, 1);
    }

    protected static Tuple4_Float toTuple(Tuple other) {
        if (other instanceof Tuple4_Float) {
            return (Tuple4_Float)other;
        }
        Tuple4f aux = new Tuple4f();
        other.getInto(aux);
        return aux;
    }

//<editor-fold defaultstate="collapsed" desc="accessors">
    /*
     * This method gets the number of rows.
     *
     * @return Number of rows.
     */
    public int sizeRows() {
        return 4;
    }

    /*
     * This method gets the number of columns.
     *
     * @return Number of columns.
     */
    public int sizeCols() {
        return 4;
    }

    /*
     * This method evaluates is {@code this} matrix is squared.
     *
     * @return {@code True} if {@code this} matrix is squared. {@code False} otherwise.
     */
    public boolean isSquared() {
        return true;
    }

    /**
     * This methods gets the property [r, c].
     *
     * @param r Number of the row.
     * @param c Number of the column.
     * @return Property [r, c].
     */
    public float get(int r, int c) {
        switch(r) {
        case 0:
            switch(c) {
            case 0:
                return m00;
            case 1:
                return m01;
            case 2:
                return m02;
            case 3:
                return m03;
            }
        case 1:
            switch(c) {
            case 0:
                return m10;
            case 1:
                return m11;
            case 2:
                return m12;
            case 3:
                return m13;
            }
        case 2:
            switch(c) {
            case 0:
                return m20;
            case 1:
                return m21;
            case 2:
                return m22;
            case 3:
                return m23;
            }
        case 3:
            switch(c) {
            case 0:
                return m30;
            case 1:
                return m31;
            case 2:
                return m32;
            case 3:
                return m33;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    /**
     * This methods sets the property [r, c].
     *
     * @param r Number of the row.
     * @param c Number of the column.
     * @param value Property [r, c].
     */
    public void set(int r, int c, float value) {
        switch(r) {
        case 0:
            switch(c) {
            case 0:
                m00 = value;
                return;
            case 1:
                m01 = value;
                return;
            case 2:
                m02 = value;
                return;
            case 3:
                m03 = value;
                return;
            }
        case 1:
            switch(c) {
            case 0:
                m10 = value;
                return;
            case 1:
                m11 = value;
                return;
            case 2:
                m12 = value;
                return;
            case 3:
                m13 = value;
                return;
            }
        case 2:
            switch(c) {
            case 0:
                m20 = value;
                return;
            case 1:
                m21 = value;
                return;
            case 2:
                m22 = value;
                return;
            case 3:
                m23 = value;
                return;
            }
        case 3:
            switch(c) {
            case 0:
                m30 = value;
                return;
            case 1:
                m31 = value;
                return;
            case 2:
                m32 = value;
                return;
            case 3:
                m33 = value;
                return;
            }
        }
        throw new IndexOutOfBoundsException();
    }

    /**
     * This methods gets the property [0, 0].
     *
     * @return Property [0, 0].
     */
    public float getM00() {
        return m00;
    }

    /**
     * This methods sets the property [0, 0].
     *
     * @param value Property [0, 0].
     */
    public void setM00(float value) {
        m00 = value;
    }

    /**
     * This methods gets the property [0, 1].
     *
     * @return Property [0, 1].
     */
    public float getM01() {
        return m01;
    }

    /**
     * This methods sets the property [0, 1].
     *
     * @param value Property [0, 1].
     */
    public void setM01(float value) {
        m01 = value;
    }

    /**
     * This methods gets the property [0, 2].
     *
     * @return Property [0, 2].
     */
    public float getM02() {
        return m02;
    }

    /**
     * This methods sets the property [0, 2].
     *
     * @param value Property [0, 2].
     */
    public void setM02(float value) {
        m02 = value;
    }

    /**
     * This methods gets the property [0, 3].
     *
     * @return Property [0, 3].
     */
    public float getM03() {
        return m03;
    }

    /**
     * This methods sets the property [0, 3].
     *
     * @param value Property [0, 3].
     */
    public void setM03(float value) {
        m03 = value;
    }

    /**
     * This methods gets the property [1, 0].
     *
     * @return Property [1, 0].
     */
    public float getM10() {
        return m10;
    }

    /**
     * This methods sets the property [1, 0].
     *
     * @param value Property [1, 0].
     */
    public void setM10(float value) {
        m10 = value;
    }

    /**
     * This methods gets the property [1, 1].
     *
     * @return Property [1, 1].
     */
    public float getM11() {
        return m11;
    }

    /**
     * This methods sets the property [1, 1].
     *
     * @param value Property [1, 1].
     */
    public void setM11(float value) {
        m11 = value;
    }

    /**
     * This methods gets the property [1, 2].
     *
     * @return Property [1, 2].
     */
    public float getM12() {
        return m12;
    }

    /**
     * This methods sets the property [1, 2].
     *
     * @param value Property [1, 2].
     */
    public void setM12(float value) {
        m12 = value;
    }

    /**
     * This methods gets the property [1, 3].
     *
     * @return Property [1, 3].
     */
    public float getM13() {
        return m13;
    }

    /**
     * This methods sets the property [1, 3].
     *
     * @param value Property [1, 3].
     */
    public void setM13(float value) {
        m13 = value;
    }

    /**
     * This methods gets the property [2, 0].
     *
     * @return Property [2, 0].
     */
    public float getM20() {
        return m20;
    }

    /**
     * This methods sets the property [2, 0].
     *
     * @param value Property [2, 0].
     */
    public void setM20(float value) {
        m20 = value;
    }

    /**
     * This methods gets the property [2, 1].
     *
     * @return Property [2, 1].
     */
    public float getM21() {
        return m21;
    }

    /**
     * This methods sets the property [2, 1].
     *
     * @param value Property [2, 1].
     */
    public void setM21(float value) {
        m21 = value;
    }

    /**
     * This methods gets the property [2, 2].
     *
     * @return Property [2, 2].
     */
    public float getM22() {
        return m22;
    }

    /**
     * This methods sets the property [2, 2].
     *
     * @param value Property [2, 2].
     */
    public void setM22(float value) {
        m22 = value;
    }

    /**
     * This methods gets the property [2, 3].
     *
     * @return Property [2, 3].
     */
    public float getM23() {
        return m23;
    }

    /**
     * This methods sets the property [2, 3].
     *
     * @param value Property [2, 3].
     */
    public void setM23(float value) {
        m23 = value;
    }

    /**
     * This methods gets the property [3, 0].
     *
     * @return Property [3, 0].
     */
    public float getM30() {
        return m30;
    }

    /**
     * This methods sets the property [3, 0].
     *
     * @param value Property [3, 0].
     */
    public void setM30(float value) {
        m30 = value;
    }

    /**
     * This methods gets the property [3, 1].
     *
     * @return Property [3, 1].
     */
    public float getM31() {
        return m31;
    }

    /**
     * This methods sets the property [3, 1].
     *
     * @param value Property [3, 1].
     */
    public void setM31(float value) {
        m31 = value;
    }

    /**
     * This methods gets the property [3, 2].
     *
     * @return Property [3, 2].
     */
    public float getM32() {
        return m32;
    }

    /**
     * This methods sets the property [3, 2].
     *
     * @param value Property [3, 2].
     */
    public void setM32(float value) {
        m32 = value;
    }

    /**
     * This methods gets the property [3, 3].
     *
     * @return Property [3, 3].
     */
    public float getM33() {
        return m33;
    }

    /**
     * This methods sets the property [3, 3].
     *
     * @param value Property [3, 3].
     */
    public void setM33(float value) {
        m33 = value;
    }

    /**
     * This methods sets all the properties.
     *
     * @param m00 Property [0, 0].
     * @param m01 Property [0, 1].
     * @param m02 Property [0, 2].
     * @param m03 Property [0, 3].
     * @param m10 Property [1, 0].
     * @param m11 Property [1, 1].
     * @param m12 Property [1, 2].
     * @param m13 Property [1, 3].
     * @param m20 Property [2, 0].
     * @param m21 Property [2, 1].
     * @param m22 Property [2, 2].
     * @param m23 Property [2, 3].
     * @param m30 Property [3, 0].
     * @param m31 Property [3, 1].
     * @param m32 Property [3, 2].
     * @param m33 Property [3, 3].
     */
    public Matrix4x4f set(float m00, float m01, float m02, float m03,
                          float m10, float m11, float m12, float m13,
                          float m20, float m21, float m22, float m23,
                          float m30, float m31, float m32, float m33) {
        this.m00 = m00;
        this.m01 = m01;
        this.m02 = m02;
        this.m03 = m03;
        this.m10 = m10;
        this.m11 = m11;
        this.m12 = m12;
        this.m13 = m13;
        this.m20 = m20;
        this.m21 = m21;
        this.m22 = m22;
        this.m23 = m23;
        this.m30 = m30;
        this.m31 = m31;
        this.m32 = m32;
        this.m33 = m33;
        return this;
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="Transforms">
    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void mul(Vector4 v) {
        if (v instanceof Vector4f) {
            mul((Vector4f)v);
        } else {
            Vector4f aux = new Vector4f(v);
            premul(aux);
            v.set(aux);
        }
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void mul(Vector4f v) {
        v.set(getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ() + getM03() * v.getW(),
              getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ() + getM13() * v.getW(),
              getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ() + getM23() * v.getW(),
              getM30() * v.getX() + getM31() * v.getY() + getM32() * v.getZ() + getM33() * v.getW());
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void premul(Vector4 v) {
        if (v instanceof Vector4f) {
            premul((Vector4f)v);
        } else {
            Vector4f aux = new Vector4f(v);
            premul(aux);
            v.set(aux);
        }
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void premul(Vector4f v) {
        v.set(v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20() + v.getW() * getM30(),
              v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21() + v.getW() * getM31(),
              v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22() + v.getW() * getM32(),
              v.getX() * getM03() + v.getY() * getM13() + v.getZ() * getM23() + v.getW() * getM33());
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void mul(Vector3 v) {
        if (v instanceof Vector3f) {
            mul((Vector3f)v);
        } else {
            Vector3f aux = new Vector3f(v);
            mul(aux);
            v.set(aux);
        }
    }

    /**
     * This method multiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void mul(Vector3f v) {
        float x = getM00() * v.getX() + getM01() * v.getY() + getM02() * v.getZ();
        float y = getM10() * v.getX() + getM11() * v.getY() + getM12() * v.getZ();
        float z = getM20() * v.getX() + getM21() * v.getY() + getM22() * v.getZ();
        v.set(x, y, z);
    }

    /**
     * This method multiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public void mul(Point3 p) {
        if (p instanceof Point3f) {
            mul((Point3f)p);
        } else {
            Point3f aux = new Point3f(p);
            mul(aux);
            p.set(aux);
        }
    }

    /**
     * This method multiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public void mul(Point3f p) {
        float x = getM00() * p.getX() + getM01() * p.getY() + getM02() * p.getZ() + getM03();
        float y = getM10() * p.getX() + getM11() * p.getY() + getM12() * p.getZ() + getM13();
        float z = getM20() * p.getX() + getM21() * p.getY() + getM22() * p.getZ() + getM23();
        float w = getM30() * p.getX() + getM31() * p.getY() + getM32() * p.getZ() + getM33();
        p.set(x / w, y / w, z / w);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void premul(Vector3 v) {
        if (v instanceof Vector3f) {
            premul((Vector3f)v);
        } else {
            Vector3f aux = new Vector3f(v);
            premul(aux);
            v.set(aux);
        }
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code v} vector.
     *
     * @param v Vector.
     */
    public void premul(Vector3f v) {
        float x = v.getX() * getM00() + v.getY() * getM10() + v.getZ() * getM20();
        float y = v.getX() * getM01() + v.getY() * getM11() + v.getZ() * getM21();
        float z = v.getX() * getM02() + v.getY() * getM12() + v.getZ() * getM22();
        v.set(x, y, z);
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public void premul(Point3 p) {
        if (p instanceof Point3f) {
            premul((Point3f)p);
        } else {
            Point3f aux = new Point3f(p);
            premul(aux);
            p.set(aux);
        }
    }

    /**
     * This method premultiplies {@code this} matrix by the {@code p} point.
     *
     * @param p Point.
     */
    public void premul(Point3f p) {
        float x = p.getX() * getM00() + p.getY() * getM10() + p.getZ() * getM20() + getM30();
        float y = p.getX() * getM01() + p.getY() * getM11() + p.getZ() * getM21() + getM31();
        float z = p.getX() * getM02() + p.getY() * getM12() + p.getZ() * getM22() + getM32();
        float w = p.getX() * getM03() + p.getY() * getM13() + p.getZ() * getM23() + getM33();
        p.set(x / w, y / w, z / w);
    }
//</editor-fold>

    public final boolean isValid() {
        return !isNaN() && !isInfinity();
    }

    /**
     * This method evaluates is {@code this} matrix contains any NaN component.
     *
     * @return {@code True} if {@code this} matrix contains any NaN component. {@code False} otherwise.
     */
    public final boolean isNaN() {
        return Float.isNaN(getM00()) || Float.isNaN(getM01()) || Float.isNaN(getM02()) || Float.isNaN(getM03()) ||
               Float.isNaN(getM10()) || Float.isNaN(getM11()) || Float.isNaN(getM12()) || Float.isNaN(getM13()) ||
               Float.isNaN(getM20()) || Float.isNaN(getM21()) || Float.isNaN(getM22()) || Float.isNaN(getM23()) ||
               Float.isNaN(getM30()) || Float.isNaN(getM31()) || Float.isNaN(getM32()) || Float.isNaN(getM33());
    }

    /**
     * This method evaluates is {@code this} matrix contains any infinity component.
     *
     * @return {@code True} if {@code this} matrix contains any infinity component. {@code False} otherwise.
     */
    public final boolean isInfinity() {
        return Float.isInfinite(getM00()) || Float.isInfinite(getM01()) || Float.isInfinite(getM02()) || Float.isInfinite(getM03()) ||
               Float.isInfinite(getM10()) || Float.isInfinite(getM11()) || Float.isInfinite(getM12()) || Float.isInfinite(getM13()) ||
               Float.isInfinite(getM20()) || Float.isInfinite(getM21()) || Float.isInfinite(getM22()) || Float.isInfinite(getM23()) ||
               Float.isInfinite(getM30()) || Float.isInfinite(getM31()) || Float.isInfinite(getM32()) || Float.isInfinite(getM33());
    }

    /**
     * This method evaluates is {@code this} matrix is zero.
     *
     * @return {@code True} if {@code this} matrix is zero. {@code False} otherwise.
     */
    public final boolean isZero() {
        return isZero(EPSILON);
    }

    /**
     * This method evaluates is {@code this} matrix is zero.
     *
     * @param epsilon Error.
     * @return {@code True} if {@code this} matrix is zero. {@code False} otherwise.
     */
    public final boolean isZero(double epsilon) {
        return epsilonEquals(0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0,
                             0, 0, 0, 0, epsilon);
    }

    /**
     * This method evaluates is {@code this} matrix is the identity.
     *
     * @return {@code True} if {@code this} matrix is the identity. {@code False} otherwise.
     */
    public boolean isIdentity() {
        return isIdentity(EPSILON);
    }

    /**
     * This method evaluates is {@code this} matrix is the identity.
     *
     * @param epsilon Error.
     * @return {@code True} if {@code this} matrix is the identity. {@code False} otherwise.
     */
    public boolean isIdentity(double epsilon) {
        return epsilonEquals(1, 0, 0, 0,
                             0, 1, 0, 0,
                             0, 0, 1, 0,
                             0, 0, 0, 1, epsilon);
    }

    /**
     * This method evaluates is {@code this} matrix is the invertible.
     *
     * @return {@code True} if {@code this} matrix is invertible. {@code False} otherwise.
     */
    public boolean isInvertible() {
        return isInvertible(EPSILON);
    }

    /**
     * This method evaluates is {@code this} matrix is the invertible.
     *
     * @param epsilon Error.
     * @return {@code True} if {@code this} matrix is invertible. {@code False} otherwise.
     */
    public boolean isInvertible(double epsilon) {
        return !DoubleUtils.epsilonEquals(getDeterminant(), epsilon);
    }

    /**
     * This method evaluates the determinant of {@code this} matrix
     *
     * @return Determinant.
     */
    public double getDeterminant() {
        return ((getM00() * getM11() - getM01() * getM10()) * (getM22() * getM33() - getM23() * getM32())
                - (getM00() * getM12() - getM02() * getM10()) * (getM21() * getM33() - getM23() * getM31())
                + (getM00() * getM13() - getM03() * getM10()) * (getM21() * getM32() - getM22() * getM31())
                + (getM01() * getM12() - getM02() * getM11()) * (getM20() * getM33() - getM23() * getM30())
                - (getM01() * getM13() - getM03() * getM11()) * (getM20() * getM32() - getM22() * getM30())
                + (getM02() * getM13() - getM03() * getM12()) * (getM20() * getM31() - getM21() * getM30()));
    }

    /**
     * This method adds {@code this} matrix and {@code other} matrix.
     *
     * @param other Other matrix.
     * @return {@code this + other}
     */
    public Matrix4x4f add(Matrix4x4f other) {
        return clone().addAndSet(other);
    }

    /**
     * This method subs {@code this} matrix and {@code other} matrix.
     *
     * @param other Other matrix.
     * @return {@code this - other}
     */
    public Matrix4x4f sub(Matrix4x4f other) {
        return clone().subAndSet(other);
    }

    /**
     * This method multiplies {@code this} matrix by {@code v}.
     *
     * @param v Scalar.
     * @return {@code this * v}
     */
    public Matrix4x4f mul(double v) {
        return clone().mulAndSet(v);
    }

    /**
     * This method divides {@code this} matrix by {@code v}.
     *
     * @param v Scalar.
     * @return {@code this / v}
     */
    public Matrix4x4f div(double v) {
        return clone().divAndSet(v);
    }

    /**
     * This method multiplies {@code this} matrix by {@code other} matrix.
     *
     * @param other Other matrix.
     * @return {@code this * other}
     */
    public Matrix4x4f mul(Matrix4x4f other) {
        return clone().mulAndSet(other);
    }

    /**
     * This method changes the sign of {@code this} matrix.
     *
     * @return {@code -this}
     */
    public Matrix4x4f neg() {
        return clone().negAndSet();
    }

    /**
     * This method calculates the absolute value of {@code this} matrix.
     *
     * @return {@code abs(this)}
     */
    public Matrix4x4f abs() {
        return clone().absAndSet();
    }

    /**
     * This method calculates the transpose of {@code this} matrix.
     *
     * @return {@code transpose(this)}
     */
    public Matrix4x4f transpose() {
        return clone().transposeAndSet();
    }

    /**
     * This method evaluates the inverse of {@code this} matrix.
     *
     * @return {@code inverse(this)}
     */
    public Matrix4x4f inverse() throws SingularMatrixException {
        return clone().inverseAndSet();
    }

    /**
     * This method sets {@code this} matrix to zero.
     *
     * @return {@code this = zero}
     */
    public Matrix4x4f setZero() {
        set(0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0,
            0, 0, 0, 0);
        return this;
    }

    /**
     * This method sets {@code this} matrix to the identity.
     *
     * @return {@code this = identity}
     */
    public Matrix4x4f setIdentity() {
        set(1, 0, 0, 0,
            0, 1, 0, 0,
            0, 0, 1, 0,
            0, 0, 0, 1);
        return this;
    }

    /**
     * This method adds {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this + other}
     */
    public Matrix4x4f addAndSet(Matrix4x4f other) {
        set(getM00() + other.getM00(), getM01() + other.getM01(), getM02() + other.getM02(), getM03() + other.getM03(),
            getM10() + other.getM10(), getM11() + other.getM11(), getM12() + other.getM12(), getM13() + other.getM13(),
            getM20() + other.getM20(), getM21() + other.getM21(), getM22() + other.getM22(), getM23() + other.getM23(),
            getM30() + other.getM30(), getM31() + other.getM31(), getM32() + other.getM32(), getM33() + other.getM33());
        return this;
    }

    /**
     * This method subs {@code this} matrix and {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this - other}
     */
    public Matrix4x4f subAndSet(Matrix4x4f other) {
        set(getM00() - other.getM00(), getM01() - other.getM01(), getM02() - other.getM02(), getM03() - other.getM03(),
            getM10() - other.getM10(), getM11() - other.getM11(), getM12() - other.getM12(), getM13() - other.getM13(),
            getM20() - other.getM20(), getM21() - other.getM21(), getM22() - other.getM22(), getM23() - other.getM23(),
            getM30() - other.getM30(), getM31() - other.getM31(), getM32() - other.getM32(), getM33() - other.getM33());
        return this;
    }

    /**
     * This method multiplies {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this * v}
     */
    public Matrix4x4f mulAndSet(double v) {
        set((float)(getM00() * v), (float)(getM01() * v), (float)(getM02() * v), (float)(getM03() * v),
            (float)(getM10() * v), (float)(getM11() * v), (float)(getM12() * v), (float)(getM13() * v),
            (float)(getM20() * v), (float)(getM21() * v), (float)(getM22() * v), (float)(getM23() * v),
            (float)(getM30() * v), (float)(getM31() * v), (float)(getM32() * v), (float)(getM33() * v));
        return this;
    }

    /**
     * This method divides {@code this} matrix by {@code v} and sets the result
     * into {@code this}.
     *
     * @param v Scalar.
     * @return {@code this = this / v}
     */
    public Matrix4x4f divAndSet(double v) {
        set((float)(getM00() / v), (float)(getM01() / v), (float)(getM02() / v), (float)(getM03() / v),
            (float)(getM10() / v), (float)(getM11() / v), (float)(getM12() / v), (float)(getM13() / v),
            (float)(getM20() / v), (float)(getM21() / v), (float)(getM22() / v), (float)(getM23() / v),
            (float)(getM30() / v), (float)(getM31() / v), (float)(getM32() / v), (float)(getM33() / v));
        return this;
    }

    /**
     * This method multiplies {@code this} matrix by {@code other} matrix and sets the result
     * into {@code this}.
     *
     * @param other Other matrix.
     * @return {@code this = this * other}
     */
    public Matrix4x4f mulAndSet(Matrix4x4f other) {
        set(getM00() * other.getM00() + getM01() * other.getM10() + getM02() * other.getM20() + getM03() * other.getM30(),
            getM00() * other.getM01() + getM01() * other.getM11() + getM02() * other.getM21() + getM03() * other.getM31(),
            getM00() * other.getM02() + getM01() * other.getM12() + getM02() * other.getM22() + getM03() * other.getM32(),
            getM00() * other.getM03() + getM01() * other.getM13() + getM02() * other.getM23() + getM03() * other.getM33(),
            getM10() * other.getM00() + getM11() * other.getM10() + getM12() * other.getM20() + getM13() * other.getM30(),
            getM10() * other.getM01() + getM11() * other.getM11() + getM12() * other.getM21() + getM13() * other.getM31(),
            getM10() * other.getM02() + getM11() * other.getM12() + getM12() * other.getM22() + getM13() * other.getM32(),
            getM10() * other.getM03() + getM11() * other.getM13() + getM12() * other.getM23() + getM13() * other.getM33(),
            getM20() * other.getM00() + getM21() * other.getM10() + getM22() * other.getM20() + getM23() * other.getM30(),
            getM20() * other.getM01() + getM21() * other.getM11() + getM22() * other.getM21() + getM23() * other.getM31(),
            getM20() * other.getM02() + getM21() * other.getM12() + getM22() * other.getM22() + getM23() * other.getM32(),
            getM20() * other.getM03() + getM21() * other.getM13() + getM22() * other.getM23() + getM23() * other.getM33(),
            getM30() * other.getM00() + getM31() * other.getM10() + getM32() * other.getM20() + getM33() * other.getM30(),
            getM30() * other.getM01() + getM31() * other.getM11() + getM32() * other.getM21() + getM33() * other.getM31(),
            getM30() * other.getM02() + getM31() * other.getM12() + getM32() * other.getM22() + getM33() * other.getM32(),
            getM30() * other.getM03() + getM31() * other.getM13() + getM32() * other.getM23() + getM33() * other.getM33());
        return this;
    }

    /**
     * This method changes the sign of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = -this}
     */
    public Matrix4x4f negAndSet() {
        set(-getM00(), -getM01(), -getM02(), -getM03(),
            -getM10(), -getM11(), -getM12(), -getM13(),
            -getM20(), -getM21(), -getM22(), -getM23(),
            -getM30(), -getM31(), -getM32(), -getM33());
        return this;
    }

    /**
     * This method calculates the absolute value of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = abs(this)}
     */
    public Matrix4x4f absAndSet() {
        set(Math.abs(getM00()), Math.abs(getM01()), Math.abs(getM02()), Math.abs(getM03()),
            Math.abs(getM10()), Math.abs(getM11()), Math.abs(getM12()), Math.abs(getM13()),
            Math.abs(getM20()), Math.abs(getM21()), Math.abs(getM22()), Math.abs(getM23()),
            Math.abs(getM30()), Math.abs(getM31()), Math.abs(getM32()), Math.abs(getM33()));
        return this;
    }

    /**
     * This method calculates the transpose of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = transpose(this)}
     */
    public Matrix4x4f transposeAndSet() {
        set(getM00(), getM10(), getM20(), getM30(),
            getM01(), getM11(), getM21(), getM31(),
            getM02(), getM12(), getM22(), getM32(),
            getM03(), getM13(), getM23(), getM33());
        return this;
    }

    /**
     * This method evaluates the inverse of {@code this} matrix and sets the result
     * into {@code this}.
     *
     * @return {@code this = this^-1}
     */
    public Matrix4x4f inverseAndSet() throws SingularMatrixException {
        double s = getDeterminant();
        if (DoubleUtils.epsilonZero(s, EPSILON)) {
            throw new SingularMatrixException();
        }

        s = 1 / s;
        set(
            (float)((getM11() * (getM22() * getM33() - getM23() * getM32())
                     + getM12() * (getM23() * getM31() - getM21() * getM33())
                     + getM13() * (getM21() * getM32() - getM22() * getM31())) * s),
            (float)((getM21() * (getM02() * getM33() - getM03() * getM32())
                     + getM22() * (getM03() * getM31() - getM01() * getM33())
                     + getM23() * (getM01() * getM32() - getM02() * getM31())) * s),
            (float)((getM31() * (getM02() * getM13() - getM03() * getM12())
                     + getM32() * (getM03() * getM11() - getM01() * getM13())
                     + getM33() * (getM01() * getM12() - getM02() * getM11())) * s),
            (float)((getM01() * (getM13() * getM22() - getM12() * getM23())
                     + getM02() * (getM11() * getM23() - getM13() * getM21())
                     + getM03() * (getM12() * getM21() - getM11() * getM22())) * s),
            (float)((getM12() * (getM20() * getM33() - getM23() * getM30())
                     + getM13() * (getM22() * getM30() - getM20() * getM32())
                     + getM10() * (getM23() * getM32() - getM22() * getM33())) * s),
            (float)((getM22() * (getM00() * getM33() - getM03() * getM30())
                     + getM23() * (getM02() * getM30() - getM00() * getM32())
                     + getM20() * (getM03() * getM32() - getM02() * getM33())) * s),
            (float)((getM32() * (getM00() * getM13() - getM03() * getM10())
                     + getM33() * (getM02() * getM10() - getM00() * getM12())
                     + getM30() * (getM03() * getM12() - getM02() * getM13())) * s),
            (float)((getM02() * (getM13() * getM20() - getM10() * getM23())
                     + getM03() * (getM10() * getM22() - getM12() * getM20())
                     + getM00() * (getM12() * getM23() - getM13() * getM22())) * s),
            (float)((getM13() * (getM20() * getM31() - getM21() * getM30())
                     + getM10() * (getM21() * getM33() - getM23() * getM31())
                     + getM11() * (getM23() * getM30() - getM20() * getM33())) * s),
            (float)((getM23() * (getM00() * getM31() - getM01() * getM30())
                     + getM20() * (getM01() * getM33() - getM03() * getM31())
                     + getM21() * (getM03() * getM30() - getM00() * getM33())) * s),
            (float)((getM33() * (getM00() * getM11() - getM01() * getM10())
                     + getM30() * (getM01() * getM13() - getM03() * getM11())
                     + getM31() * (getM03() * getM10() - getM00() * getM13())) * s),
            (float)((getM03() * (getM11() * getM20() - getM10() * getM21())
                     + getM00() * (getM13() * getM21() - getM11() * getM23())
                     + getM01() * (getM10() * getM23() - getM13() * getM20())) * s),
            (float)((getM10() * (getM22() * getM31() - getM21() * getM32())
                     + getM11() * (getM20() * getM32() - getM22() * getM30())
                     + getM12() * (getM21() * getM30() - getM20() * getM31())) * s),
            (float)((getM20() * (getM02() * getM31() - getM01() * getM32())
                     + getM21() * (getM00() * getM32() - getM02() * getM30())
                     + getM22() * (getM01() * getM30() - getM00() * getM31())) * s),
            (float)((getM30() * (getM02() * getM11() - getM01() * getM12())
                     + getM31() * (getM00() * getM12() - getM02() * getM10())
                     + getM32() * (getM01() * getM10() - getM00() * getM11())) * s),
            (float)((getM00() * (getM11() * getM22() - getM12() * getM21())
                     + getM01() * (getM12() * getM20() - getM10() * getM22())
                     + getM02() * (getM10() * getM21() - getM11() * getM20())) * s));
        return this;
    }

//<editor-fold defaultstate="collapsed" desc="Object">
    @Override
    public String toString() {
        VectorFormatInfo vfi = VectorFormatInfo.CURRENT_INFO;
        return String.format(getFormat(), vfi.getBeg(), vfi.getSep(), vfi.getEnd(),
                             getM00(),getM01(),getM02(),getM03(),
                             getM10(),getM11(),getM12(),getM13(),
                             getM20(),getM21(),getM22(),getM23(),
                             getM30(),getM31(),getM32(),getM33());
    }

    public boolean equals(Matrix4x4f other) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }

        return this.equals(getM00(), getM01(), getM02(), getM03(),
                           getM10(), getM11(), getM12(), getM13(),
                           getM20(), getM21(), getM22(), getM23(),
                           getM30(), getM31(), getM32(), getM33());
    }

    @Override
    public boolean equals(Object other) {
        return ((other instanceof Matrix4x4f) && this.equals((Matrix4x4f) other));
    }

    @Override
    public int hashCode() {
        // https://stackoverflow.com/questions/113511/best-implementation-for-hashcode-method
        // http://www.jarvana.com/jarvana/view/org/apache/lucene/lucene-spatial/2.9.3/lucene-spatial-2.9.3-sources.jar!/org/apache/lucene/spatial/geometry/shape/Vector2D.java
        final int prime = 31;
        int hash = 1;
        hash = prime * hash + Float.hashCode(getM00());
        hash = prime * hash + Float.hashCode(getM01());
        hash = prime * hash + Float.hashCode(getM02());
        hash = prime * hash + Float.hashCode(getM03());
        hash = prime * hash + Float.hashCode(getM10());
        hash = prime * hash + Float.hashCode(getM11());
        hash = prime * hash + Float.hashCode(getM12());
        hash = prime * hash + Float.hashCode(getM13());
        hash = prime * hash + Float.hashCode(getM20());
        hash = prime * hash + Float.hashCode(getM21());
        hash = prime * hash + Float.hashCode(getM22());
        hash = prime * hash + Float.hashCode(getM23());
        hash = prime * hash + Float.hashCode(getM30());
        hash = prime * hash + Float.hashCode(getM31());
        hash = prime * hash + Float.hashCode(getM32());
        hash = prime * hash + Float.hashCode(getM33());
        return hash;
    }

    @Override
    public Matrix4x4f clone() {
        try {
            Matrix4x4f copy = (Matrix4x4f)super.clone();
            return copy;
        } catch (CloneNotSupportedException ex) {
            throw new Error(ex);
        }
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="EpsilonEquatable<Matrix4x4f>">
    @Override
    public boolean epsilonEquals(Matrix4x4f other, double epsilon) {
        if (other == this) {
            return true;
        }
        if (other == null) {
            return false;
        }
        return epsilonEquals(getM00(), getM01(), getM02(), getM03(),
                             getM10(), getM11(), getM12(), getM13(),
                             getM20(), getM21(), getM22(), getM23(),
                             getM30(), getM31(), getM32(), getM33(), epsilon);
    }
//</editor-fold>

//<editor-fold defaultstate="collapsed" desc="private">
    private boolean epsilonEquals(float m00, float m01, float m02, float m03,
                                  float m10, float m11, float m12, float m13,
                                  float m20, float m21, float m22, float m23,
                                  float m30, float m31, float m32, float m33) {
        return epsilonEquals(m00, m01, m02, m03,
                             m10, m11, m12, m13,
                             m20, m21, m22, m23,
                             m30, m31, m32, m33, EPSILON);
    }

    private boolean epsilonEquals(float m00, float m01, float m02, float m03,
                                  float m10, float m11, float m12, float m13,
                                  float m20, float m21, float m22, float m23,
                                  float m30, float m31, float m32, float m33, double epsilon) {
        return DoubleUtils.epsilonEquals(getM00(), m00, epsilon) && DoubleUtils.epsilonEquals(getM01(), m01, epsilon) && DoubleUtils.epsilonEquals(getM02(), m02, epsilon) && DoubleUtils.epsilonEquals(getM03(), m03, epsilon)
               && DoubleUtils.epsilonEquals(getM10(), m10, epsilon) && DoubleUtils.epsilonEquals(getM11(), m11, epsilon) && DoubleUtils.epsilonEquals(getM12(), m12, epsilon) && DoubleUtils.epsilonEquals(getM13(), m13, epsilon)
               && DoubleUtils.epsilonEquals(getM20(), m20, epsilon) && DoubleUtils.epsilonEquals(getM21(), m21, epsilon) && DoubleUtils.epsilonEquals(getM22(), m22, epsilon) && DoubleUtils.epsilonEquals(getM23(), m23, epsilon)
               && DoubleUtils.epsilonEquals(getM30(), m30, epsilon) && DoubleUtils.epsilonEquals(getM31(), m31, epsilon) && DoubleUtils.epsilonEquals(getM32(), m32, epsilon) && DoubleUtils.epsilonEquals(getM33(), m33, epsilon);
    }

    private boolean equals(float m00, float m01, float m02, float m03,
                           float m10, float m11, float m12, float m13,
                           float m20, float m21, float m22, float m23,
                           float m30, float m31, float m32, float m33) {
        return getM00() == m00 && getM01() == m01 && getM02() == m02 && getM03() == m03
               && getM10() == m10 && getM11() == m11 && getM12() == m12 && getM13() == m13
               && getM20() == m20 && getM21() == m21 && getM22() == m22 && getM23() == m23
               && getM30() == m30 && getM31() == m31 && getM32() == m32 && getM33() == m33;
    }

    private static String getFormat() {
        if (format == null) {
            String f = ".3f"; // Floating point number with 2 decimal places

            StringBuilder buff = new StringBuilder();
            String b = "%1$s"; // Begin      [
            String s = "%2$s"; // Separation ,
            String e = "%3$s"; // End        ]
            int k = 4;
            buff.append(b);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(s);
            buff.append("%").append(k++).append("$").append(f);
            buff.append(e);
            format = buff.toString();
        }
        return format;
    }
//</editor-fold>
}








