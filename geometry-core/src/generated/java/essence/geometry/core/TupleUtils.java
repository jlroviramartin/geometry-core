/*
 * <auto-generated>
 *     This code was generated by a tool.
 *
 *     Changes to this file may cause incorrect behavior and will be lost if
 *     the code is regenerated.
 * </auto-generated>
 *
 * Copyright (C) 2018 joseluis.
 *
 * This library is free software; you can redistribute it and/or
 * modify it under the terms of the GNU Lesser General Public
 * License as published by the Free Software Foundation; either
 * version 2.1 of the License, or (at your option) any later version.
 *
 * This library is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
 * Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public
 * License along with this library; if not, write to the Free Software
 * Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston,
 * MA 02110-1301  USA
 */
package essence.geometry.core;

import essence.geometry.core.floats.Tuple2_Float;
import essence.geometry.core.floats.BuffTuple2_Float;
import essence.geometry.core.floats.BuffTuple2f;
import essence.geometry.core.doubles.Tuple2_Double;
import essence.geometry.core.doubles.BuffTuple2_Double;
import essence.geometry.core.doubles.BuffTuple2d;
import essence.geometry.core.floats.Tuple3_Float;
import essence.geometry.core.floats.BuffTuple3_Float;
import essence.geometry.core.floats.BuffTuple3f;
import essence.geometry.core.doubles.Tuple3_Double;
import essence.geometry.core.doubles.BuffTuple3_Double;
import essence.geometry.core.doubles.BuffTuple3d;
import essence.geometry.core.floats.Tuple4_Float;
import essence.geometry.core.floats.BuffTuple4_Float;
import essence.geometry.core.floats.BuffTuple4f;
import essence.geometry.core.doubles.Tuple4_Double;
import essence.geometry.core.doubles.BuffTuple4_Double;
import essence.geometry.core.doubles.BuffTuple4d;
import essence.geometry.core.integers.Tuple2_Integer;
import essence.geometry.core.integers.BuffTuple2_Integer;
import essence.geometry.core.integers.BuffTuple2i;
import essence.geometry.core.bytes.Tuple3_Byte;
import essence.geometry.core.bytes.BuffTuple3_Byte;
import essence.geometry.core.bytes.BuffTuple3b;
import essence.geometry.core.bytes.Tuple4_Byte;
import essence.geometry.core.bytes.BuffTuple4_Byte;
import essence.geometry.core.bytes.BuffTuple4b;
import essence.geometry.core.floats.MatrixGetter2x2_Float;
import essence.geometry.core.floats.Matrix2x2f;
import essence.geometry.core.floats.MatrixSetter2x2_Float;
import essence.geometry.core.doubles.MatrixGetter2x2_Double;
import essence.geometry.core.doubles.Matrix2x2d;
import essence.geometry.core.doubles.MatrixSetter2x2_Double;
import essence.geometry.core.floats.MatrixGetter3x3_Float;
import essence.geometry.core.floats.Matrix3x3f;
import essence.geometry.core.floats.MatrixSetter3x3_Float;
import essence.geometry.core.doubles.MatrixGetter3x3_Double;
import essence.geometry.core.doubles.Matrix3x3d;
import essence.geometry.core.doubles.MatrixSetter3x3_Double;
import essence.geometry.core.floats.MatrixGetter4x4_Float;
import essence.geometry.core.floats.Matrix4x4f;
import essence.geometry.core.floats.MatrixSetter4x4_Float;
import essence.geometry.core.doubles.MatrixGetter4x4_Double;
import essence.geometry.core.doubles.Matrix4x4d;
import essence.geometry.core.doubles.MatrixSetter4x4_Double;

public class TupleUtils {

    /**
     * This method converts a Tuple into a Tuple2_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple2_Float.
     */
    public static Tuple2_Float toTuple2_Float(Tuple other) {
        if (other instanceof Tuple2_Float) {
            return (Tuple2_Float)other;
        }

        BuffTuple2f aux = new BuffTuple2f();
        if (other instanceof Tuple2_Number) {
            ((Tuple2_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple2_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple2_Float.
     */
    public static BuffTuple2_Float toBuffTuple2_Float(BuffTuple other) {
        if (other instanceof BuffTuple2_Float) {
            return (BuffTuple2_Float)other;
        }

        if (other instanceof BuffTuple2_Number) {
            return new BuffTuple2_Float() {
                private final BuffTuple2_Number inner = (BuffTuple2_Number)other;
                private final BuffTuple2f buff = new BuffTuple2f();

                @Override
                public void setAt(int index, float value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(float value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(float value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(float x, float y) {
                    buff.set(x, y);
                    buff.getInto(inner);
                }

                @Override
                public float getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public float getX() {
                    return buff.getX();
                }

                @Override
                public float getY() {
                    return buff.getY();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 2;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple2_Float() {
            private final BuffTuple inner = other;
            private final BuffTuple2f buff = new BuffTuple2f();

            @Override
            public void setAt(int index, float value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(float value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(float value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void set(float x, float y) {
                buff.set(x, y);
                inner.set(buff);
            }

            @Override
            public float getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public float getX() {
                return buff.getX();
            }

            @Override
            public float getY() {
                return buff.getY();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 2;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple2_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple2_Double.
     */
    public static Tuple2_Double toTuple2_Double(Tuple other) {
        if (other instanceof Tuple2_Double) {
            return (Tuple2_Double)other;
        }

        BuffTuple2d aux = new BuffTuple2d();
        if (other instanceof Tuple2_Number) {
            ((Tuple2_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple2_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple2_Double.
     */
    public static BuffTuple2_Double toBuffTuple2_Double(BuffTuple other) {
        if (other instanceof BuffTuple2_Double) {
            return (BuffTuple2_Double)other;
        }

        if (other instanceof BuffTuple2_Number) {
            return new BuffTuple2_Double() {
                private final BuffTuple2_Number inner = (BuffTuple2_Number)other;
                private final BuffTuple2d buff = new BuffTuple2d();

                @Override
                public void setAt(int index, double value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(double value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(double value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(double x, double y) {
                    buff.set(x, y);
                    buff.getInto(inner);
                }

                @Override
                public double getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public double getX() {
                    return buff.getX();
                }

                @Override
                public double getY() {
                    return buff.getY();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 2;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple2_Double() {
            private final BuffTuple inner = other;
            private final BuffTuple2d buff = new BuffTuple2d();

            @Override
            public void setAt(int index, double value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(double value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(double value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void set(double x, double y) {
                buff.set(x, y);
                inner.set(buff);
            }

            @Override
            public double getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public double getX() {
                return buff.getX();
            }

            @Override
            public double getY() {
                return buff.getY();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 2;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple3_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple3_Float.
     */
    public static Tuple3_Float toTuple3_Float(Tuple other) {
        if (other instanceof Tuple3_Float) {
            return (Tuple3_Float)other;
        }

        BuffTuple3f aux = new BuffTuple3f();
        if (other instanceof Tuple3_Number) {
            ((Tuple3_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple3_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple3_Float.
     */
    public static BuffTuple3_Float toBuffTuple3_Float(BuffTuple other) {
        if (other instanceof BuffTuple3_Float) {
            return (BuffTuple3_Float)other;
        }

        if (other instanceof BuffTuple3_Number) {
            return new BuffTuple3_Float() {
                private final BuffTuple3_Number inner = (BuffTuple3_Number)other;
                private final BuffTuple3f buff = new BuffTuple3f();

                @Override
                public void setAt(int index, float value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(float value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(float value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(float value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(float x, float y, float z) {
                    buff.set(x, y, z);
                    buff.getInto(inner);
                }

                @Override
                public float getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public float getX() {
                    return buff.getX();
                }

                @Override
                public float getY() {
                    return buff.getY();
                }

                @Override
                public float getZ() {
                    return buff.getZ();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 3;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple3_Float() {
            private final BuffTuple inner = other;
            private final BuffTuple3f buff = new BuffTuple3f();

            @Override
            public void setAt(int index, float value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(float value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(float value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(float value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void set(float x, float y, float z) {
                buff.set(x, y, z);
                inner.set(buff);
            }

            @Override
            public float getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public float getX() {
                return buff.getX();
            }

            @Override
            public float getY() {
                return buff.getY();
            }

            @Override
            public float getZ() {
                return buff.getZ();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 3;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple3_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple3_Double.
     */
    public static Tuple3_Double toTuple3_Double(Tuple other) {
        if (other instanceof Tuple3_Double) {
            return (Tuple3_Double)other;
        }

        BuffTuple3d aux = new BuffTuple3d();
        if (other instanceof Tuple3_Number) {
            ((Tuple3_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple3_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple3_Double.
     */
    public static BuffTuple3_Double toBuffTuple3_Double(BuffTuple other) {
        if (other instanceof BuffTuple3_Double) {
            return (BuffTuple3_Double)other;
        }

        if (other instanceof BuffTuple3_Number) {
            return new BuffTuple3_Double() {
                private final BuffTuple3_Number inner = (BuffTuple3_Number)other;
                private final BuffTuple3d buff = new BuffTuple3d();

                @Override
                public void setAt(int index, double value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(double value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(double value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(double value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(double x, double y, double z) {
                    buff.set(x, y, z);
                    buff.getInto(inner);
                }

                @Override
                public double getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public double getX() {
                    return buff.getX();
                }

                @Override
                public double getY() {
                    return buff.getY();
                }

                @Override
                public double getZ() {
                    return buff.getZ();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 3;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple3_Double() {
            private final BuffTuple inner = other;
            private final BuffTuple3d buff = new BuffTuple3d();

            @Override
            public void setAt(int index, double value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(double value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(double value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(double value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void set(double x, double y, double z) {
                buff.set(x, y, z);
                inner.set(buff);
            }

            @Override
            public double getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public double getX() {
                return buff.getX();
            }

            @Override
            public double getY() {
                return buff.getY();
            }

            @Override
            public double getZ() {
                return buff.getZ();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 3;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple4_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple4_Float.
     */
    public static Tuple4_Float toTuple4_Float(Tuple other) {
        if (other instanceof Tuple4_Float) {
            return (Tuple4_Float)other;
        }

        BuffTuple4f aux = new BuffTuple4f();
        if (other instanceof Tuple4_Number) {
            ((Tuple4_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple4_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple4_Float.
     */
    public static BuffTuple4_Float toBuffTuple4_Float(BuffTuple other) {
        if (other instanceof BuffTuple4_Float) {
            return (BuffTuple4_Float)other;
        }

        if (other instanceof BuffTuple4_Number) {
            return new BuffTuple4_Float() {
                private final BuffTuple4_Number inner = (BuffTuple4_Number)other;
                private final BuffTuple4f buff = new BuffTuple4f();

                @Override
                public void setAt(int index, float value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(float value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(float value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(float value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void setW(float value) {
                    buff.setW(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(float x, float y, float z, float w) {
                    buff.set(x, y, z, w);
                    buff.getInto(inner);
                }

                @Override
                public float getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public float getX() {
                    return buff.getX();
                }

                @Override
                public float getY() {
                    return buff.getY();
                }

                @Override
                public float getZ() {
                    return buff.getZ();
                }

                @Override
                public float getW() {
                    return buff.getW();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 4;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple4_Float() {
            private final BuffTuple inner = other;
            private final BuffTuple4f buff = new BuffTuple4f();

            @Override
            public void setAt(int index, float value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(float value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(float value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(float value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void setW(float value) {
                buff.setW(value);
                inner.set(buff);
            }

            @Override
            public void set(float x, float y, float z, float w) {
                buff.set(x, y, z, w);
                inner.set(buff);
            }

            @Override
            public float getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public float getX() {
                return buff.getX();
            }

            @Override
            public float getY() {
                return buff.getY();
            }

            @Override
            public float getZ() {
                return buff.getZ();
            }

            @Override
            public float getW() {
                return buff.getW();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 4;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple4_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple4_Double.
     */
    public static Tuple4_Double toTuple4_Double(Tuple other) {
        if (other instanceof Tuple4_Double) {
            return (Tuple4_Double)other;
        }

        BuffTuple4d aux = new BuffTuple4d();
        if (other instanceof Tuple4_Number) {
            ((Tuple4_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple4_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple4_Double.
     */
    public static BuffTuple4_Double toBuffTuple4_Double(BuffTuple other) {
        if (other instanceof BuffTuple4_Double) {
            return (BuffTuple4_Double)other;
        }

        if (other instanceof BuffTuple4_Number) {
            return new BuffTuple4_Double() {
                private final BuffTuple4_Number inner = (BuffTuple4_Number)other;
                private final BuffTuple4d buff = new BuffTuple4d();

                @Override
                public void setAt(int index, double value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(double value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(double value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(double value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void setW(double value) {
                    buff.setW(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(double x, double y, double z, double w) {
                    buff.set(x, y, z, w);
                    buff.getInto(inner);
                }

                @Override
                public double getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public double getX() {
                    return buff.getX();
                }

                @Override
                public double getY() {
                    return buff.getY();
                }

                @Override
                public double getZ() {
                    return buff.getZ();
                }

                @Override
                public double getW() {
                    return buff.getW();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 4;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple4_Double() {
            private final BuffTuple inner = other;
            private final BuffTuple4d buff = new BuffTuple4d();

            @Override
            public void setAt(int index, double value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(double value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(double value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(double value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void setW(double value) {
                buff.setW(value);
                inner.set(buff);
            }

            @Override
            public void set(double x, double y, double z, double w) {
                buff.set(x, y, z, w);
                inner.set(buff);
            }

            @Override
            public double getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public double getX() {
                return buff.getX();
            }

            @Override
            public double getY() {
                return buff.getY();
            }

            @Override
            public double getZ() {
                return buff.getZ();
            }

            @Override
            public double getW() {
                return buff.getW();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 4;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple2_Integer. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple2_Integer.
     */
    public static Tuple2_Integer toTuple2_Integer(Tuple other) {
        if (other instanceof Tuple2_Integer) {
            return (Tuple2_Integer)other;
        }

        BuffTuple2i aux = new BuffTuple2i();
        if (other instanceof Tuple2_Number) {
            ((Tuple2_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple2_Integer. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple2_Integer.
     */
    public static BuffTuple2_Integer toBuffTuple2_Integer(BuffTuple other) {
        if (other instanceof BuffTuple2_Integer) {
            return (BuffTuple2_Integer)other;
        }

        if (other instanceof BuffTuple2_Number) {
            return new BuffTuple2_Integer() {
                private final BuffTuple2_Number inner = (BuffTuple2_Number)other;
                private final BuffTuple2i buff = new BuffTuple2i();

                @Override
                public void setAt(int index, int value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(int value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(int value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(int x, int y) {
                    buff.set(x, y);
                    buff.getInto(inner);
                }

                @Override
                public int getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public int getX() {
                    return buff.getX();
                }

                @Override
                public int getY() {
                    return buff.getY();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 2;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple2_Integer() {
            private final BuffTuple inner = other;
            private final BuffTuple2i buff = new BuffTuple2i();

            @Override
            public void setAt(int index, int value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(int value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(int value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void set(int x, int y) {
                buff.set(x, y);
                inner.set(buff);
            }

            @Override
            public int getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public int getX() {
                return buff.getX();
            }

            @Override
            public int getY() {
                return buff.getY();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 2;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple3_Byte. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple3_Byte.
     */
    public static Tuple3_Byte toTuple3_Byte(Tuple other) {
        if (other instanceof Tuple3_Byte) {
            return (Tuple3_Byte)other;
        }

        BuffTuple3b aux = new BuffTuple3b();
        if (other instanceof Tuple3_Number) {
            ((Tuple3_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple3_Byte. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple3_Byte.
     */
    public static BuffTuple3_Byte toBuffTuple3_Byte(BuffTuple other) {
        if (other instanceof BuffTuple3_Byte) {
            return (BuffTuple3_Byte)other;
        }

        if (other instanceof BuffTuple3_Number) {
            return new BuffTuple3_Byte() {
                private final BuffTuple3_Number inner = (BuffTuple3_Number)other;
                private final BuffTuple3b buff = new BuffTuple3b();

                @Override
                public void setAt(int index, byte value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(byte value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(byte value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(byte value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(byte x, byte y, byte z) {
                    buff.set(x, y, z);
                    buff.getInto(inner);
                }

                @Override
                public byte getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public byte getX() {
                    return buff.getX();
                }

                @Override
                public byte getY() {
                    return buff.getY();
                }

                @Override
                public byte getZ() {
                    return buff.getZ();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 3;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple3_Byte() {
            private final BuffTuple inner = other;
            private final BuffTuple3b buff = new BuffTuple3b();

            @Override
            public void setAt(int index, byte value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(byte value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(byte value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(byte value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void set(byte x, byte y, byte z) {
                buff.set(x, y, z);
                inner.set(buff);
            }

            @Override
            public byte getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public byte getX() {
                return buff.getX();
            }

            @Override
            public byte getY() {
                return buff.getY();
            }

            @Override
            public byte getZ() {
                return buff.getZ();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 3;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a Tuple4_Byte. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return Tuple4_Byte.
     */
    public static Tuple4_Byte toTuple4_Byte(Tuple other) {
        if (other instanceof Tuple4_Byte) {
            return (Tuple4_Byte)other;
        }

        BuffTuple4b aux = new BuffTuple4b();
        if (other instanceof Tuple4_Number) {
            ((Tuple4_Number)other).getInto(aux);
        } else {
            aux.set(other);
        }

        return aux;
    }

    /**
     * This method converts a Tuple into a BuffTuple4_Byte. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return BuffTuple4_Byte.
     */
    public static BuffTuple4_Byte toBuffTuple4_Byte(BuffTuple other) {
        if (other instanceof BuffTuple4_Byte) {
            return (BuffTuple4_Byte)other;
        }

        if (other instanceof BuffTuple4_Number) {
            return new BuffTuple4_Byte() {
                private final BuffTuple4_Number inner = (BuffTuple4_Number)other;
                private final BuffTuple4b buff = new BuffTuple4b();

                @Override
                public void setAt(int index, byte value) {
                    buff.setAt(index, value);
                    buff.getInto(inner);
                }

                @Override
                public void setX(byte value) {
                    buff.setX(value);
                    buff.getInto(inner);
                }

                @Override
                public void setY(byte value) {
                    buff.setY(value);
                    buff.getInto(inner);
                }

                @Override
                public void setZ(byte value) {
                    buff.setZ(value);
                    buff.getInto(inner);
                }

                @Override
                public void setW(byte value) {
                    buff.setW(value);
                    buff.getInto(inner);
                }

                @Override
                public void set(byte x, byte y, byte z, byte w) {
                    buff.set(x, y, z, w);
                    buff.getInto(inner);
                }

                @Override
                public byte getAt(int index)  {
                    return buff.getAt(index);
                }

                @Override
                public byte getX() {
                    return buff.getX();
                }

                @Override
                public byte getY() {
                    return buff.getY();
                }

                @Override
                public byte getZ() {
                    return buff.getZ();
                }

                @Override
                public byte getW() {
                    return buff.getW();
                }

                @Override
                public void set(Tuple other) {
                    buff.set(other);
                    buff.getInto(inner);
                }

                @Override
                public int size() {
                    return 4;
                }

                @Override
                public boolean epsilonEquals(Tuple other, double epsilon) {
                    return buff.epsilonEquals(other, epsilon);
                }
            };
        }

        return new BuffTuple4_Byte() {
            private final BuffTuple inner = other;
            private final BuffTuple4b buff = new BuffTuple4b();

            @Override
            public void setAt(int index, byte value) {
                buff.setAt(index, value);
                inner.set(buff);
            }

            @Override
            public void setX(byte value) {
                buff.setX(value);
                inner.set(buff);
            }

            @Override
            public void setY(byte value) {
                buff.setY(value);
                inner.set(buff);
            }

            @Override
            public void setZ(byte value) {
                buff.setZ(value);
                inner.set(buff);
            }

            @Override
            public void setW(byte value) {
                buff.setW(value);
                inner.set(buff);
            }

            @Override
            public void set(byte x, byte y, byte z, byte w) {
                buff.set(x, y, z, w);
                inner.set(buff);
            }

            @Override
            public byte getAt(int index)  {
                return buff.getAt(index);
            }

            @Override
            public byte getX() {
                return buff.getX();
            }

            @Override
            public byte getY() {
                return buff.getY();
            }

            @Override
            public byte getZ() {
                return buff.getZ();
            }

            @Override
            public byte getW() {
                return buff.getW();
            }

            @Override
            public void set(Tuple other) {
                buff.set(other);
                inner.set(buff);
            }

            @Override
            public int size() {
                return 4;
            }

            @Override
            public boolean epsilonEquals(Tuple other, double epsilon) {
                return buff.epsilonEquals(other, epsilon);
            }
        };
    }

    /**
     * This method converts a Tuple into a MatrixGetter2x2_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter2x2_Float.
     */
    public static MatrixGetter2x2_Float toMatrixGetter2x2_Float(MatrixInpector other) {
        if (other instanceof MatrixGetter2x2_Float) {
            return (MatrixGetter2x2_Float)other;
        }

        Matrix2x2f aux = new Matrix2x2f();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter2x2_Float. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter2x2_Float.
    // */
    //public static MatrixSetter2x2_Float toMatrixSetter2x2_Float(BuffTuple other) {
    //}

    /**
     * This method converts a Tuple into a MatrixGetter2x2_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter2x2_Double.
     */
    public static MatrixGetter2x2_Double toMatrixGetter2x2_Double(MatrixInpector other) {
        if (other instanceof MatrixGetter2x2_Double) {
            return (MatrixGetter2x2_Double)other;
        }

        Matrix2x2d aux = new Matrix2x2d();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter2x2_Double. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter2x2_Double.
    // */
    //public static MatrixSetter2x2_Double toMatrixSetter2x2_Double(BuffTuple other) {
    //}

    /**
     * This method converts a Tuple into a MatrixGetter3x3_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter3x3_Float.
     */
    public static MatrixGetter3x3_Float toMatrixGetter3x3_Float(MatrixInpector other) {
        if (other instanceof MatrixGetter3x3_Float) {
            return (MatrixGetter3x3_Float)other;
        }

        Matrix3x3f aux = new Matrix3x3f();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter3x3_Float. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter3x3_Float.
    // */
    //public static MatrixSetter3x3_Float toMatrixSetter3x3_Float(BuffTuple other) {
    //}

    /**
     * This method converts a Tuple into a MatrixGetter3x3_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter3x3_Double.
     */
    public static MatrixGetter3x3_Double toMatrixGetter3x3_Double(MatrixInpector other) {
        if (other instanceof MatrixGetter3x3_Double) {
            return (MatrixGetter3x3_Double)other;
        }

        Matrix3x3d aux = new Matrix3x3d();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter3x3_Double. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter3x3_Double.
    // */
    //public static MatrixSetter3x3_Double toMatrixSetter3x3_Double(BuffTuple other) {
    //}

    /**
     * This method converts a Tuple into a MatrixGetter4x4_Float. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter4x4_Float.
     */
    public static MatrixGetter4x4_Float toMatrixGetter4x4_Float(MatrixInpector other) {
        if (other instanceof MatrixGetter4x4_Float) {
            return (MatrixGetter4x4_Float)other;
        }

        Matrix4x4f aux = new Matrix4x4f();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter4x4_Float. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter4x4_Float.
    // */
    //public static MatrixSetter4x4_Float toMatrixSetter4x4_Float(BuffTuple other) {
    //}

    /**
     * This method converts a Tuple into a MatrixGetter4x4_Double. It is a helper method to ease the operations.
     *
     * @param other Tuple.
     * @return MatrixGetter4x4_Double.
     */
    public static MatrixGetter4x4_Double toMatrixGetter4x4_Double(MatrixInpector other) {
        if (other instanceof MatrixGetter4x4_Double) {
            return (MatrixGetter4x4_Double)other;
        }

        Matrix4x4d aux = new Matrix4x4d();
        other.getInto(aux);
        return aux;
    }

    ///**
    // * This method converts a Tuple into a MatrixSetter4x4_Double. It is a helper method to ease the operations.
    // *
    // * @param other Tuple.
    // * @return MatrixSetter4x4_Double.
    // */
    //public static MatrixSetter4x4_Double toMatrixSetter4x4_Double(BuffTuple other) {
    //}
}
